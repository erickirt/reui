{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "filters-nuqs",
  "type": "registry:component",
  "dependencies": [
    "@tanstack/react-table",
    "nuqs",
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "radix-ui",
    "lucide-react",
    "@radix-ui/react-dialog",
    "cmdk",
    "@radix-ui/react-tooltip"
  ],
  "registryDependencies": [
    "https://reui.io/r/avatar.json",
    "https://reui.io/r/badge.json",
    "https://reui.io/r/button.json",
    "https://reui.io/r/data-grid.json",
    "https://reui.io/r/data-grid-column-header.json",
    "https://reui.io/r/data-grid-pagination.json",
    "https://reui.io/r/data-grid-table.json",
    "https://reui.io/r/filters.json",
    "https://reui.io/r/scroll-area.json"
  ],
  "files": [
    {
      "path": "registry/default/components/filters/nuqs.tsx",
      "content": "'use client';\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/registry/default/ui/avatar';\nimport { Badge } from '@/registry/default/ui/badge';\nimport { Button } from '@/registry/default/ui/button';\nimport { DataGrid, DataGridContainer } from '@/registry/default/ui/data-grid';\nimport { DataGridColumnHeader } from '@/registry/default/ui/data-grid-column-header';\nimport { DataGridPagination } from '@/registry/default/ui/data-grid-pagination';\nimport { DataGridTable } from '@/registry/default/ui/data-grid-table';\nimport { Filters, type Filter, type FilterFieldConfig } from '@/registry/default/ui/filters';\nimport { ScrollArea, ScrollBar } from '@/registry/default/ui/scroll-area';\nimport {\n  ColumnDef,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  PaginationState,\n  SortingState,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { Building, Calendar, CheckCircle, DollarSign, FunnelX, Mail, MapPin, User } from 'lucide-react';\nimport { parseAsArrayOf, parseAsString, useQueryStates } from 'nuqs';\nimport { NuqsAdapter } from 'nuqs/adapters/next/app';\n\ninterface IData {\n  id: string;\n  name: string;\n  availability: 'online' | 'away' | 'busy' | 'offline';\n  avatar: string;\n  status: 'active' | 'inactive' | 'archived';\n  flag: string;\n  email: string;\n  company: string;\n  role: string;\n  joined: string;\n  location: string;\n  balance: number;\n}\n\nconst demoData: IData[] = [\n  {\n    id: '1',\n    name: 'Kathryn Campbell',\n    availability: 'online',\n    avatar: '1.png',\n    status: 'active',\n    flag: 'ðŸ‡ºðŸ‡¸',\n    email: 'kathryn@apple.com',\n    company: 'Apple',\n    role: 'CEO',\n    joined: '2021-04-15',\n    location: 'San Francisco, USA',\n    balance: 5143.03,\n  },\n  {\n    id: '2',\n    name: 'Robert Smith',\n    availability: 'away',\n    avatar: '2.png',\n    status: 'inactive',\n    flag: 'ðŸ‡¬ðŸ‡§',\n    email: 'robert@openai.com',\n    company: 'OpenAI',\n    role: 'CTO',\n    joined: '2020-07-20',\n    location: 'London, UK',\n    balance: 4321.87,\n  },\n  {\n    id: '3',\n    name: 'Sophia Johnson',\n    availability: 'busy',\n    avatar: '3.png',\n    status: 'active',\n    flag: 'ðŸ‡¨ðŸ‡¦',\n    email: 'sophia@meta.com',\n    company: 'Meta',\n    role: 'Designer',\n    joined: '2019-03-12',\n    location: 'Toronto, Canada',\n    balance: 7654.98,\n  },\n  {\n    id: '4',\n    name: 'Lucas Walker',\n    availability: 'offline',\n    avatar: '4.png',\n    status: 'archived',\n    flag: 'ðŸ‡¦ðŸ‡º',\n    email: 'lucas@tesla.com',\n    company: 'Tesla',\n    role: 'Developer',\n    joined: '2022-01-18',\n    location: 'Sydney, Australia',\n    balance: 3456.45,\n  },\n  {\n    id: '5',\n    name: 'Emily Davis',\n    availability: 'online',\n    avatar: '5.png',\n    status: 'active',\n    flag: 'ðŸ‡©ðŸ‡ª',\n    email: 'emily@sap.com',\n    company: 'SAP',\n    role: 'Lawyer',\n    joined: '2023-05-23',\n    location: 'Berlin, Germany',\n    balance: 9876.54,\n  },\n  {\n    id: '6',\n    name: 'James Lee',\n    availability: 'away',\n    avatar: '6.png',\n    status: 'active',\n    flag: 'ðŸ‡²ðŸ‡¾',\n    email: 'james@keenthemes.com',\n    company: 'Keenthemes',\n    role: 'Director',\n    joined: '2018-11-30',\n    location: 'Kuala Lumpur, MY',\n    balance: 6214.22,\n  },\n];\n\n// Availability status component\nconst AvailabilityStatus = ({ availability }: { availability: string }) => {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'online':\n        return 'bg-green-500';\n      case 'away':\n        return 'bg-yellow-500';\n      case 'busy':\n        return 'bg-red-500';\n      case 'offline':\n        return 'bg-gray-400';\n      default:\n        return 'bg-gray-400';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'online':\n        return 'Online';\n      case 'away':\n        return 'Away';\n      case 'busy':\n        return 'Busy';\n      case 'offline':\n        return 'Offline';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  return (\n    <div className=\"flex items-center gap-1.5\">\n      <div className={`size-2 rounded-full ${getStatusColor(availability)}`} />\n      <span className=\"text-sm text-muted-foreground\">{getStatusLabel(availability)}</span>\n    </div>\n  );\n};\n\nexport default function NuqsDataGridDemo() {\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 0,\n    pageSize: 5,\n  });\n  const [sorting, setSorting] = useState<SortingState>([{ id: 'name', desc: false }]);\n\n  const [filters, setFilters] = useState<Filter[]>([]);\n  const urlDebounceRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Cleanup debounce timer on unmount\n  useEffect(() => {\n    return () => {\n      if (urlDebounceRef.current) clearTimeout(urlDebounceRef.current);\n    };\n  }, []);\n\n  // Use nuqs for URL state management with batching\n  const [queryStates, setQueryStates] = useQueryStates(\n    {\n      name: parseAsString,\n      email: parseAsString,\n      company: parseAsArrayOf(parseAsString),\n      role: parseAsArrayOf(parseAsString),\n      status: parseAsArrayOf(parseAsString),\n      availability: parseAsArrayOf(parseAsString),\n      location: parseAsString,\n      joined: parseAsString,\n      balance: parseAsString,\n      balanceMin: parseAsString,\n      balanceMax: parseAsString,\n    },\n    {\n      history: 'push',\n    },\n  );\n\n  // Filters are driven directly by component state\n\n  // Filter field configurations\n  const fields: FilterFieldConfig[] = [\n    {\n      key: 'name',\n      label: 'Name',\n      icon: <User className=\"size-3.5\" />,\n      type: 'text',\n      defaultOperator: 'contains',\n      className: 'w-40',\n      placeholder: 'Search names...',\n    },\n    {\n      key: 'email',\n      label: 'Email',\n      icon: <Mail className=\"size-3.5\" />,\n      type: 'email',\n      className: 'w-48',\n      placeholder: 'user@example.com',\n    },\n    {\n      key: 'company',\n      label: 'Company',\n      icon: <Building className=\"size-3.5\" />,\n      type: 'select',\n      searchable: true,\n      className: 'w-[180px]',\n      options: [\n        { value: 'Apple', label: 'Apple' },\n        { value: 'OpenAI', label: 'OpenAI' },\n        { value: 'Meta', label: 'Meta' },\n        { value: 'Tesla', label: 'Tesla' },\n        { value: 'SAP', label: 'SAP' },\n        { value: 'Keenthemes', label: 'Keenthemes' },\n      ],\n    },\n    {\n      key: 'role',\n      label: 'Role',\n      icon: <User className=\"size-3.5\" />,\n      type: 'select',\n      searchable: true,\n      className: 'w-[160px]',\n      options: [\n        { value: 'CEO', label: 'CEO' },\n        { value: 'CTO', label: 'CTO' },\n        { value: 'Designer', label: 'Designer' },\n        { value: 'Developer', label: 'Developer' },\n        { value: 'Lawyer', label: 'Lawyer' },\n        { value: 'Director', label: 'Director' },\n      ],\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      icon: <CheckCircle className=\"size-3.5\" />,\n      type: 'select',\n      searchable: false,\n      className: 'w-[140px]',\n      options: [\n        {\n          value: 'active',\n          label: 'Active',\n          icon: <div className=\"size-2 bg-green-500 rounded-full\"></div>,\n        },\n        {\n          value: 'inactive',\n          label: 'Inactive',\n          icon: <div className=\"size-2 bg-destructive rounded-full\"></div>,\n        },\n        {\n          value: 'archived',\n          label: 'Archived',\n          icon: <div className=\"size-2 bg-gray-400 rounded-full\"></div>,\n        },\n      ],\n    },\n    {\n      key: 'availability',\n      label: 'Availability',\n      icon: <User className=\"size-3.5\" />,\n      type: 'select',\n      searchable: false,\n      className: 'w-[160px]',\n      options: [\n        {\n          value: 'online',\n          label: 'Online',\n          icon: <div className=\"size-2 bg-green-500 rounded-full\"></div>,\n        },\n        {\n          value: 'away',\n          label: 'Away',\n          icon: <div className=\"size-2 bg-yellow-500 rounded-full\"></div>,\n        },\n        {\n          value: 'busy',\n          label: 'Busy',\n          icon: <div className=\"size-2 bg-red-500 rounded-full\"></div>,\n        },\n        {\n          value: 'offline',\n          label: 'Offline',\n          icon: <div className=\"size-2 bg-gray-400 rounded-full\"></div>,\n        },\n      ],\n    },\n    {\n      key: 'location',\n      label: 'Location',\n      icon: <MapPin className=\"size-3.5\" />,\n      type: 'text',\n      className: 'w-40',\n      placeholder: 'Search locations...',\n    },\n    {\n      key: 'joined',\n      label: 'Joined Date',\n      icon: <Calendar className=\"size-3.5\" />,\n      type: 'date',\n      className: 'w-36',\n    },\n    {\n      key: 'balance',\n      label: 'Balance',\n      icon: <DollarSign className=\"size-3.5\" />,\n      type: 'number',\n      min: 0,\n      max: 10000,\n      step: 100,\n      className: 'w-32',\n    },\n  ];\n\n  // Apply filters to data based on current filters state\n  const filteredData = useMemo(() => {\n    let filtered = [...demoData];\n    const active = filters.filter((f) => (Array.isArray(f.values) ? f.values.length > 0 : !!f.values));\n    active.forEach((filter) => {\n      const { field, operator, values } = filter;\n      filtered = filtered.filter((item) => {\n        const fieldValue = item[field as keyof IData];\n        switch (operator) {\n          case 'is':\n            return values.includes(fieldValue);\n          case 'is_not':\n            return !values.includes(fieldValue);\n          case 'contains':\n            return values.some((value) => String(fieldValue).toLowerCase().includes(String(value).toLowerCase()));\n          case 'not_contains':\n            return !values.some((value) => String(fieldValue).toLowerCase().includes(String(value).toLowerCase()));\n          case 'equals':\n            return fieldValue === values[0];\n          case 'not_equals':\n            return fieldValue !== values[0];\n          case 'greater_than':\n            return Number(fieldValue) > Number(values[0]);\n          case 'less_than':\n            return Number(fieldValue) < Number(values[0]);\n          case 'greater_than_or_equal':\n            return Number(fieldValue) >= Number(values[0]);\n          case 'less_than_or_equal':\n            return Number(fieldValue) <= Number(values[0]);\n          case 'between':\n            if (values.length >= 2) {\n              const min = Number(values[0]);\n              const max = Number(values[1]);\n              return Number(fieldValue) >= min && Number(fieldValue) <= max;\n            }\n            return true;\n          case 'not_between':\n            if (values.length >= 2) {\n              const min = Number(values[0]);\n              const max = Number(values[1]);\n              return Number(fieldValue) < min || Number(fieldValue) > max;\n            }\n            return true;\n          case 'before':\n            return new Date(String(fieldValue)) < new Date(String(values[0]));\n          case 'after':\n            return new Date(String(fieldValue)) > new Date(String(values[0]));\n          default:\n            return true;\n        }\n      });\n    });\n    return filtered;\n  }, [filters]);\n\n  const handleFiltersChange = useCallback(\n    (newFilters: Filter[]) => {\n      setFilters(newFilters);\n      setPagination((prev) => ({ ...prev, pageIndex: 0 }));\n\n      if (urlDebounceRef.current) clearTimeout(urlDebounceRef.current);\n      urlDebounceRef.current = setTimeout(() => {\n        const next: Record<string, string | string[] | null> = {};\n        Object.keys(queryStates).forEach((k) => {\n          next[k] = null;\n        });\n        newFilters.forEach(({ field, values }) => {\n          if (['company', 'role', 'status', 'availability'].includes(field)) {\n            const clean = (values || []).filter((v) => v && String(v).trim() !== '') as string[];\n            next[field] = clean.length ? clean : null;\n          } else {\n            const first = values && values.length > 0 ? String(values[0]) : '';\n            next[field] = first && first.trim() !== '' ? first : null;\n          }\n        });\n        setQueryStates(next);\n      }, 250);\n    },\n    [queryStates, setQueryStates],\n  );\n\n  const clearFilters = useCallback(() => {\n    setFilters([]);\n    const clearedStates: Record<string, null> = {};\n    Object.keys(queryStates).forEach((key) => {\n      clearedStates[key] = null;\n    });\n    setQueryStates(clearedStates);\n  }, [queryStates, setQueryStates]);\n\n  const columns = useMemo<ColumnDef<IData>[]>(\n    () => [\n      {\n        accessorKey: 'name',\n        id: 'name',\n        header: ({ column }) => <DataGridColumnHeader title=\"Staff\" column={column} />,\n        cell: ({ row }) => {\n          return (\n            <div className=\"flex items-center gap-3\">\n              <Avatar className=\"size-8\">\n                <AvatarImage src={`/media/avatars/${row.original.avatar}`} alt={row.original.name} />\n                <AvatarFallback>{row.original.name.charAt(0)}</AvatarFallback>\n              </Avatar>\n              <div className=\"space-y-px\">\n                <div className=\"font-medium text-foreground\">{row.original.name}</div>\n                <div className=\"text-muted-foreground text-xs truncate max-w-[120px]\">{row.original.email}</div>\n              </div>\n            </div>\n          );\n        },\n        size: 200,\n        enableSorting: true,\n        enableHiding: false,\n      },\n      {\n        accessorKey: 'company',\n        id: 'company',\n        header: ({ column }) => <DataGridColumnHeader title=\"Company\" column={column} />,\n        cell: (info) => <span>{info.getValue() as string}</span>,\n        size: 150,\n        enableSorting: true,\n        enableHiding: false,\n      },\n      {\n        accessorKey: 'role',\n        id: 'role',\n        header: ({ column }) => <DataGridColumnHeader title=\"Role\" column={column} />,\n        cell: (info) => <span>{info.getValue() as string}</span>,\n        size: 125,\n        enableSorting: true,\n        enableHiding: false,\n      },\n      {\n        accessorKey: 'status',\n        id: 'status',\n        header: 'Status',\n        cell: ({ row }) => {\n          const status = row.original.status;\n\n          if (status == 'active') {\n            return (\n              <Badge variant=\"success\" appearance=\"outline\">\n                Active\n              </Badge>\n            );\n          } else if (status == 'inactive') {\n            return (\n              <Badge variant=\"destructive\" appearance=\"outline\">\n                Inactive\n              </Badge>\n            );\n          } else if (status == 'archived') {\n            return (\n              <Badge variant=\"secondary\" appearance=\"outline\">\n                Archived\n              </Badge>\n            );\n          }\n        },\n        size: 100,\n      },\n      {\n        accessorKey: 'availability',\n        id: 'availability',\n        header: 'Availability',\n        cell: ({ row }) => <AvailabilityStatus availability={row.original.availability} />,\n        size: 120,\n        enableSorting: true,\n      },\n      {\n        accessorKey: 'location',\n        id: 'location',\n        header: ({ column }) => <DataGridColumnHeader title=\"Location\" column={column} />,\n        cell: ({ row }) => (\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-lg\">{row.original.flag}</span>\n            <span>{row.original.location}</span>\n          </div>\n        ),\n        size: 180,\n        enableSorting: true,\n      },\n      {\n        accessorKey: 'balance',\n        id: 'balance',\n        header: ({ column }) => <DataGridColumnHeader title=\"Balance\" column={column} />,\n        cell: ({ row }) => <span className=\"font-medium\">${row.original.balance.toLocaleString()}</span>,\n        size: 120,\n        enableSorting: true,\n      },\n    ],\n    [],\n  );\n\n  const [columnOrder, setColumnOrder] = useState<string[]>(columns.map((column) => column.id as string));\n\n  const table = useReactTable({\n    columns,\n    data: filteredData,\n    pageCount: Math.ceil((filteredData?.length || 0) / pagination.pageSize),\n    getRowId: (row: IData) => row.id,\n    state: {\n      pagination,\n      sorting,\n      columnOrder,\n    },\n    onColumnOrderChange: setColumnOrder,\n    onPaginationChange: setPagination,\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n  });\n\n  return (\n    <NuqsAdapter>\n      <div className=\"w-full self-start\">\n        {/* Filters Section */}\n        <div className=\"flex items-start gap-2.5 mb-5\">\n          <div className=\"flex-1\">\n            <Filters filters={filters} fields={fields} onChange={handleFiltersChange} variant=\"outline\" size=\"sm\" />\n          </div>\n          {filters.length > 0 && (\n            <Button variant=\"outline\" size=\"sm\" onClick={clearFilters}>\n              <FunnelX /> Clear\n            </Button>\n          )}\n        </div>\n\n        {/* Data Grid */}\n        <DataGrid\n          table={table}\n          recordCount={filteredData?.length || 0}\n          tableLayout={{\n            columnsMovable: true,\n          }}\n        >\n          <div className=\"w-full space-y-2.5\">\n            <DataGridContainer>\n              <ScrollArea>\n                <DataGridTable />\n                <ScrollBar orientation=\"horizontal\" />\n              </ScrollArea>\n            </DataGridContainer>\n            <DataGridPagination />\n          </div>\n        </DataGrid>\n      </div>\n    </NuqsAdapter>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/avatar.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Avatar as AvatarPrimitive } from 'radix-ui';\n\nconst avatarStatusVariants = cva('flex items-center rounded-full size-2 border-2 border-background', {\n  variants: {\n    variant: {\n      online: 'bg-green-600',\n      offline: 'bg-zinc-400 dark:bg-zinc-500',\n      busy: 'bg-yellow-600',\n      away: 'bg-blue-600',\n    },\n  },\n  defaultVariants: {\n    variant: 'online',\n  },\n});\n\nfunction Avatar({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root data-slot=\"avatar\" className={cn('relative flex shrink-0 size-10', className)} {...props} />\n  );\n}\n\nfunction AvatarImage({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <div className={cn('relative overflow-hidden rounded-full', className)}>\n      <AvatarPrimitive.Image data-slot=\"avatar-image\" className={cn('aspect-square h-full w-full')} {...props} />\n    </div>\n  );\n}\n\nfunction AvatarFallback({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'flex h-full w-full items-center justify-center rounded-full border border-border bg-accent text-accent-foreground text-xs',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarIndicator({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"avatar-indicator\"\n      className={cn('absolute flex size-6 items-center justify-center', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarStatus({\n  className,\n  variant,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof avatarStatusVariants>) {\n  return <div data-slot=\"avatar-status\" className={cn(avatarStatusVariants({ variant }), className)} {...props} />;\n}\n\nexport { Avatar, AvatarFallback, AvatarImage, AvatarIndicator, AvatarStatus, avatarStatusVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/badge.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Slot as SlotPrimitive } from 'radix-ui';\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n  dotClassName?: string;\n  disabled?: boolean;\n}\n\nexport interface BadgeButtonProps\n  extends React.ButtonHTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeButtonVariants> {\n  asChild?: boolean;\n}\n\nexport type BadgeDotProps = React.HTMLAttributes<HTMLSpanElement>;\n\nconst badgeVariants = cva(\n  'inline-flex items-center whitespace-nowrap justify-center border border-transparent font-medium focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 [&_svg]:-ms-px [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground',\n        secondary: 'bg-secondary text-secondary-foreground',\n        success:\n          'bg-[var(--color-success-accent,var(--color-green-500))] text-[var(--color-success-foreground,var(--color-white))]',\n        warning:\n          'bg-[var(--color-warning-accent,var(--color-yellow-500))] text-[var(--color-warning-foreground,var(--color-white))]',\n        info: 'bg-[var(--color-info-accent,var(--color-violet-500))] text-[var(--color-info-foreground,var(--color-white))]',\n        outline: 'bg-transparent border border-border text-secondary-foreground',\n        destructive: 'bg-destructive text-destructive-foreground',\n      },\n      appearance: {\n        default: '',\n        light: '',\n        outline: '',\n        ghost: 'border-transparent bg-transparent',\n      },\n      disabled: {\n        true: 'opacity-50 pointer-events-none',\n      },\n      size: {\n        lg: 'rounded-md px-[0.5rem] h-7 min-w-7 gap-1.5 text-xs [&_svg]:size-3.5',\n        md: 'rounded-md px-[0.45rem] h-6 min-w-6 gap-1.5 text-xs [&_svg]:size-3.5 ',\n        sm: 'rounded-sm px-[0.325rem] h-5 min-w-5 gap-1 text-[0.6875rem] leading-[0.75rem] [&_svg]:size-3',\n        xs: 'rounded-sm px-[0.25rem] h-4 min-w-4 gap-1 text-[0.625rem] leading-[0.5rem] [&_svg]:size-3',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n    },\n    compoundVariants: [\n      /* Light */\n      {\n        variant: 'primary',\n        appearance: 'light',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'light',\n        className: 'bg-secondary dark:bg-secondary/50 text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'light',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-800))] bg-[var(--color-success-soft,var(--color-green-100))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'light',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] bg-[var(--color-warning-soft,var(--color-yellow-100))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'light',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] bg-[var(--color-info-soft,var(--color-violet-100))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'light',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Outline */\n      {\n        variant: 'primary',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] border-[var(--color-primary-soft,var(--color-blue-100))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:border-[var(--color-primary-soft,var(--color-blue-900))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'success',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-700))] border-[var(--color-success-soft,var(--color-green-200))] bg-[var(--color-success-soft,var(--color-green-50))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:border-[var(--color-success-soft,var(--color-green-900))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] border-[var(--color-warning-soft,var(--color-yellow-200))] bg-[var(--color-warning-soft,var(--color-yellow-50))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:border-[var(--color-warning-soft,var(--color-yellow-900))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] border-[var(--color-info-soft,var(--color-violet-100))] bg-[var(--color-info-soft,var(--color-violet-50))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:border-[var(--color-info-soft,var(--color-violet-900))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] border-[var(--color-destructive-soft,var(--color-red-100))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:border-[var(--color-destructive-soft,var(--color-red-900))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Ghost */\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'ghost',\n        className: 'text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'ghost',\n        className: 'text-[var(--color-success-accent,var(--color-green-500))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'ghost',\n        className: 'text-[var(--color-warning-accent,var(--color-yellow-500))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'ghost',\n        className: 'text-[var(--color-info-accent,var(--color-violet-500))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'text-destructive',\n      },\n\n      { size: 'lg', appearance: 'ghost', className: 'px-0' },\n      { size: 'md', appearance: 'ghost', className: 'px-0' },\n      { size: 'sm', appearance: 'ghost', className: 'px-0' },\n      { size: 'xs', appearance: 'ghost', className: 'px-0' },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      appearance: 'default',\n      size: 'md',\n    },\n  },\n);\n\nconst badgeButtonVariants = cva(\n  'cursor-pointer transition-all inline-flex items-center justify-center leading-none size-3.5 [&>svg]:opacity-100! [&>svg]:size-3.5! p-0 rounded-md -me-0.5 opacity-60 hover:opacity-100',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  size,\n  appearance,\n  shape,\n  asChild = false,\n  disabled,\n  ...props\n}: React.ComponentProps<'span'> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'span';\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant, size, appearance, shape, disabled }), className)}\n      {...props}\n    />\n  );\n}\n\nfunction BadgeButton({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> & VariantProps<typeof badgeButtonVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'span';\n  return (\n    <Comp\n      data-slot=\"badge-button\"\n      className={cn(badgeButtonVariants({ variant, className }))}\n      role=\"button\"\n      {...props}\n    />\n  );\n}\n\nfunction BadgeDot({ className, ...props }: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"badge-dot\"\n      className={cn('size-1.5 rounded-full bg-[currentColor] opacity-75', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, BadgeButton, BadgeDot, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/button.tsx",
      "content": "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown, LucideIcon } from 'lucide-react';\nimport { Slot as SlotPrimitive } from 'radix-ui';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'cursor-pointer group whitespace-nowrap focus-visible:outline-hidden inline-flex items-center justify-center has-data-[arrow=true]:justify-between whitespace-nowrap text-sm font-medium ring-offset-background transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-60 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground hover:bg-primary/90 data-[state=open]:bg-primary/90',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black hover:bg-zinc-950/90 dark:hover:bg-zinc-300/90 data-[state=open]:bg-zinc-950/90 dark:data-[state=open]:bg-zinc-300/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90 data-[state=open]:bg-destructive/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/90 data-[state=open]:bg-secondary/90',\n        outline: 'bg-background text-accent-foreground border border-input hover:bg-accent data-[state=open]:bg-accent',\n        dashed:\n          'text-accent-foreground border border-input border-dashed bg-background hover:bg-accent hover:text-accent-foreground data-[state=open]:text-accent-foreground',\n        ghost:\n          'text-accent-foreground hover:bg-accent hover:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        dim: 'text-muted-foreground hover:text-foreground data-[state=open]:text-foreground',\n        foreground: '',\n        inverse: '',\n      },\n      appearance: {\n        default: '',\n        ghost: '',\n      },\n      underline: {\n        solid: '',\n        dashed: '',\n      },\n      underlined: {\n        solid: '',\n        dashed: '',\n      },\n      size: {\n        lg: 'h-10 px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-9 px-3 gap-1.5 text-sm [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-8 px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n        xs: 'h-7 px-2 gap-1 text-xs [&_svg:not([class*=size-])]:size-3.5',\n        icon: 'size-9 [&_svg:not([class*=size-])]:size-4 shrink-0',\n      },\n      autoHeight: {\n        true: '',\n        false: '',\n      },\n      radius: {\n        md: 'rounded-md',\n        full: 'rounded-full',\n      },\n      mode: {\n        default: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        icon: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 shrink-0',\n        link: 'text-primary h-auto p-0 bg-transparent rounded-none hover:bg-transparent data-[state=open]:bg-transparent',\n        input: `\n            justify-start font-normal hover:bg-background [&_svg]:transition-colors [&_svg]:hover:text-foreground data-[state=open]:bg-background \n            focus-visible:border-ring focus-visible:outline-hidden focus-visible:ring-[3px] focus-visible:ring-ring/30 \n            [[data-state=open]>&]:border-ring [[data-state=open]>&]:outline-hidden [[data-state=open]>&]:ring-[3px] \n            [[data-state=open]>&]:ring-ring/30 \n            aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n            in-data-[invalid=true]:border-destructive/60 in-data-[invalid=true]:ring-destructive/10  dark:in-data-[invalid=true]:border-destructive dark:in-data-[invalid=true]:ring-destructive/20\n          `,\n      },\n      placeholder: {\n        true: 'text-muted-foreground',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      // Icons opacity for default mode\n      {\n        variant: 'ghost',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Icons opacity for default mode\n      {\n        variant: 'outline',\n        mode: 'input',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Auto height\n      {\n        size: 'xs',\n        autoHeight: true,\n        className: 'h-auto min-h-7',\n      },\n      {\n        size: 'md',\n        autoHeight: true,\n        className: 'h-auto min-h-9',\n      },\n      {\n        size: 'sm',\n        autoHeight: true,\n        className: 'h-auto min-h-8',\n      },\n      {\n        size: 'lg',\n        autoHeight: true,\n        className: 'h-auto min-h-10',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Link\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      // Ghost\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'bg-transparent text-primary/90 hover:bg-primary/5 data-[state=open]:bg-primary/5',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'bg-transparent text-destructive/90 hover:bg-destructive/5 data-[state=open]:bg-destructive/5',\n      },\n      {\n        variant: 'ghost',\n        mode: 'icon',\n        className: 'text-muted-foreground',\n      },\n\n      // Size\n      {\n        size: 'xs',\n        mode: 'icon',\n        className: 'w-7 h-7 p-0 [[&_svg:not([class*=size-])]:size-3.5',\n      },\n      {\n        size: 'sm',\n        mode: 'icon',\n        className: 'w-8 h-8 p-0 [[&_svg:not([class*=size-])]:size-3.5',\n      },\n      {\n        size: 'md',\n        mode: 'icon',\n        className: 'w-9 h-9 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'icon',\n        className: 'w-9 h-9 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'lg',\n        mode: 'icon',\n        className: 'w-10 h-10 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n\n      // Input mode\n      {\n        mode: 'input',\n        placeholder: true,\n        variant: 'outline',\n        className: 'font-normal text-muted-foreground',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'sm',\n        className: 'gap-1.25',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'md',\n        className: 'gap-1.5',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'lg',\n        className: 'gap-1.5',\n      },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      mode: 'default',\n      size: 'md',\n      radius: 'md',\n      appearance: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  selected,\n  variant,\n  radius,\n  appearance,\n  mode,\n  size,\n  autoHeight,\n  underlined,\n  underline,\n  asChild = false,\n  placeholder = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    selected?: boolean;\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'button';\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          radius,\n          appearance,\n          mode,\n          autoHeight,\n          placeholder,\n          underlined,\n          underline,\n          className,\n        }),\n        asChild && props.disabled && 'pointer-events-none opacity-50',\n      )}\n      {...(selected && { 'data-state': 'open' })}\n      {...props}\n    />\n  );\n}\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon; // Allows passing any Lucide icon\n}\n\nfunction ButtonArrow({ icon: Icon = ChevronDown, className, ...props }: ButtonArrowProps) {\n  return <Icon data-slot=\"button-arrow\" className={cn('ms-auto -me-1', className)} {...props} />;\n}\n\nexport { Button, ButtonArrow, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/data-grid.tsx",
      "content": "'use client';\n\nimport { createContext, ReactNode, useContext } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { ColumnFiltersState, RowData, SortingState, Table } from '@tanstack/react-table';\n\ndeclare module '@tanstack/react-table' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface ColumnMeta<TData extends RowData, TValue> {\n    headerTitle?: string;\n    headerClassName?: string;\n    cellClassName?: string;\n    skeleton?: ReactNode;\n    expandedContent?: (row: TData) => ReactNode;\n  }\n}\n\nexport type DataGridApiFetchParams = {\n  pageIndex: number;\n  pageSize: number;\n  sorting?: SortingState;\n  filters?: ColumnFiltersState;\n  searchQuery?: string;\n};\n\nexport type DataGridApiResponse<T> = {\n  data: T[];\n  empty: boolean;\n  pagination: {\n    total: number;\n    page: number;\n  };\n};\n\nexport interface DataGridContextProps<TData extends object> {\n  props: DataGridProps<TData>;\n  table: Table<TData>;\n  recordCount: number;\n  isLoading: boolean;\n}\n\nexport type DataGridRequestParams = {\n  pageIndex: number;\n  pageSize: number;\n  sorting?: SortingState;\n  columnFilters?: ColumnFiltersState;\n};\n\nexport interface DataGridProps<TData extends object> {\n  className?: string;\n  table?: Table<TData>;\n  recordCount: number;\n  children?: ReactNode;\n  onRowClick?: (row: TData) => void;\n  isLoading?: boolean;\n  loadingMode?: 'skeleton' | 'spinner';\n  loadingMessage?: ReactNode | string;\n  emptyMessage?: ReactNode | string;\n  tableLayout?: {\n    dense?: boolean;\n    cellBorder?: boolean;\n    rowBorder?: boolean;\n    rowRounded?: boolean;\n    stripped?: boolean;\n    headerBackground?: boolean;\n    headerBorder?: boolean;\n    headerSticky?: boolean;\n    width?: 'auto' | 'fixed';\n    columnsVisibility?: boolean;\n    columnsResizable?: boolean;\n    columnsPinnable?: boolean;\n    columnsMovable?: boolean;\n    columnsDraggable?: boolean;\n    rowsDraggable?: boolean;\n  };\n  tableClassNames?: {\n    base?: string;\n    header?: string;\n    headerRow?: string;\n    headerSticky?: string;\n    body?: string;\n    bodyRow?: string;\n    footer?: string;\n    edgeCell?: string;\n  };\n}\n\nconst DataGridContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  DataGridContextProps<any> | undefined\n>(undefined);\n\nfunction useDataGrid() {\n  const context = useContext(DataGridContext);\n  if (!context) {\n    throw new Error('useDataGrid must be used within a DataGridProvider');\n  }\n  return context;\n}\n\nfunction DataGridProvider<TData extends object>({\n  children,\n  table,\n  ...props\n}: DataGridProps<TData> & { table: Table<TData> }) {\n  return (\n    <DataGridContext.Provider\n      value={{\n        props,\n        table,\n        recordCount: props.recordCount,\n        isLoading: props.isLoading || false,\n      }}\n    >\n      {children}\n    </DataGridContext.Provider>\n  );\n}\n\nfunction DataGrid<TData extends object>({ children, table, ...props }: DataGridProps<TData>) {\n  const defaultProps: Partial<DataGridProps<TData>> = {\n    loadingMode: 'skeleton',\n    tableLayout: {\n      dense: false,\n      cellBorder: false,\n      rowBorder: true,\n      rowRounded: false,\n      stripped: false,\n      headerSticky: false,\n      headerBackground: true,\n      headerBorder: true,\n      width: 'fixed',\n      columnsVisibility: false,\n      columnsResizable: false,\n      columnsPinnable: false,\n      columnsMovable: false,\n      columnsDraggable: false,\n      rowsDraggable: false,\n    },\n    tableClassNames: {\n      base: '',\n      header: '',\n      headerRow: '',\n      headerSticky: 'sticky top-0 z-10 bg-background/90 backdrop-blur-xs',\n      body: '',\n      bodyRow: '',\n      footer: '',\n      edgeCell: '',\n    },\n  };\n\n  const mergedProps: DataGridProps<TData> = {\n    ...defaultProps,\n    ...props,\n    tableLayout: {\n      ...defaultProps.tableLayout,\n      ...(props.tableLayout || {}),\n    },\n    tableClassNames: {\n      ...defaultProps.tableClassNames,\n      ...(props.tableClassNames || {}),\n    },\n  };\n\n  // Ensure table is provided\n  if (!table) {\n    throw new Error('DataGrid requires a \"table\" prop');\n  }\n\n  return (\n    <DataGridProvider table={table} {...mergedProps}>\n      {children}\n    </DataGridProvider>\n  );\n}\n\nfunction DataGridContainer({\n  children,\n  className,\n  border = true,\n}: {\n  children: ReactNode;\n  className?: string;\n  border?: boolean;\n}) {\n  return (\n    <div data-slot=\"data-grid\" className={cn('grid w-full', border && 'border border-border rounded-lg', className)}>\n      {children}\n    </div>\n  );\n}\n\nexport { useDataGrid, DataGridProvider, DataGrid, DataGridContainer };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/data-grid-column-header.tsx",
      "content": "import { HTMLAttributes, ReactNode } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Button } from '@/registry/default/ui/button';\nimport { useDataGrid } from '@/registry/default/ui/data-grid';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '@/registry/default/ui/dropdown-menu';\nimport { Column } from '@tanstack/react-table';\nimport {\n  ArrowDown,\n  ArrowLeft,\n  ArrowLeftToLine,\n  ArrowRight,\n  ArrowRightToLine,\n  ArrowUp,\n  Check,\n  ChevronsUpDown,\n  PinOff,\n  Settings2,\n} from 'lucide-react';\n\ninterface DataGridColumnHeaderProps<TData, TValue> extends HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>;\n  title?: string;\n  icon?: ReactNode;\n  pinnable?: boolean;\n  filter?: ReactNode;\n  visibility?: boolean;\n}\n\nfunction DataGridColumnHeader<TData, TValue>({\n  column,\n  title = '',\n  icon,\n  className,\n  filter,\n  visibility = false,\n}: DataGridColumnHeaderProps<TData, TValue>) {\n  const { isLoading, table, props, recordCount } = useDataGrid();\n\n  const moveColumn = (direction: 'left' | 'right') => {\n    const currentOrder = [...table.getState().columnOrder]; // Get current column order\n    const currentIndex = currentOrder.indexOf(column.id); // Get current index of the column\n\n    if (direction === 'left' && currentIndex > 0) {\n      // Move column left\n      const newOrder = [...currentOrder];\n      const [movedColumn] = newOrder.splice(currentIndex, 1);\n      newOrder.splice(currentIndex - 1, 0, movedColumn);\n      table.setColumnOrder(newOrder); // Update column order\n    }\n\n    if (direction === 'right' && currentIndex < currentOrder.length - 1) {\n      // Move column right\n      const newOrder = [...currentOrder];\n      const [movedColumn] = newOrder.splice(currentIndex, 1);\n      newOrder.splice(currentIndex + 1, 0, movedColumn);\n      table.setColumnOrder(newOrder); // Update column order\n    }\n  };\n\n  const canMove = (direction: 'left' | 'right'): boolean => {\n    const currentOrder = table.getState().columnOrder;\n    const currentIndex = currentOrder.indexOf(column.id);\n    if (direction === 'left') {\n      return currentIndex > 0;\n    } else {\n      return currentIndex < currentOrder.length - 1;\n    }\n  };\n\n  const headerLabel = () => {\n    return (\n      <div\n        className={cn(\n          'text-secondary-foreground/80 font-normal inline-flex h-full items-center gap-1.5 text-[0.8125rem] leading-[calc(1.125/0.8125)] [&_svg]:size-3.5 [&_svg]:opacity-60',\n          className,\n        )}\n      >\n        {icon && icon}\n        {title}\n      </div>\n    );\n  };\n\n  const headerButton = () => {\n    return (\n      <Button\n        variant=\"ghost\"\n        className={cn(\n          'text-secondary-foreground/80 rounded-md font-normal -ms-2 px-2 h-7 hover:bg-secondary data-[state=open]:bg-secondary hover:text-foreground data-[state=open]:text-foreground',\n          className,\n        )}\n        disabled={isLoading || recordCount === 0}\n        onClick={() => {\n          const isSorted = column.getIsSorted();\n          if (isSorted === 'asc') {\n            column.toggleSorting(true);\n          } else if (isSorted === 'desc') {\n            column.clearSorting();\n          } else {\n            column.toggleSorting(false);\n          }\n        }}\n      >\n        {icon && icon}\n        {title}\n\n        {column.getCanSort() &&\n          (column.getIsSorted() === 'desc' ? (\n            <ArrowDown className=\"size-[0.7rem]! mt-px\" />\n          ) : column.getIsSorted() === 'asc' ? (\n            <ArrowUp className=\"size-[0.7rem]! mt-px\" />\n          ) : (\n            <ChevronsUpDown className=\"size-[0.7rem]! mt-px\" />\n          ))}\n      </Button>\n    );\n  };\n\n  const headerPin = () => {\n    return (\n      <Button\n        mode=\"icon\"\n        size=\"sm\"\n        variant=\"ghost\"\n        className=\"-me-1 size-7 rounded-md\"\n        onClick={() => column.pin(false)}\n        aria-label={`Unpin ${title} column`}\n        title={`Unpin ${title} column`}\n      >\n        <PinOff className=\"size-3.5! opacity-50!\" aria-hidden=\"true\" />\n      </Button>\n    );\n  };\n\n  const headerControls = () => {\n    return (\n      <div className=\"flex items-center h-full gap-1.5 justify-between\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>{headerButton()}</DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-40\" align=\"start\">\n            {filter && <DropdownMenuLabel>{filter}</DropdownMenuLabel>}\n\n            {filter && (column.getCanSort() || column.getCanPin() || visibility) && <DropdownMenuSeparator />}\n\n            {column.getCanSort() && (\n              <>\n                <DropdownMenuItem\n                  onClick={() => {\n                    if (column.getIsSorted() === 'asc') {\n                      column.clearSorting();\n                    } else {\n                      column.toggleSorting(false);\n                    }\n                  }}\n                  disabled={!column.getCanSort()}\n                >\n                  <ArrowUp className=\"size-3.5!\" />\n                  <span className=\"grow\">Asc</span>\n                  {column.getIsSorted() === 'asc' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  onClick={() => {\n                    if (column.getIsSorted() === 'desc') {\n                      column.clearSorting();\n                    } else {\n                      column.toggleSorting(true);\n                    }\n                  }}\n                  disabled={!column.getCanSort()}\n                >\n                  <ArrowDown className=\"size-3.5!\" />\n                  <span className=\"grow\">Desc</span>\n                  {column.getIsSorted() === 'desc' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n              </>\n            )}\n\n            {(filter || column.getCanSort()) && (column.getCanSort() || column.getCanPin() || visibility) && (\n              <DropdownMenuSeparator />\n            )}\n\n            {props.tableLayout?.columnsPinnable && column.getCanPin() && (\n              <>\n                <DropdownMenuItem onClick={() => column.pin(column.getIsPinned() === 'left' ? false : 'left')}>\n                  <ArrowLeftToLine className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span className=\"grow\">Pin to left</span>\n                  {column.getIsPinned() === 'left' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => column.pin(column.getIsPinned() === 'right' ? false : 'right')}>\n                  <ArrowRightToLine className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span className=\"grow\">Pin to right</span>\n                  {column.getIsPinned() === 'right' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n              </>\n            )}\n\n            {props.tableLayout?.columnsMovable && (\n              <>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  onClick={() => moveColumn('left')}\n                  disabled={!canMove('left') || column.getIsPinned() !== false}\n                >\n                  <ArrowLeft className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span>Move to Left</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  onClick={() => moveColumn('right')}\n                  disabled={!canMove('right') || column.getIsPinned() !== false}\n                >\n                  <ArrowRight className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span>Move to Right</span>\n                </DropdownMenuItem>\n              </>\n            )}\n\n            {props.tableLayout?.columnsVisibility &&\n              visibility &&\n              (column.getCanSort() || column.getCanPin() || filter) && <DropdownMenuSeparator />}\n\n            {props.tableLayout?.columnsVisibility && visibility && (\n              <DropdownMenuSub>\n                <DropdownMenuSubTrigger>\n                  <Settings2 className=\"size-3.5!\" />\n                  <span>Columns</span>\n                </DropdownMenuSubTrigger>\n                <DropdownMenuPortal>\n                  <DropdownMenuSubContent>\n                    {table\n                      .getAllColumns()\n                      .filter((col) => typeof col.accessorFn !== 'undefined' && col.getCanHide())\n                      .map((col) => {\n                        return (\n                          <DropdownMenuCheckboxItem\n                            key={col.id}\n                            checked={col.getIsVisible()}\n                            onSelect={(event) => event.preventDefault()}\n                            onCheckedChange={(value) => col.toggleVisibility(!!value)}\n                            className=\"capitalize\"\n                          >\n                            {col.columnDef.meta?.headerTitle || col.id}\n                          </DropdownMenuCheckboxItem>\n                        );\n                      })}\n                  </DropdownMenuSubContent>\n                </DropdownMenuPortal>\n              </DropdownMenuSub>\n            )}\n          </DropdownMenuContent>\n        </DropdownMenu>\n        {props.tableLayout?.columnsPinnable && column.getCanPin() && column.getIsPinned() && headerPin()}\n      </div>\n    );\n  };\n\n  if (\n    props.tableLayout?.columnsMovable ||\n    (props.tableLayout?.columnsVisibility && visibility) ||\n    (props.tableLayout?.columnsPinnable && column.getCanPin()) ||\n    filter\n  ) {\n    return headerControls();\n  }\n\n  if (column.getCanSort() || (props.tableLayout?.columnsResizable && column.getCanResize())) {\n    return <div className=\"flex items-center h-full\">{headerButton()}</div>;\n  }\n\n  return headerLabel();\n}\n\nexport { DataGridColumnHeader, type DataGridColumnHeaderProps };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/data-grid-pagination.tsx",
      "content": "import { ReactNode } from 'react';\nimport { Button } from '@/registry/default/ui/button';\nimport { useDataGrid } from '@/registry/default/ui/data-grid';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/registry/default/ui/select';\nimport { Skeleton } from '@/registry/default/ui/skeleton';\nimport { ChevronLeftIcon, ChevronRightIcon } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface DataGridPaginationProps {\n  sizes?: number[];\n  sizesInfo?: string;\n  sizesLabel?: string;\n  sizesDescription?: string;\n  sizesSkeleton?: ReactNode;\n  more?: boolean;\n  moreLimit?: number;\n  info?: string;\n  infoSkeleton?: ReactNode;\n  className?: string;\n  rowsPerPageLabel?: string;\n  previousPageLabel?: string;\n  nextPageLabel?: string;\n  ellipsisText?: string;\n}\n\nfunction DataGridPagination(props: DataGridPaginationProps) {\n  const { table, recordCount, isLoading } = useDataGrid();\n\n  const defaultProps: Partial<DataGridPaginationProps> = {\n    sizes: [5, 10, 25, 50, 100],\n    sizesLabel: 'Show',\n    sizesDescription: 'per page',\n    sizesSkeleton: <Skeleton className=\"h-8 w-44\" />,\n    moreLimit: 5,\n    more: false,\n    info: '{from} - {to} of {count}',\n    infoSkeleton: <Skeleton className=\"h-8 w-60\" />,\n    rowsPerPageLabel: 'Rows per page',\n    previousPageLabel: 'Go to previous page',\n    nextPageLabel: 'Go to next page',\n    ellipsisText: '...',\n  };\n\n  const mergedProps: DataGridPaginationProps = { ...defaultProps, ...props };\n\n  const btnBaseClasses = 'size-7 p-0 text-sm';\n  const btnArrowClasses = btnBaseClasses + ' rtl:transform rtl:rotate-180';\n  const pageIndex = table.getState().pagination.pageIndex;\n  const pageSize = table.getState().pagination.pageSize;\n  const from = pageIndex * pageSize + 1;\n  const to = Math.min((pageIndex + 1) * pageSize, recordCount);\n  const pageCount = table.getPageCount();\n\n  // Replace placeholders in paginationInfo\n  const paginationInfo = mergedProps?.info\n    ? mergedProps.info\n        .replace('{from}', from.toString())\n        .replace('{to}', to.toString())\n        .replace('{count}', recordCount.toString())\n    : `${from} - ${to} of ${recordCount}`;\n\n  // Pagination limit logic\n  const paginationMoreLimit = mergedProps?.moreLimit || 5;\n\n  // Determine the start and end of the pagination group\n  const currentGroupStart = Math.floor(pageIndex / paginationMoreLimit) * paginationMoreLimit;\n  const currentGroupEnd = Math.min(currentGroupStart + paginationMoreLimit, pageCount);\n\n  // Render page buttons based on the current group\n  const renderPageButtons = () => {\n    const buttons = [];\n    for (let i = currentGroupStart; i < currentGroupEnd; i++) {\n      buttons.push(\n        <Button\n          key={i}\n          size=\"sm\"\n          mode=\"icon\"\n          variant=\"ghost\"\n          className={cn(btnBaseClasses, 'text-muted-foreground', {\n            'bg-accent text-accent-foreground': pageIndex === i,\n          })}\n          onClick={() => {\n            if (pageIndex !== i) {\n              table.setPageIndex(i);\n            }\n          }}\n        >\n          {i + 1}\n        </Button>,\n      );\n    }\n    return buttons;\n  };\n\n  // Render a \"previous\" ellipsis button if there are previous pages to show\n  const renderEllipsisPrevButton = () => {\n    if (currentGroupStart > 0) {\n      return (\n        <Button\n          size=\"sm\"\n          mode=\"icon\"\n          className={btnBaseClasses}\n          variant=\"ghost\"\n          onClick={() => table.setPageIndex(currentGroupStart - 1)}\n        >\n          {mergedProps.ellipsisText}\n        </Button>\n      );\n    }\n    return null;\n  };\n\n  // Render a \"next\" ellipsis button if there are more pages to show after the current group\n  const renderEllipsisNextButton = () => {\n    if (currentGroupEnd < pageCount) {\n      return (\n        <Button\n          className={btnBaseClasses}\n          variant=\"ghost\"\n          size=\"sm\"\n          mode=\"icon\"\n          onClick={() => table.setPageIndex(currentGroupEnd)}\n        >\n          {mergedProps.ellipsisText}\n        </Button>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div\n      data-slot=\"data-grid-pagination\"\n      className={cn(\n        'flex flex-wrap flex-col sm:flex-row justify-between items-center gap-2.5 py-2.5 sm:py-0 grow',\n        mergedProps?.className,\n      )}\n    >\n      <div className=\"flex flex-wrap items-center space-x-2.5 pb-2.5 sm:pb-0 order-2 sm:order-1\">\n        {isLoading ? (\n          mergedProps?.sizesSkeleton\n        ) : (\n          <>\n            <div className=\"text-sm text-muted-foreground\">{mergedProps.rowsPerPageLabel}</div>\n            <Select\n              value={`${pageSize}`}\n              indicatorPosition=\"right\"\n              onValueChange={(value) => {\n                const newPageSize = Number(value);\n                table.setPageSize(newPageSize);\n              }}\n            >\n              <SelectTrigger className=\"w-fit\" size=\"sm\">\n                <SelectValue placeholder={`${pageSize}`} />\n              </SelectTrigger>\n              <SelectContent side=\"top\" className=\"min-w-[50px]\">\n                {mergedProps?.sizes?.map((size: number) => (\n                  <SelectItem key={size} value={`${size}`}>\n                    {size}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </>\n        )}\n      </div>\n      <div className=\"flex flex-col sm:flex-row justify-center sm:justify-end items-center gap-2.5 pt-2.5 sm:pt-0 order-1 sm:order-2\">\n        {isLoading ? (\n          mergedProps?.infoSkeleton\n        ) : (\n          <>\n            <div className=\"text-sm text-muted-foreground text-nowrap order-2 sm:order-1\">{paginationInfo}</div>\n            {pageCount > 1 && (\n              <div className=\"flex items-center space-x-1 order-1 sm:order-2\">\n                <Button\n                  size=\"sm\"\n                  mode=\"icon\"\n                  variant=\"ghost\"\n                  className={btnArrowClasses}\n                  onClick={() => table.previousPage()}\n                  disabled={!table.getCanPreviousPage()}\n                >\n                  <span className=\"sr-only\">{mergedProps.previousPageLabel}</span>\n                  <ChevronLeftIcon className=\"size-4\" />\n                </Button>\n\n                {renderEllipsisPrevButton()}\n\n                {renderPageButtons()}\n\n                {renderEllipsisNextButton()}\n\n                <Button\n                  size=\"sm\"\n                  mode=\"icon\"\n                  variant=\"ghost\"\n                  className={btnArrowClasses}\n                  onClick={() => table.nextPage()}\n                  disabled={!table.getCanNextPage()}\n                >\n                  <span className=\"sr-only\">{mergedProps.nextPageLabel}</span>\n                  <ChevronRightIcon className=\"size-4\" />\n                </Button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport { DataGridPagination, type DataGridPaginationProps };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/data-grid-table.tsx",
      "content": "import * as React from 'react';\nimport { CSSProperties, Fragment, ReactNode } from 'react';\nimport { Checkbox } from '@/registry/default/ui/checkbox';\nimport { useDataGrid } from '@/registry/default/ui/data-grid';\nimport { Cell, Column, flexRender, Header, HeaderGroup, Row } from '@tanstack/react-table';\nimport { cva } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nconst headerCellSpacingVariants = cva('', {\n  variants: {\n    size: {\n      dense: 'px-2.5 h-9',\n      default: 'px-4',\n    },\n  },\n  defaultVariants: {\n    size: 'default',\n  },\n});\n\nconst bodyCellSpacingVariants = cva('', {\n  variants: {\n    size: {\n      dense: 'px-2.5 py-2',\n      default: 'px-4 py-3',\n    },\n  },\n  defaultVariants: {\n    size: 'default',\n  },\n});\n\nfunction getPinningStyles<TData>(column: Column<TData>): CSSProperties {\n  const isPinned = column.getIsPinned();\n\n  return {\n    left: isPinned === 'left' ? `${column.getStart('left')}px` : undefined,\n    right: isPinned === 'right' ? `${column.getAfter('right')}px` : undefined,\n    position: isPinned ? 'sticky' : 'relative',\n    width: column.getSize(),\n    zIndex: isPinned ? 1 : 0,\n  };\n}\n\nfunction DataGridTableBase({ children }: { children: ReactNode }) {\n  const { props } = useDataGrid();\n\n  return (\n    <table\n      data-slot=\"data-grid-table\"\n      className={cn(\n        'w-full align-middle caption-bottom text-left rtl:text-right text-foreground font-normal text-sm',\n        !props.tableLayout?.columnsDraggable && 'border-separate border-spacing-0',\n        props.tableLayout?.width === 'fixed' ? 'table-fixed' : 'table-auto',\n        props.tableClassNames?.base,\n      )}\n    >\n      {children}\n    </table>\n  );\n}\n\nfunction DataGridTableHead({ children }: { children: ReactNode }) {\n  const { props } = useDataGrid();\n\n  return (\n    <thead\n      className={cn(\n        props.tableClassNames?.header,\n        props.tableLayout?.headerSticky && props.tableClassNames?.headerSticky,\n      )}\n    >\n      {children}\n    </thead>\n  );\n}\n\nfunction DataGridTableHeadRow<TData>({\n  children,\n  headerGroup,\n}: {\n  children: ReactNode;\n  headerGroup: HeaderGroup<TData>;\n}) {\n  const { props } = useDataGrid();\n\n  return (\n    <tr\n      key={headerGroup.id}\n      className={cn(\n        'bg-muted/40',\n        props.tableLayout?.headerBorder && '[&>th]:border-b',\n        props.tableLayout?.cellBorder && '[&_>:last-child]:border-e-0',\n        props.tableLayout?.stripped && 'bg-transparent',\n        props.tableLayout?.headerBackground === false && 'bg-transparent',\n        props.tableClassNames?.headerRow,\n      )}\n    >\n      {children}\n    </tr>\n  );\n}\n\nfunction DataGridTableHeadRowCell<TData>({\n  children,\n  header,\n  dndRef,\n  dndStyle,\n}: {\n  children: ReactNode;\n  header: Header<TData, unknown>;\n  dndRef?: React.Ref<HTMLTableCellElement>;\n  dndStyle?: CSSProperties;\n}) {\n  const { props } = useDataGrid();\n\n  const { column } = header;\n  const isPinned = column.getIsPinned();\n  const isLastLeftPinned = isPinned === 'left' && column.getIsLastColumn('left');\n  const isFirstRightPinned = isPinned === 'right' && column.getIsFirstColumn('right');\n  const headerCellSpacing = headerCellSpacingVariants({\n    size: props.tableLayout?.dense ? 'dense' : 'default',\n  });\n\n  return (\n    <th\n      key={header.id}\n      ref={dndRef}\n      style={{\n        ...(props.tableLayout?.width === 'fixed' && {\n          width: `${header.getSize()}px`,\n        }),\n        ...(props.tableLayout?.columnsPinnable && column.getCanPin() && getPinningStyles(column)),\n        ...(dndStyle ? dndStyle : null),\n      }}\n      data-pinned={isPinned || undefined}\n      data-last-col={isLastLeftPinned ? 'left' : isFirstRightPinned ? 'right' : undefined}\n      className={cn(\n        'relative h-10 text-left rtl:text-right align-middle font-normal text-secondary-foreground/80 [&:has([role=checkbox])]:pe-0',\n        headerCellSpacing,\n        props.tableLayout?.cellBorder && 'border-e',\n        props.tableLayout?.columnsResizable && column.getCanResize() && 'truncate',\n        props.tableLayout?.columnsPinnable &&\n          column.getCanPin() &&\n          '[&:not([data-pinned]):has(+[data-pinned])_div.cursor-col-resize:last-child]:opacity-0 [&[data-last-col=left]_div.cursor-col-resize:last-child]:opacity-0 [&[data-pinned=left][data-last-col=left]]:border-e! [&[data-pinned=right]:last-child_div.cursor-col-resize:last-child]:opacity-0 [&[data-pinned=right][data-last-col=right]]:border-s! [&[data-pinned][data-last-col]]:border-border data-pinned:bg-muted/90 data-pinned:backdrop-blur-xs',\n        header.column.columnDef.meta?.headerClassName,\n        column.getIndex() === 0 || column.getIndex() === header.headerGroup.headers.length - 1\n          ? props.tableClassNames?.edgeCell\n          : '',\n      )}\n    >\n      {children}\n    </th>\n  );\n}\n\nfunction DataGridTableHeadRowCellResize<TData>({ header }: { header: Header<TData, unknown> }) {\n  const { column } = header;\n\n  return (\n    <div\n      {...{\n        onDoubleClick: () => column.resetSize(),\n        onMouseDown: header.getResizeHandler(),\n        onTouchStart: header.getResizeHandler(),\n        className:\n          'absolute top-0 h-full w-4 cursor-col-resize user-select-none touch-none -end-2 z-10 flex justify-center before:absolute before:w-px before:inset-y-0 before:bg-border before:-translate-x-px',\n      }}\n    />\n  );\n}\n\nfunction DataGridTableRowSpacer() {\n  return <tbody aria-hidden=\"true\" className=\"h-2\"></tbody>;\n}\n\nfunction DataGridTableBody({ children }: { children: ReactNode }) {\n  const { props } = useDataGrid();\n\n  return (\n    <tbody\n      className={cn(\n        '[&_tr:last-child]:border-0',\n        props.tableLayout?.rowRounded && '[&_td:first-child]:rounded-s-lg [&_td:last-child]:rounded-e-lg',\n        props.tableClassNames?.body,\n      )}\n    >\n      {children}\n    </tbody>\n  );\n}\n\nfunction DataGridTableBodyRowSkeleton({ children }: { children: ReactNode }) {\n  const { table, props } = useDataGrid();\n\n  return (\n    <tr\n      className={cn(\n        'hover:bg-muted/40 data-[state=selected]:bg-muted/50',\n        props.onRowClick && 'cursor-pointer',\n        !props.tableLayout?.stripped &&\n          props.tableLayout?.rowBorder &&\n          'border-b border-border [&:not(:last-child)>td]:border-b',\n        props.tableLayout?.cellBorder && '[&_>:last-child]:border-e-0',\n        props.tableLayout?.stripped && 'odd:bg-muted/90 hover:bg-transparent odd:hover:bg-muted',\n        table.options.enableRowSelection && '[&_>:first-child]:relative',\n        props.tableClassNames?.bodyRow,\n      )}\n    >\n      {children}\n    </tr>\n  );\n}\n\nfunction DataGridTableBodyRowSkeletonCell<TData>({ children, column }: { children: ReactNode; column: Column<TData> }) {\n  const { props, table } = useDataGrid();\n  const bodyCellSpacing = bodyCellSpacingVariants({\n    size: props.tableLayout?.dense ? 'dense' : 'default',\n  });\n\n  return (\n    <td\n      className={cn(\n        'align-middle',\n        bodyCellSpacing,\n        props.tableLayout?.cellBorder && 'border-e',\n        props.tableLayout?.columnsResizable && column.getCanResize() && 'truncate',\n        column.columnDef.meta?.cellClassName,\n        props.tableLayout?.columnsPinnable &&\n          column.getCanPin() &&\n          '[&[data-pinned=left][data-last-col=left]]:border-e! [&[data-pinned=right][data-last-col=right]]:border-s! [&[data-pinned][data-last-col]]:border-border data-pinned:bg-background/90 data-pinned:backdrop-blur-xs\"',\n        column.getIndex() === 0 || column.getIndex() === table.getVisibleFlatColumns().length - 1\n          ? props.tableClassNames?.edgeCell\n          : '',\n      )}\n    >\n      {children}\n    </td>\n  );\n}\n\nfunction DataGridTableBodyRow<TData>({\n  children,\n  row,\n  dndRef,\n  dndStyle,\n}: {\n  children: ReactNode;\n  row: Row<TData>;\n  dndRef?: React.Ref<HTMLTableRowElement>;\n  dndStyle?: CSSProperties;\n}) {\n  const { props, table } = useDataGrid();\n\n  return (\n    <tr\n      ref={dndRef}\n      style={{ ...(dndStyle ? dndStyle : null) }}\n      data-state={table.options.enableRowSelection && row.getIsSelected() ? 'selected' : undefined}\n      onClick={() => props.onRowClick && props.onRowClick(row.original)}\n      className={cn(\n        'hover:bg-muted/40 data-[state=selected]:bg-muted/50',\n        props.onRowClick && 'cursor-pointer',\n        !props.tableLayout?.stripped &&\n          props.tableLayout?.rowBorder &&\n          'border-b border-border [&:not(:last-child)>td]:border-b',\n        props.tableLayout?.cellBorder && '[&_>:last-child]:border-e-0',\n        props.tableLayout?.stripped && 'odd:bg-muted/90 hover:bg-transparent odd:hover:bg-muted',\n        table.options.enableRowSelection && '[&_>:first-child]:relative',\n        props.tableClassNames?.bodyRow,\n      )}\n    >\n      {children}\n    </tr>\n  );\n}\n\nfunction DataGridTableBodyRowExpandded<TData>({ row }: { row: Row<TData> }) {\n  const { props, table } = useDataGrid();\n\n  return (\n    <tr className={cn(props.tableLayout?.rowBorder && '[&:not(:last-child)>td]:border-b')}>\n      <td colSpan={row.getVisibleCells().length}>\n        {table\n          .getAllColumns()\n          .find((column) => column.columnDef.meta?.expandedContent)\n          ?.columnDef.meta?.expandedContent?.(row.original)}\n      </td>\n    </tr>\n  );\n}\n\nfunction DataGridTableBodyRowCell<TData>({\n  children,\n  cell,\n  dndRef,\n  dndStyle,\n}: {\n  children: ReactNode;\n  cell: Cell<TData, unknown>;\n  dndRef?: React.Ref<HTMLTableCellElement>;\n  dndStyle?: CSSProperties;\n}) {\n  const { props } = useDataGrid();\n\n  const { column, row } = cell;\n  const isPinned = column.getIsPinned();\n  const isLastLeftPinned = isPinned === 'left' && column.getIsLastColumn('left');\n  const isFirstRightPinned = isPinned === 'right' && column.getIsFirstColumn('right');\n  const bodyCellSpacing = bodyCellSpacingVariants({\n    size: props.tableLayout?.dense ? 'dense' : 'default',\n  });\n\n  return (\n    <td\n      key={cell.id}\n      ref={dndRef}\n      {...(props.tableLayout?.columnsDraggable && !isPinned ? { cell } : {})}\n      style={{\n        ...(props.tableLayout?.columnsPinnable && column.getCanPin() && getPinningStyles(column)),\n        ...(dndStyle ? dndStyle : null),\n      }}\n      data-pinned={isPinned || undefined}\n      data-last-col={isLastLeftPinned ? 'left' : isFirstRightPinned ? 'right' : undefined}\n      className={cn(\n        'align-middle',\n        bodyCellSpacing,\n        props.tableLayout?.cellBorder && 'border-e',\n        props.tableLayout?.columnsResizable && column.getCanResize() && 'truncate',\n        cell.column.columnDef.meta?.cellClassName,\n        props.tableLayout?.columnsPinnable &&\n          column.getCanPin() &&\n          '[&[data-pinned=left][data-last-col=left]]:border-e! [&[data-pinned=right][data-last-col=right]]:border-s! [&[data-pinned][data-last-col]]:border-border data-pinned:bg-background/90 data-pinned:backdrop-blur-xs\"',\n        column.getIndex() === 0 || column.getIndex() === row.getVisibleCells().length - 1\n          ? props.tableClassNames?.edgeCell\n          : '',\n      )}\n    >\n      {children}\n    </td>\n  );\n}\n\nfunction DataGridTableEmpty() {\n  const { table, props } = useDataGrid();\n  const totalColumns = table.getAllColumns().length;\n\n  return (\n    <tr>\n      <td colSpan={totalColumns} className=\"text-center text-muted-foreground py-6\">\n        {props.emptyMessage || 'No data available'}\n      </td>\n    </tr>\n  );\n}\n\nfunction DataGridTableLoader() {\n  const { props } = useDataGrid();\n\n  return (\n    <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\">\n      <div className=\"text-muted-foreground bg-card  flex items-center gap-2 px-4 py-2 font-medium leading-none text-sm border shadow-xs rounded-md\">\n        <svg\n          className=\"animate-spin -ml-1 h-5 w-5 text-muted-foreground\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n        >\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"3\"></circle>\n          <path\n            className=\"opacity-75\"\n            fill=\"currentColor\"\n            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n          ></path>\n        </svg>\n        {props.loadingMessage || 'Loading...'}\n      </div>\n    </div>\n  );\n}\n\nfunction DataGridTableRowSelect<TData>({ row, size }: { row: Row<TData>; size?: 'sm' | 'md' | 'lg' }) {\n  return (\n    <>\n      <div\n        className={cn('hidden absolute top-0 bottom-0 start-0 w-[2px] bg-primary', row.getIsSelected() && 'block')}\n      ></div>\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        size={size ?? 'sm'}\n        className=\"align-[inherit]\"\n      />\n    </>\n  );\n}\n\nfunction DataGridTableRowSelectAll({ size }: { size?: 'sm' | 'md' | 'lg' }) {\n  const { table, recordCount, isLoading } = useDataGrid();\n\n  return (\n    <Checkbox\n      checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate')}\n      disabled={isLoading || recordCount === 0}\n      onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n      aria-label=\"Select all\"\n      size={size}\n      className=\"align-[inherit]\"\n    />\n  );\n}\n\nfunction DataGridTable<TData>() {\n  const { table, isLoading, props } = useDataGrid();\n  const pagination = table.getState().pagination;\n\n  return (\n    <DataGridTableBase>\n      <DataGridTableHead>\n        {table.getHeaderGroups().map((headerGroup: HeaderGroup<TData>, index) => {\n          return (\n            <DataGridTableHeadRow headerGroup={headerGroup} key={index}>\n              {headerGroup.headers.map((header, index) => {\n                const { column } = header;\n\n                return (\n                  <DataGridTableHeadRowCell header={header} key={index}>\n                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    {props.tableLayout?.columnsResizable && column.getCanResize() && (\n                      <DataGridTableHeadRowCellResize header={header} />\n                    )}\n                  </DataGridTableHeadRowCell>\n                );\n              })}\n            </DataGridTableHeadRow>\n          );\n        })}\n      </DataGridTableHead>\n\n      {(props.tableLayout?.stripped || !props.tableLayout?.rowBorder) && <DataGridTableRowSpacer />}\n\n      <DataGridTableBody>\n        {isLoading && props.loadingMode === 'skeleton' && pagination?.pageSize ? (\n          // Show skeleton loading immediately\n          Array.from({ length: pagination.pageSize }).map((_, rowIndex) => (\n            <DataGridTableBodyRowSkeleton key={rowIndex}>\n              {table.getVisibleFlatColumns().map((column, colIndex) => {\n                return (\n                  <DataGridTableBodyRowSkeletonCell column={column} key={colIndex}>\n                    {column.columnDef.meta?.skeleton}\n                  </DataGridTableBodyRowSkeletonCell>\n                );\n              })}\n            </DataGridTableBodyRowSkeleton>\n          ))\n        ) : isLoading && props.loadingMode === 'spinner' ? (\n          // Show spinner loading immediately\n          <tr>\n            <td colSpan={table.getVisibleFlatColumns().length} className=\"p-8\">\n              <div className=\"flex items-center justify-center\">\n                <svg\n                  className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-muted-foreground\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path\n                    className=\"opacity-75\"\n                    fill=\"currentColor\"\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                  ></path>\n                </svg>\n                {props.loadingMessage || 'Loading...'}\n              </div>\n            </td>\n          </tr>\n        ) : table.getRowModel().rows.length ? (\n          // Show actual data when not loading\n          table.getRowModel().rows.map((row: Row<TData>, index) => {\n            return (\n              <Fragment key={row.id}>\n                <DataGridTableBodyRow row={row} key={index}>\n                  {row.getVisibleCells().map((cell: Cell<TData, unknown>, colIndex) => {\n                    return (\n                      <DataGridTableBodyRowCell cell={cell} key={colIndex}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </DataGridTableBodyRowCell>\n                    );\n                  })}\n                </DataGridTableBodyRow>\n                {row.getIsExpanded() && <DataGridTableBodyRowExpandded row={row} />}\n              </Fragment>\n            );\n          })\n        ) : (\n          <DataGridTableEmpty />\n        )}\n      </DataGridTableBody>\n    </DataGridTableBase>\n  );\n}\n\nexport {\n  DataGridTable,\n  DataGridTableBase,\n  DataGridTableBody,\n  DataGridTableBodyRow,\n  DataGridTableBodyRowCell,\n  DataGridTableBodyRowExpandded,\n  DataGridTableBodyRowSkeleton,\n  DataGridTableBodyRowSkeletonCell,\n  DataGridTableEmpty,\n  DataGridTableHead,\n  DataGridTableHeadRow,\n  DataGridTableHeadRowCell,\n  DataGridTableHeadRowCellResize,\n  DataGridTableLoader,\n  DataGridTableRowSelect,\n  DataGridTableRowSelectAll,\n  DataGridTableRowSpacer,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/filters.tsx",
      "content": "'use client';\n\nimport type React from 'react';\nimport { createContext, useCallback, useContext, useMemo, useState } from 'react';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from '@/registry/default/ui/command';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/registry/default/ui/dropdown-menu';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/registry/default/ui/popover';\nimport { Switch } from '@/registry/default/ui/switch';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/registry/default/ui/tooltip';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { AlertCircle, Check, Plus, X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// i18n Configuration Interface\nexport interface FilterI18nConfig {\n  // UI Labels\n  addFilter: string;\n  searchFields: string;\n  noFieldsFound: string;\n  noResultsFound: string;\n  select: string;\n  true: string;\n  false: string;\n  min: string;\n  max: string;\n  to: string;\n  typeAndPressEnter: string;\n  selected: string;\n  selectedCount: string;\n  percent: string;\n  defaultCurrency: string;\n  defaultColor: string;\n  addFilterTitle: string;\n\n  // Operators\n  operators: {\n    is: string;\n    isNot: string;\n    isAnyOf: string;\n    isNotAnyOf: string;\n    includesAll: string;\n    excludesAll: string;\n    before: string;\n    after: string;\n    between: string;\n    notBetween: string;\n    contains: string;\n    notContains: string;\n    startsWith: string;\n    endsWith: string;\n    isExactly: string;\n    equals: string;\n    notEquals: string;\n    greaterThan: string;\n    lessThan: string;\n    overlaps: string;\n    includes: string;\n    excludes: string;\n    includesAllOf: string;\n    includesAnyOf: string;\n    empty: string;\n    notEmpty: string;\n  };\n\n  // Placeholders\n  placeholders: {\n    enterField: (fieldType: string) => string;\n    selectField: string;\n    searchField: (fieldName: string) => string;\n    enterKey: string;\n    enterValue: string;\n  };\n\n  // Helper functions\n  helpers: {\n    formatOperator: (operator: string) => string;\n  };\n\n  // Validation\n  validation: {\n    invalidEmail: string;\n    invalidUrl: string;\n    invalidTel: string;\n    invalid: string;\n  };\n}\n\n// Default English i18n configuration\nexport const DEFAULT_I18N: FilterI18nConfig = {\n  // UI Labels\n  addFilter: 'Add filter',\n  searchFields: 'Search fields...',\n  noFieldsFound: 'No fields found.',\n  noResultsFound: 'No results found.',\n  select: 'Select...',\n  true: 'True',\n  false: 'False',\n  min: 'Min',\n  max: 'Max',\n  to: 'to',\n  typeAndPressEnter: 'Type and press Enter to add tag',\n  selected: 'selected',\n  selectedCount: 'selected',\n  percent: '%',\n  defaultCurrency: '$',\n  defaultColor: '#000000',\n  addFilterTitle: 'Add filter',\n\n  // Operators\n  operators: {\n    is: 'is',\n    isNot: 'is not',\n    isAnyOf: 'is any of',\n    isNotAnyOf: 'is not any of',\n    includesAll: 'includes all',\n    excludesAll: 'excludes all',\n    before: 'before',\n    after: 'after',\n    between: 'between',\n    notBetween: 'not between',\n    contains: 'contains',\n    notContains: 'does not contain',\n    startsWith: 'starts with',\n    endsWith: 'ends with',\n    isExactly: 'is exactly',\n    equals: 'equals',\n    notEquals: 'not equals',\n    greaterThan: 'greater than',\n    lessThan: 'less than',\n    overlaps: 'overlaps',\n    includes: 'includes',\n    excludes: 'excludes',\n    includesAllOf: 'includes all of',\n    includesAnyOf: 'includes any of',\n    empty: 'is empty',\n    notEmpty: 'is not empty',\n  },\n\n  // Placeholders\n  placeholders: {\n    enterField: (fieldType: string) => `Enter ${fieldType}...`,\n    selectField: 'Select...',\n    searchField: (fieldName: string) => `Search ${fieldName.toLowerCase()}...`,\n    enterKey: 'Enter key...',\n    enterValue: 'Enter value...',\n  },\n\n  // Helper functions\n  helpers: {\n    formatOperator: (operator: string) => operator.replace(/_/g, ' '),\n  },\n\n  // Validation\n  validation: {\n    invalidEmail: 'Invalid email format',\n    invalidUrl: 'Invalid URL format',\n    invalidTel: 'Invalid phone format',\n    invalid: 'Invalid input format',\n  },\n};\n\n// Context for all Filter component props\ninterface FilterContextValue {\n  variant: 'solid' | 'outline';\n  size: 'sm' | 'md' | 'lg';\n  radius: 'md' | 'full';\n  i18n: FilterI18nConfig;\n  cursorPointer: boolean;\n  className?: string;\n  showAddButton?: boolean;\n  addButtonText?: string;\n  addButtonIcon?: React.ReactNode;\n  addButtonClassName?: string;\n  addButton?: React.ReactNode;\n  showSearchInput?: boolean;\n  trigger?: React.ReactNode;\n  allowMultiple?: boolean;\n}\n\nconst FilterContext = createContext<FilterContextValue>({\n  variant: 'outline',\n  size: 'md',\n  radius: 'md',\n  i18n: DEFAULT_I18N,\n  cursorPointer: true,\n  className: undefined,\n  showAddButton: true,\n  addButtonText: undefined,\n  addButtonIcon: undefined,\n  addButtonClassName: undefined,\n  addButton: undefined,\n  showSearchInput: true,\n  trigger: undefined,\n  allowMultiple: true,\n});\n\nconst useFilterContext = () => useContext(FilterContext);\n\n// Reusable input variant component for consistent styling\nconst filterInputVariants = cva(\n  [\n    'transition shrink-0 outline-none text-foreground relative flex items-center',\n    'has-[[data-slot=filters-input]:focus-visible]:ring-ring/30',\n    'has-[[data-slot=filters-input]:focus-visible]:border-ring',\n    'has-[[data-slot=filters-input]:focus-visible]:outline-none',\n    'has-[[data-slot=filters-input]:focus-visible]:ring-[3px]',\n    'has-[[data-slot=filters-input]:focus-visible]:z-1',\n    'has-[[data-slot=filters-input]:[aria-invalid=true]]:border',\n    'has-[[data-slot=filters-input]:[aria-invalid=true]]:border-solid',\n    'has-[[data-slot=filters-input]:[aria-invalid=true]]:border-destructive/60',\n    'has-[[data-slot=filters-input]:[aria-invalid=true]]:ring-destructive/10',\n    'dark:has-[[data-slot=filters-input]:[aria-invalid=true]]:border-destructive',\n    'dark:has-[[data-slot=filters-input]:[aria-invalid=true]]:ring-destructive/20',\n  ],\n  {\n    variants: {\n      variant: {\n        solid: 'border-0 bg-secondary',\n        outline: 'bg-background border border-border',\n      },\n      size: {\n        lg: 'h-10 text-sm px-2.5 has-[[data-slot=filters-prefix]]:ps-0 has-[[data-slot=filters-suffix]]:pe-0',\n        md: 'h-9 text-sm px-2 has-[[data-slot=filters-prefix]]:ps-0 has-[[data-slot=filters-suffix]]:pe-0',\n        sm: 'h-8 text-xs px-1.5 has-[[data-slot=filters-prefix]]:ps-0 has-[[data-slot=filters-suffix]]:pe-0',\n      },\n      cursorPointer: {\n        true: 'cursor-pointer',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n      cursorPointer: true,\n    },\n  },\n);\n\n// Reusable remove button variant component\nconst filterRemoveButtonVariants = cva(\n  ['inline-flex items-center shrink-0 justify-center transition shrink-0 text-muted-foreground hover:text-foreground'],\n  {\n    variants: {\n      variant: {\n        solid: 'bg-secondary',\n        outline: 'border border-border border-s-0 hover:bg-secondary',\n      },\n      size: {\n        lg: 'h-10 w-10 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-9 w-9 [&_svg:not([class*=size-])]:size-3.5',\n        sm: 'h-8 w-8 [&_svg:not([class*=size-])]:size-3',\n      },\n      cursorPointer: {\n        true: 'cursor-pointer',\n        false: '',\n      },\n      radius: {\n        md: 'rounded-e-md',\n        full: 'rounded-e-full',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n      radius: 'md',\n      cursorPointer: true,\n    },\n  },\n);\n\nconst filterAddButtonVariants = cva(\n  [\n    'inline-flex items-center shrink-0 justify-center transition shrink-0 text-foreground shadow-xs shadow-black/5',\n    '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n  ],\n  {\n    variants: {\n      variant: {\n        solid: 'border border-input hover:bg-secondary/60',\n        outline: 'border border-border hover:bg-secondary',\n      },\n      size: {\n        lg: 'h-10 px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-9 px-3 gap-1.5 text-sm [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-8 px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n      },\n      radius: {\n        md: 'rounded-md',\n        full: 'rounded-full',\n      },\n      cursorPointer: {\n        true: 'cursor-pointer',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n      cursorPointer: true,\n    },\n  },\n);\n\nconst filterOperatorVariants = cva(\n  [\n    'transition text-muted-foreground hover:text-foreground data-[state=open]:text-foreground shrink-0 flex items-center relative focus-visible:z-1',\n  ],\n  {\n    variants: {\n      variant: {\n        solid: 'bg-secondary',\n        outline:\n          'bg-background border border-border border-e-0 hover:bg-secondary data-[state=open]:bg-secondary [&+[data-slot=filters-remove]]:border-s',\n      },\n      size: {\n        lg: 'h-10 px-4 text-sm gap-1.5',\n        md: 'h-9 px-3 text-sm gap-1.25',\n        sm: 'h-8 px-2.5 text-xs gap-1',\n      },\n      cursorPointer: {\n        true: 'cursor-pointer',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n      cursorPointer: true,\n    },\n  },\n);\n\nconst filterFieldLabelVariants = cva(\n  [\n    'flex gap-1.5 shrink-0 px-1.5 py-1 items-center text-foreground',\n    '[&_svg:not([class*=size-])]:size-3.5 [&_svg:not([class*=opacity-])]:opacity-60',\n  ],\n  {\n    variants: {\n      variant: {\n        solid: 'bg-secondary',\n        outline: 'border border-border border-e-0',\n      },\n      size: {\n        lg: 'h-10 px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-9 px-3 gap-1.5 text-sm [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-8 px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n      },\n      radius: {\n        md: 'rounded-s-md',\n        full: 'rounded-s-full',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n    },\n  },\n);\n\nconst filterFieldValueVariants = cva(\n  'text-foreground transition shrink-0 flex items-center gap-1 relative focus-visible:z-1',\n  {\n    variants: {\n      variant: {\n        solid: 'bg-secondary',\n        outline: 'bg-background border border-border hover:bg-secondary has-[[data-slot=switch]]:hover:bg-transparent',\n      },\n      size: {\n        lg: 'h-10 px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-9 px-3 gap-1.5 text-sm [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-8 px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n      },\n      cursorPointer: {\n        true: 'cursor-pointer has-[[data-slot=switch]]:cursor-default',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n      cursorPointer: true,\n    },\n  },\n);\n\nconst filterFieldAddonVariants = cva('text-foreground shrink-0 flex items-center justify-center', {\n  variants: {\n    variant: {\n      solid: '',\n      outline: '',\n    },\n    size: {\n      lg: 'h-10 px-4 text-sm',\n      md: 'h-9 px-3 text-sm',\n      sm: 'h-8 px-2.5 text-xs',\n    },\n  },\n  defaultVariants: {\n    variant: 'outline',\n    size: 'md',\n  },\n});\n\nconst filterFieldBetweenVariants = cva('text-muted-foreground shrink-0 flex items-center', {\n  variants: {\n    variant: {\n      solid: 'bg-secondary',\n      outline: 'bg-background border border-border border-x-0',\n    },\n    size: {\n      lg: 'h-10 px-4 text-sm',\n      md: 'h-9 px-3 text-sm',\n      sm: 'h-8 px-2.5 text-xs',\n    },\n  },\n  defaultVariants: {\n    variant: 'outline',\n    size: 'md',\n  },\n});\n\nconst filtersContainerVariants = cva('flex flex-wrap items-center', {\n  variants: {\n    variant: {\n      solid: 'gap-2',\n      outline: '',\n    },\n    size: {\n      sm: 'gap-1.5',\n      md: 'gap-2.5',\n      lg: 'gap-3.5',\n    },\n  },\n  defaultVariants: {\n    variant: 'outline',\n    size: 'md',\n  },\n});\n\nconst filterItemVariants = cva('flex items-center shadow-xs shadow-black/5', {\n  variants: {\n    variant: {\n      solid: 'gap-px',\n      outline: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'outline',\n  },\n});\n\nfunction FilterInput<T = unknown>({\n  field,\n  onChange,\n  onBlur,\n  onKeyDown,\n  onInputChange,\n  className,\n  ...props\n}: React.InputHTMLAttributes<HTMLInputElement> & {\n  className?: string;\n  field?: FilterFieldConfig<T>;\n  onInputChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}) {\n  const context = useFilterContext();\n  const [isValid, setIsValid] = useState(true);\n  const [validationMessage, setValidationMessage] = useState('');\n\n  // Validation function to check if input matches pattern\n  const validateInput = (value: string, pattern?: string): boolean => {\n    if (!pattern || !value) return true;\n    const regex = new RegExp(pattern);\n    return regex.test(value);\n  };\n\n  // Get validation message for field type\n  const getValidationMessage = (fieldType: string, hasCustomPattern: boolean = false): string => {\n    // If it's a text or number field with a custom pattern, use the generic invalid message\n    if ((fieldType === 'text' || fieldType === 'number') && hasCustomPattern) {\n      return context.i18n.validation.invalid;\n    }\n\n    switch (fieldType) {\n      case 'email':\n        return context.i18n.validation.invalidEmail;\n      case 'url':\n        return context.i18n.validation.invalidUrl;\n      case 'tel':\n        return context.i18n.validation.invalidTel;\n      default:\n        return context.i18n.validation.invalid;\n    }\n  };\n\n  // Handle input change - allow typing without validation\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Always allow typing, just call the original onChange\n    onChange?.(e);\n  };\n\n  // Handle blur event - validate when user leaves input\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const pattern = field?.pattern || props.pattern;\n\n    // Only validate if there's a value and pattern\n    if (value && pattern) {\n      let valid = true;\n\n      // If there's a custom validation function, use it\n      if (field?.validation) {\n        valid = field.validation(value);\n      } else {\n        // Use pattern validation\n        valid = validateInput(value, pattern);\n      }\n\n      setIsValid(valid);\n      const hasCustomPattern = !!(field?.pattern || props.pattern);\n      setValidationMessage(valid ? '' : getValidationMessage(field?.type || '', hasCustomPattern));\n    } else {\n      // Reset validation state for empty values or no pattern\n      setIsValid(true);\n      setValidationMessage('');\n    }\n\n    // Call onInputChange if provided (for blur-based filter updates)\n    if (onInputChange) {\n      onInputChange(e as React.ChangeEvent<HTMLInputElement>);\n    }\n\n    // Call the original onBlur if provided\n    onBlur?.(e);\n  };\n\n  // Handle keydown event - hide validation error when user starts typing\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    // Hide validation error when user starts typing (any key except special keys)\n    if (!isValid && !['Tab', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n      setIsValid(true);\n      setValidationMessage('');\n    }\n\n    // Handle Enter key for immediate filter updates\n    if (e.key === 'Enter' && onInputChange) {\n      // Create a synthetic change event for Enter key\n      const syntheticEvent = {\n        ...e,\n        target: e.target as HTMLInputElement,\n        currentTarget: e.currentTarget as HTMLInputElement,\n      } as React.ChangeEvent<HTMLInputElement>;\n      onInputChange(syntheticEvent);\n    }\n\n    // Call the original onKeyDown if provided\n    onKeyDown?.(e);\n  };\n\n  return (\n    <div\n      className={cn('w-36', filterInputVariants({ variant: context.variant, size: context.size }), className)}\n      data-slot=\"filters-input-wrapper\"\n    >\n      {field?.prefix && (\n        <div\n          data-slot=\"filters-prefix\"\n          className={filterFieldAddonVariants({ variant: context.variant, size: context.size })}\n        >\n          {field.prefix}\n        </div>\n      )}\n\n      <div className=\"w-full flex items-stretch\">\n        <input\n          className=\"w-full outline-none\"\n          aria-invalid={!isValid}\n          aria-describedby={!isValid && validationMessage ? `${field?.key || 'input'}-error` : undefined}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onKeyDown={handleKeyDown}\n          data-slot=\"filters-input\"\n          {...props}\n        />\n        {!isValid && validationMessage && (\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex items-center\">\n                <AlertCircle className=\"size-3.5 text-destructive\" />\n              </div>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p className=\"text-sm\">{validationMessage}</p>\n            </TooltipContent>\n          </Tooltip>\n        )}\n      </div>\n\n      {field?.suffix && (\n        <div\n          data-slot=\"filters-suffix\"\n          className={cn(filterFieldAddonVariants({ variant: context.variant, size: context.size }))}\n        >\n          {field.suffix}\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface FilterRemoveButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof filterRemoveButtonVariants> {\n  icon?: React.ReactNode;\n}\n\nfunction FilterRemoveButton({ className, icon = <X />, ...props }: FilterRemoveButtonProps) {\n  const context = useFilterContext();\n\n  return (\n    <button\n      data-slot=\"filters-remove\"\n      className={cn(\n        filterRemoveButtonVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n          radius: context.radius,\n        }),\n        className,\n      )}\n      {...props}\n    >\n      {icon}\n    </button>\n  );\n}\n\n// Generic types for flexible filter system\nexport interface FilterOption<T = unknown> {\n  value: T;\n  label: string;\n  icon?: React.ReactNode;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface FilterOperator {\n  value: string;\n  label: string;\n  supportsMultiple?: boolean;\n}\n\n// Custom renderer props interface\nexport interface CustomRendererProps<T = unknown> {\n  field: FilterFieldConfig<T>;\n  values: T[];\n  onChange: (values: T[]) => void;\n  operator: string;\n}\n\n// Grouped field configuration interface\nexport interface FilterFieldGroup<T = unknown> {\n  group?: string;\n  fields: FilterFieldConfig<T>[];\n}\n\n// Union type for both flat and grouped field configurations\nexport type FilterFieldsConfig<T = unknown> = FilterFieldConfig<T>[] | FilterFieldGroup<T>[];\n\nexport interface FilterFieldConfig<T = unknown> {\n  key?: string;\n  label?: string;\n  icon?: React.ReactNode;\n  type?:\n    | 'select'\n    | 'multiselect'\n    | 'date'\n    | 'daterange'\n    | 'text'\n    | 'number'\n    | 'numberrange'\n    | 'boolean'\n    | 'email'\n    | 'url'\n    | 'tel'\n    | 'time'\n    | 'datetime'\n    | 'custom'\n    | 'separator';\n  // Group-level configuration\n  group?: string;\n  fields?: FilterFieldConfig<T>[];\n  // Field-specific options\n  options?: FilterOption<T>[];\n  operators?: FilterOperator[];\n  customRenderer?: (props: CustomRendererProps<T>) => React.ReactNode;\n  customValueRenderer?: (values: T[], options: FilterOption<T>[]) => React.ReactNode;\n  placeholder?: string;\n  searchable?: boolean;\n  maxSelections?: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  prefix?: string | React.ReactNode;\n  suffix?: string | React.ReactNode;\n  pattern?: string;\n  validation?: (value: unknown) => boolean;\n  allowCustomValues?: boolean;\n  className?: string;\n  popoverContentClassName?: string;\n  selectedOptionsClassName?: string;\n  // Grouping options (legacy support)\n  groupLabel?: string;\n  // Boolean field options\n  onLabel?: string;\n  offLabel?: string;\n  // Input event handlers\n  onInputChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  // Default operator to use when creating a filter for this field\n  defaultOperator?: string;\n  // Controlled values support for this field\n  value?: T[];\n  onValueChange?: (values: T[]) => void;\n}\n\n// Helper functions to handle both flat and grouped field configurations\nconst isFieldGroup = <T = unknown,>(item: FilterFieldConfig<T> | FilterFieldGroup<T>): item is FilterFieldGroup<T> => {\n  return 'fields' in item && Array.isArray(item.fields);\n};\n\n// Helper function to check if a FilterFieldConfig is a group-level configuration\nconst isGroupLevelField = <T = unknown,>(field: FilterFieldConfig<T>): boolean => {\n  return Boolean(field.group && field.fields);\n};\n\nconst flattenFields = <T = unknown,>(fields: FilterFieldsConfig<T>): FilterFieldConfig<T>[] => {\n  return fields.reduce<FilterFieldConfig<T>[]>((acc, item) => {\n    if (isFieldGroup(item)) {\n      return [...acc, ...item.fields];\n    }\n    // Handle group-level fields (new structure)\n    if (isGroupLevelField(item)) {\n      return [...acc, ...item.fields!];\n    }\n    return [...acc, item];\n  }, []);\n};\n\nconst getFieldsMap = <T = unknown,>(fields: FilterFieldsConfig<T>): Record<string, FilterFieldConfig<T>> => {\n  const flatFields = flattenFields(fields);\n  return flatFields.reduce(\n    (acc, field) => {\n      // Only add fields that have a key (skip group-level configurations)\n      if (field.key) {\n        acc[field.key] = field;\n      }\n      return acc;\n    },\n    {} as Record<string, FilterFieldConfig<T>>,\n  );\n};\n\n// Helper function to create operators from i18n config\nconst createOperatorsFromI18n = (i18n: FilterI18nConfig): Record<string, FilterOperator[]> => ({\n  select: [\n    { value: 'is', label: i18n.operators.is },\n    { value: 'is_not', label: i18n.operators.isNot },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  multiselect: [\n    { value: 'is_any_of', label: i18n.operators.isAnyOf },\n    { value: 'is_not_any_of', label: i18n.operators.isNotAnyOf },\n    { value: 'includes_all', label: i18n.operators.includesAll },\n    { value: 'excludes_all', label: i18n.operators.excludesAll },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  date: [\n    { value: 'before', label: i18n.operators.before },\n    { value: 'after', label: i18n.operators.after },\n    { value: 'is', label: i18n.operators.is },\n    { value: 'is_not', label: i18n.operators.isNot },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  daterange: [\n    { value: 'between', label: i18n.operators.between },\n    { value: 'not_between', label: i18n.operators.notBetween },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  text: [\n    { value: 'contains', label: i18n.operators.contains },\n    { value: 'not_contains', label: i18n.operators.notContains },\n    { value: 'starts_with', label: i18n.operators.startsWith },\n    { value: 'ends_with', label: i18n.operators.endsWith },\n    { value: 'is', label: i18n.operators.isExactly },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  number: [\n    { value: 'equals', label: i18n.operators.equals },\n    { value: 'not_equals', label: i18n.operators.notEquals },\n    { value: 'greater_than', label: i18n.operators.greaterThan },\n    { value: 'less_than', label: i18n.operators.lessThan },\n    { value: 'between', label: i18n.operators.between },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  numberrange: [\n    { value: 'between', label: i18n.operators.between },\n    { value: 'overlaps', label: i18n.operators.overlaps },\n    { value: 'contains', label: i18n.operators.contains },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  boolean: [\n    { value: 'is', label: i18n.operators.is },\n    { value: 'is_not', label: i18n.operators.isNot },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  email: [\n    { value: 'contains', label: i18n.operators.contains },\n    { value: 'not_contains', label: i18n.operators.notContains },\n    { value: 'starts_with', label: i18n.operators.startsWith },\n    { value: 'ends_with', label: i18n.operators.endsWith },\n    { value: 'is', label: i18n.operators.isExactly },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  url: [\n    { value: 'contains', label: i18n.operators.contains },\n    { value: 'not_contains', label: i18n.operators.notContains },\n    { value: 'starts_with', label: i18n.operators.startsWith },\n    { value: 'ends_with', label: i18n.operators.endsWith },\n    { value: 'is', label: i18n.operators.isExactly },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  tel: [\n    { value: 'contains', label: i18n.operators.contains },\n    { value: 'not_contains', label: i18n.operators.notContains },\n    { value: 'starts_with', label: i18n.operators.startsWith },\n    { value: 'ends_with', label: i18n.operators.endsWith },\n    { value: 'is', label: i18n.operators.isExactly },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  time: [\n    { value: 'before', label: i18n.operators.before },\n    { value: 'after', label: i18n.operators.after },\n    { value: 'is', label: i18n.operators.is },\n    { value: 'between', label: i18n.operators.between },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  datetime: [\n    { value: 'before', label: i18n.operators.before },\n    { value: 'after', label: i18n.operators.after },\n    { value: 'is', label: i18n.operators.is },\n    { value: 'between', label: i18n.operators.between },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n});\n\n// Default operators for different field types (using default i18n)\nexport const DEFAULT_OPERATORS: Record<string, FilterOperator[]> = createOperatorsFromI18n(DEFAULT_I18N);\n\n// Helper function to get operators for a field\nconst getOperatorsForField = <T = unknown,>(\n  field: FilterFieldConfig<T>,\n  values: T[],\n  i18n: FilterI18nConfig,\n): FilterOperator[] => {\n  if (field.operators) return field.operators;\n\n  const operators = createOperatorsFromI18n(i18n);\n\n  // Determine field type for operator selection\n  let fieldType = field.type || 'select';\n\n  // If it's a select field but has multiple values, treat as multiselect\n  if (fieldType === 'select' && values.length > 1) {\n    fieldType = 'multiselect';\n  }\n\n  // If it's a multiselect field or has multiselect operators, use multiselect operators\n  if (fieldType === 'multiselect' || field.type === 'multiselect') {\n    return operators.multiselect;\n  }\n\n  return operators[fieldType] || operators.select;\n};\n\ninterface FilterOperatorDropdownProps<T = unknown> {\n  field: FilterFieldConfig<T>;\n  operator: string;\n  values: T[];\n  onChange: (operator: string) => void;\n}\n\nfunction FilterOperatorDropdown<T = unknown>({ field, operator, values, onChange }: FilterOperatorDropdownProps<T>) {\n  const context = useFilterContext();\n  const operators = getOperatorsForField(field, values, context.i18n);\n\n  // Find the operator label, with fallback to formatted operator name\n  const operatorLabel =\n    operators.find((op) => op.value === operator)?.label || context.i18n.helpers.formatOperator(operator);\n\n  // Debug logging to help identify the issue\n  if (!operators.find((op) => op.value === operator)) {\n    console.warn(\n      `Operator \"${operator}\" not found in operators for field \"${field.key}\" (type: ${field.type}). Available operators:`,\n      operators.map((op) => op.value),\n    );\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger className={filterOperatorVariants({ variant: context.variant, size: context.size })}>\n        {operatorLabel}\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"start\" className=\"w-fit min-w-fit\">\n        {operators.map((op) => (\n          <DropdownMenuItem\n            key={op.value}\n            onClick={() => onChange(op.value)}\n            className=\"flex items-center justify-between\"\n          >\n            <span>{op.label}</span>\n            <Check className={`text-primary ms-auto ${op.value === operator ? 'opacity-100' : 'opacity-0'}`} />\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\ninterface FilterValueSelectorProps<T = unknown> {\n  field: FilterFieldConfig<T>;\n  values: T[];\n  onChange: (values: T[]) => void;\n  operator: string;\n}\n\ninterface SelectOptionsPopoverProps<T = unknown> {\n  field: FilterFieldConfig<T>;\n  values: T[];\n  onChange: (values: T[]) => void;\n  onClose?: () => void;\n  showBackButton?: boolean;\n  onBack?: () => void;\n  inline?: boolean;\n}\n\nfunction SelectOptionsPopover<T = unknown>({\n  field,\n  values,\n  onChange,\n  onClose,\n  inline = false,\n}: SelectOptionsPopoverProps<T>) {\n  const [open, setOpen] = useState(false);\n  const [searchInput, setSearchInput] = useState('');\n  const context = useFilterContext();\n\n  const isMultiSelect = field.type === 'multiselect' || values.length > 1;\n  const effectiveValues = (field.value !== undefined ? (field.value as T[]) : values) || [];\n  const selectedOptions = field.options?.filter((opt) => effectiveValues.includes(opt.value)) || [];\n  const unselectedOptions = field.options?.filter((opt) => !effectiveValues.includes(opt.value)) || [];\n\n  const handleClose = () => {\n    setOpen(false);\n    onClose?.();\n  };\n\n  // If inline mode, render the content directly without popover\n  if (inline) {\n    return (\n      <div className=\"w-full\">\n        <Command>\n          {field.searchable !== false && (\n            <CommandInput\n              placeholder={context.i18n.placeholders.searchField(field.label || '')}\n              className=\"h-8.5 text-sm\"\n              value={searchInput}\n              onValueChange={setSearchInput}\n            />\n          )}\n          <CommandList>\n            <CommandEmpty>{context.i18n.noResultsFound}</CommandEmpty>\n\n            {/* Selected items */}\n            {selectedOptions.length > 0 && (\n              <CommandGroup heading={field.label || 'Selected'}>\n                {selectedOptions.map((option) => (\n                  <CommandItem\n                    key={String(option.value)}\n                    className=\"group flex gap-2 items-center\"\n                    onSelect={() => {\n                      if (isMultiSelect) {\n                        const next = effectiveValues.filter((v) => v !== option.value) as T[];\n                        if (field.onValueChange) {\n                          field.onValueChange(next);\n                        } else {\n                          onChange(next);\n                        }\n                      } else {\n                        if (field.onValueChange) {\n                          field.onValueChange([] as T[]);\n                        } else {\n                          onChange([] as T[]);\n                        }\n                      }\n                    }}\n                  >\n                    {option.icon && option.icon}\n                    <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                    <Check className=\"text-primary ms-auto\" />\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            )}\n\n            {/* Available items */}\n            {unselectedOptions.length > 0 && (\n              <>\n                {selectedOptions.length > 0 && <CommandSeparator />}\n                <CommandGroup>\n                  {unselectedOptions.map((option) => (\n                    <CommandItem\n                      key={String(option.value)}\n                      className=\"group flex gap-2 items-center\"\n                      value={option.label}\n                      onSelect={() => {\n                        if (isMultiSelect) {\n                          const newValues = [...effectiveValues, option.value] as T[];\n                          if (field.maxSelections && newValues.length > field.maxSelections) {\n                            return; // Don't exceed max selections\n                          }\n                          if (field.onValueChange) {\n                            field.onValueChange(newValues);\n                          } else {\n                            onChange(newValues);\n                          }\n                          // For multiselect, don't close the popover to allow multiple selections\n                        } else {\n                          if (field.onValueChange) {\n                            field.onValueChange([option.value] as T[]);\n                          } else {\n                            onChange([option.value] as T[]);\n                          }\n                          onClose?.();\n                        }\n                      }}\n                    >\n                      {option.icon && option.icon}\n                      <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                      <Check className=\"text-primary ms-auto opacity-0\" />\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </div>\n    );\n  }\n\n  return (\n    <Popover\n      open={open}\n      onOpenChange={(open) => {\n        setOpen(open);\n        if (!open) {\n          setTimeout(() => setSearchInput(''), 200);\n        }\n      }}\n    >\n      <PopoverTrigger\n        className={filterFieldValueVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n        })}\n      >\n        <div className=\"flex gap-1.5 items-center\">\n          {field.customValueRenderer ? (\n            field.customValueRenderer(values, field.options || [])\n          ) : (\n            <>\n              {selectedOptions.length > 0 && (\n                <div className={cn('-space-x-1.5 flex items-center', field.selectedOptionsClassName)}>\n                  {selectedOptions.slice(0, 3).map((option) => (\n                    <div key={String(option.value)}>{option.icon}</div>\n                  ))}\n                </div>\n              )}\n              {selectedOptions.length === 1\n                ? selectedOptions[0].label\n                : selectedOptions.length > 1\n                  ? `${selectedOptions.length} ${context.i18n.selectedCount}`\n                  : context.i18n.select}\n            </>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent align=\"start\" className={cn('w-[200px] p-0', field.className)}>\n        <Command>\n          {field.searchable !== false && (\n            <CommandInput\n              placeholder={context.i18n.placeholders.searchField(field.label || '')}\n              className=\"h-9 text-sm\"\n              value={searchInput}\n              onValueChange={setSearchInput}\n            />\n          )}\n          <CommandList>\n            <CommandEmpty>{context.i18n.noResultsFound}</CommandEmpty>\n\n            {/* Selected items */}\n            {selectedOptions.length > 0 && (\n              <CommandGroup>\n                {selectedOptions.map((option) => (\n                  <CommandItem\n                    key={String(option.value)}\n                    className=\"group flex gap-2 items-center\"\n                    onSelect={() => {\n                      if (isMultiSelect) {\n                        onChange(values.filter((v) => v !== option.value) as T[]);\n                      } else {\n                        onChange([] as T[]);\n                      }\n                      if (!isMultiSelect) {\n                        setOpen(false);\n                        handleClose();\n                      }\n                    }}\n                  >\n                    {option.icon && option.icon}\n                    <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                    <Check className=\"text-primary ms-auto\" />\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            )}\n\n            {/* Available items */}\n            {unselectedOptions.length > 0 && (\n              <>\n                {selectedOptions.length > 0 && <CommandSeparator />}\n                <CommandGroup>\n                  {unselectedOptions.map((option) => (\n                    <CommandItem\n                      key={String(option.value)}\n                      className=\"group flex gap-2 items-center\"\n                      value={option.label}\n                      onSelect={() => {\n                        if (isMultiSelect) {\n                          const newValues = [...values, option.value] as T[];\n                          if (field.maxSelections && newValues.length > field.maxSelections) {\n                            return; // Don't exceed max selections\n                          }\n                          onChange(newValues);\n                        } else {\n                          onChange([option.value] as T[]);\n                          setOpen(false);\n                          handleClose();\n                        }\n                      }}\n                    >\n                      {option.icon && option.icon}\n                      <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                      <Check className=\"text-primary ms-auto opacity-0\" />\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nfunction FilterValueSelector<T = unknown>({ field, values, onChange, operator }: FilterValueSelectorProps<T>) {\n  const [open, setOpen] = useState(false);\n  const [searchInput, setSearchInput] = useState('');\n  const context = useFilterContext();\n\n  // Hide value input for empty/not empty operators\n  if (operator === 'empty' || operator === 'not_empty') {\n    return null;\n  }\n\n  // Use custom renderer if provided\n  if (field.customRenderer) {\n    return (\n      <div\n        className={filterFieldValueVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n        })}\n      >\n        {field.customRenderer({ field, values, onChange, operator })}\n      </div>\n    );\n  }\n\n  if (field.type === 'boolean') {\n    const isChecked = values[0] === true;\n\n    // Use custom labels if provided, otherwise fall back to i18n defaults\n    const onLabel = field.onLabel || context.i18n.true;\n    const offLabel = field.offLabel || context.i18n.false;\n\n    return (\n      <div\n        className={filterFieldValueVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n        })}\n      >\n        <div className=\"flex items-center gap-2\">\n          <Switch checked={isChecked} onCheckedChange={(checked) => onChange([checked as T])} size=\"sm\" />\n          {field.onLabel && field.offLabel && (\n            <span className=\"text-xs text-muted-foreground\">{isChecked ? onLabel : offLabel}</span>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  if (field.type === 'time') {\n    if (operator === 'between') {\n      const startTime = (values[0] as string) || '';\n      const endTime = (values[1] as string) || '';\n\n      return (\n        <div className=\"flex items-center\" data-slot=\"filters-item\">\n          <FilterInput\n            type=\"time\"\n            value={startTime}\n            onChange={(e) => onChange([e.target.value, endTime] as T[])}\n            onInputChange={field.onInputChange}\n            className={field.className}\n            field={field}\n          />\n          <div\n            data-slot=\"filters-between\"\n            className={filterFieldBetweenVariants({ variant: context.variant, size: context.size })}\n          >\n            {context.i18n.to}\n          </div>\n          <FilterInput\n            type=\"time\"\n            value={endTime}\n            onChange={(e) => onChange([startTime, e.target.value] as T[])}\n            onInputChange={field.onInputChange}\n            className={field.className}\n            field={field}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FilterInput\n        type=\"time\"\n        value={(values[0] as string) || ''}\n        onChange={(e) => onChange([e.target.value] as T[])}\n        onInputChange={field.onInputChange}\n        field={field}\n        className={field.className}\n      />\n    );\n  }\n\n  if (field.type === 'datetime') {\n    if (operator === 'between') {\n      const startDateTime = (values[0] as string) || '';\n      const endDateTime = (values[1] as string) || '';\n\n      return (\n        <div className=\"flex items-center\" data-slot=\"filters-item\">\n          <FilterInput\n            type=\"datetime-local\"\n            value={startDateTime}\n            onChange={(e) => onChange([e.target.value, endDateTime] as T[])}\n            onInputChange={field.onInputChange}\n            className={cn('w-36', field.className)}\n            field={field}\n          />\n          <div\n            data-slot=\"filters-between\"\n            className={filterFieldBetweenVariants({ variant: context.variant, size: context.size })}\n          >\n            {context.i18n.to}\n          </div>\n          <FilterInput\n            type=\"datetime-local\"\n            value={endDateTime}\n            onChange={(e) => onChange([startDateTime, e.target.value] as T[])}\n            onInputChange={field.onInputChange}\n            className={cn('w-36', field.className)}\n            field={field}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FilterInput\n        type=\"datetime-local\"\n        value={(values[0] as string) || ''}\n        onChange={(e) => onChange([e.target.value] as T[])}\n        onInputChange={field.onInputChange}\n        className={cn('w-36', field.className)}\n        field={field}\n      />\n    );\n  }\n\n  if (['email', 'url', 'tel'].includes(field.type || '')) {\n    const getInputType = () => {\n      switch (field.type) {\n        case 'email':\n          return 'email';\n        case 'url':\n          return 'url';\n        case 'tel':\n          return 'tel';\n        default:\n          return 'text';\n      }\n    };\n\n    const getPattern = () => {\n      switch (field.type) {\n        case 'email':\n          return '^[^@\\\\s]+@[^@\\\\s]+\\\\.[^@\\\\s]+$';\n        case 'url':\n          return '^https?:\\\\/\\\\/(www\\\\.)?[-a-zA-Z0-9@:%._\\\\+~#=]{1,256}\\\\.[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@:%_\\\\+.~#?&//=]*)$';\n        case 'tel':\n          return '^[\\\\+]?[1-9][\\\\d]{0,15}$';\n        default:\n          return undefined;\n      }\n    };\n\n    return (\n      <FilterInput\n        type={getInputType()}\n        value={(values[0] as string) || ''}\n        onChange={(e) => onChange([e.target.value] as T[])}\n        onInputChange={field.onInputChange}\n        placeholder={field.placeholder || context.i18n.placeholders.enterField(field.type || 'text')}\n        pattern={field.pattern || getPattern()}\n        className={field.className}\n        field={field}\n      />\n    );\n  }\n\n  if (field.type === 'daterange') {\n    const startDate = (values[0] as string) || '';\n    const endDate = (values[1] as string) || '';\n\n    return (\n      <div\n        className={filterFieldValueVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n        })}\n      >\n        <FilterInput\n          type=\"date\"\n          value={startDate}\n          onChange={(e) => onChange([e.target.value, endDate] as T[])}\n          onInputChange={field.onInputChange}\n          className={cn('w-24', field.className)}\n          field={field}\n        />\n        <div\n          data-slot=\"filters-between\"\n          className={filterFieldBetweenVariants({ variant: context.variant, size: context.size })}\n        >\n          {context.i18n.to}\n        </div>\n        <FilterInput\n          type=\"date\"\n          value={endDate}\n          onChange={(e) => onChange([startDate, e.target.value] as T[])}\n          onInputChange={field.onInputChange}\n          className={cn('w-24', field.className)}\n          field={field}\n        />\n      </div>\n    );\n  }\n\n  // Handle different field types\n  if (field.type === 'text' || field.type === 'number') {\n    if (field.type === 'number' && operator === 'between') {\n      const minVal = (values[0] as string) || '';\n      const maxVal = (values[1] as string) || '';\n\n      return (\n        <div className=\"flex items-center\" data-slot=\"filters-item\">\n          <FilterInput\n            type=\"number\"\n            value={minVal}\n            onChange={(e) => onChange([e.target.value, maxVal] as T[])}\n            onInputChange={field.onInputChange}\n            placeholder={context.i18n.min}\n            className={cn('w-16', field.className)}\n            min={field.min}\n            max={field.max}\n            step={field.step}\n            pattern={field.pattern}\n            field={field}\n          />\n          <div\n            data-slot=\"filters-between\"\n            className={filterFieldBetweenVariants({ variant: context.variant, size: context.size })}\n          >\n            {context.i18n.to}\n          </div>\n          <FilterInput\n            type=\"number\"\n            value={maxVal}\n            onChange={(e) => onChange([minVal, e.target.value] as T[])}\n            onInputChange={field.onInputChange}\n            placeholder={context.i18n.max}\n            className={cn('w-16', field.className)}\n            min={field.min}\n            max={field.max}\n            step={field.step}\n            pattern={field.pattern}\n            field={field}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center\" data-slot=\"filters-item\">\n        <FilterInput\n          type={field.type === 'number' ? 'number' : 'text'}\n          value={(values[0] as string) || ''}\n          onChange={(e) => onChange([e.target.value] as T[])}\n          onInputChange={field.onInputChange}\n          placeholder={field.placeholder}\n          min={field.type === 'number' ? field.min : undefined}\n          max={field.type === 'number' ? field.max : undefined}\n          step={field.type === 'number' ? field.step : undefined}\n          pattern={field.pattern}\n          field={field}\n          className={cn('w-36', field.className)}\n        />\n      </div>\n    );\n  }\n\n  if (field.type === 'date') {\n    return (\n      <FilterInput\n        type=\"date\"\n        value={(values[0] as string) || ''}\n        onChange={(e) => onChange([e.target.value] as T[])}\n        onInputChange={field.onInputChange}\n        field={field}\n        className={cn('w-16', field.className)}\n      />\n    );\n  }\n\n  // For select and multiselect types, use the SelectOptionsPopover component\n  if (field.type === 'select' || field.type === 'multiselect') {\n    return <SelectOptionsPopover field={field} values={values} onChange={onChange} />;\n  }\n\n  const isMultiSelect = values.length > 1;\n  const selectedOptions = field.options?.filter((opt) => values.includes(opt.value)) || [];\n  const unselectedOptions = field.options?.filter((opt) => !values.includes(opt.value)) || [];\n\n  return (\n    <Popover\n      open={open}\n      onOpenChange={(open) => {\n        setOpen(open);\n        if (!open) {\n          setTimeout(() => setSearchInput(''), 200);\n        }\n      }}\n    >\n      <PopoverTrigger\n        className={filterFieldValueVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n        })}\n      >\n        <div className=\"flex gap-1.5 items-center\">\n          {field.customValueRenderer ? (\n            field.customValueRenderer(values, field.options || [])\n          ) : (\n            <>\n              {selectedOptions.length > 0 && (\n                <div className=\"flex items-center -space-x-1.5\">\n                  {selectedOptions.slice(0, 3).map((option) => (\n                    <div key={String(option.value)}>{option.icon}</div>\n                  ))}\n                </div>\n              )}\n              {selectedOptions.length === 1\n                ? selectedOptions[0].label\n                : selectedOptions.length > 1\n                  ? `${selectedOptions.length} ${context.i18n.selectedCount}`\n                  : context.i18n.select}\n            </>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent className={cn('w-36 p-0', field.popoverContentClassName)}>\n        <Command>\n          {field.searchable !== false && (\n            <CommandInput\n              placeholder={context.i18n.placeholders.searchField(field.label || '')}\n              className=\"h-9 text-sm\"\n              value={searchInput}\n              onValueChange={setSearchInput}\n            />\n          )}\n          <CommandList>\n            <CommandEmpty>{context.i18n.noResultsFound}</CommandEmpty>\n\n            {/* Selected items */}\n            {selectedOptions.length > 0 && (\n              <CommandGroup>\n                {selectedOptions.map((option) => (\n                  <CommandItem\n                    key={String(option.value)}\n                    className=\"group flex gap-2 items-center\"\n                    onSelect={() => {\n                      if (isMultiSelect) {\n                        onChange(values.filter((v) => v !== option.value) as T[]);\n                      } else {\n                        onChange([] as T[]);\n                      }\n                      if (!isMultiSelect) setOpen(false);\n                    }}\n                  >\n                    {option.icon && option.icon}\n                    <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                    <Check className=\"text-primary ms-auto\" />\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            )}\n\n            {/* Available items */}\n            {unselectedOptions.length > 0 && (\n              <>\n                {selectedOptions.length > 0 && <CommandSeparator />}\n                <CommandGroup>\n                  {unselectedOptions.map((option) => (\n                    <CommandItem\n                      key={String(option.value)}\n                      className=\"group flex gap-2 items-center\"\n                      value={option.label}\n                      onSelect={() => {\n                        if (isMultiSelect) {\n                          const newValues = [...values, option.value] as T[];\n                          if (field.maxSelections && newValues.length > field.maxSelections) {\n                            return; // Don't exceed max selections\n                          }\n                          onChange(newValues);\n                        } else {\n                          onChange([option.value] as T[]);\n                          setOpen(false);\n                        }\n                      }}\n                    >\n                      {option.icon && option.icon}\n                      <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                      <Check className=\"text-primary ms-auto opacity-0\" />\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nexport interface Filter<T = unknown> {\n  id: string;\n  field: string;\n  operator: string;\n  values: T[];\n}\n\nexport interface FilterGroup<T = unknown> {\n  id: string;\n  label?: string;\n  filters: Filter<T>[];\n  fields: FilterFieldConfig<T>[];\n}\n\n// FiltersContent component for the filter panel content\ninterface FiltersContentProps<T = unknown> {\n  filters: Filter<T>[];\n  fields: FilterFieldsConfig<T>;\n  onChange: (filters: Filter<T>[]) => void;\n}\n\nexport const FiltersContent = <T = unknown,>({ filters, fields, onChange }: FiltersContentProps<T>) => {\n  const context = useFilterContext();\n  const fieldsMap = useMemo(() => getFieldsMap(fields), [fields]);\n\n  const updateFilter = useCallback(\n    (filterId: string, updates: Partial<Filter<T>>) => {\n      onChange(\n        filters.map((filter) => {\n          if (filter.id === filterId) {\n            const updatedFilter = { ...filter, ...updates };\n            // Clear values for empty/not empty operators\n            if (updates.operator === 'empty' || updates.operator === 'not_empty') {\n              updatedFilter.values = [] as T[];\n            }\n            return updatedFilter;\n          }\n          return filter;\n        }),\n      );\n    },\n    [filters, onChange],\n  );\n\n  const removeFilter = useCallback(\n    (filterId: string) => {\n      onChange(filters.filter((filter) => filter.id !== filterId));\n    },\n    [filters, onChange],\n  );\n\n  return (\n    <div className={cn(filtersContainerVariants({ variant: context.variant, size: context.size }), context.className)}>\n      {filters.map((filter) => {\n        const field = fieldsMap[filter.field];\n        if (!field) return null;\n\n        return (\n          <div key={filter.id} className={filterItemVariants({ variant: context.variant })} data-slot=\"filter-item\">\n            {/* Field Label */}\n            <div\n              className={filterFieldLabelVariants({\n                variant: context.variant,\n                size: context.size,\n                radius: context.radius,\n              })}\n            >\n              {field.icon}\n              {field.label}\n            </div>\n\n            {/* Operator Dropdown */}\n            <FilterOperatorDropdown<T>\n              field={field}\n              operator={filter.operator}\n              values={filter.values}\n              onChange={(operator) => updateFilter(filter.id, { operator })}\n            />\n\n            {/* Value Selector */}\n            <FilterValueSelector<T>\n              field={field}\n              values={filter.values}\n              onChange={(values) => updateFilter(filter.id, { values })}\n              operator={filter.operator}\n            />\n\n            {/* Remove Button */}\n            <FilterRemoveButton onClick={() => removeFilter(filter.id)} />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\ninterface FiltersProps<T = unknown> {\n  filters: Filter<T>[];\n  fields: FilterFieldsConfig<T>;\n  onChange: (filters: Filter<T>[]) => void;\n  className?: string;\n  showAddButton?: boolean;\n  addButtonText?: string;\n  addButtonIcon?: React.ReactNode;\n  addButtonClassName?: string;\n  addButton?: React.ReactNode;\n  variant?: 'solid' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  radius?: 'md' | 'full';\n  i18n?: Partial<FilterI18nConfig>;\n  showSearchInput?: boolean;\n  cursorPointer?: boolean;\n  trigger?: React.ReactNode;\n  allowMultiple?: boolean;\n  popoverContentClassName?: string;\n}\n\nexport function Filters<T = unknown>({\n  filters,\n  fields,\n  onChange,\n  className,\n  showAddButton = true,\n  addButtonText,\n  addButtonIcon,\n  addButtonClassName,\n  addButton,\n  variant = 'outline',\n  size = 'md',\n  radius = 'md',\n  i18n,\n  showSearchInput = true,\n  cursorPointer = true,\n  trigger,\n  allowMultiple = true,\n  popoverContentClassName,\n}: FiltersProps<T>) {\n  const [addFilterOpen, setAddFilterOpen] = useState(false);\n  const [selectedFieldForOptions, setSelectedFieldForOptions] = useState<FilterFieldConfig<T> | null>(null);\n  const [tempSelectedValues, setTempSelectedValues] = useState<unknown[]>([]);\n\n  // Merge provided i18n with defaults\n  const mergedI18n: FilterI18nConfig = {\n    ...DEFAULT_I18N,\n    ...i18n,\n    operators: {\n      ...DEFAULT_I18N.operators,\n      ...i18n?.operators,\n    },\n    placeholders: {\n      ...DEFAULT_I18N.placeholders,\n      ...i18n?.placeholders,\n    },\n    validation: {\n      ...DEFAULT_I18N.validation,\n      ...i18n?.validation,\n    },\n  };\n\n  const fieldsMap = useMemo(() => getFieldsMap(fields), [fields]);\n\n  const updateFilter = useCallback(\n    (filterId: string, updates: Partial<Filter<T>>) => {\n      onChange(\n        filters.map((filter) => {\n          if (filter.id === filterId) {\n            const updatedFilter = { ...filter, ...updates };\n            // Clear values for empty/not empty operators\n            if (updates.operator === 'empty' || updates.operator === 'not_empty') {\n              updatedFilter.values = [] as T[];\n            }\n            return updatedFilter;\n          }\n          return filter;\n        }),\n      );\n    },\n    [filters, onChange],\n  );\n\n  const removeFilter = useCallback(\n    (filterId: string) => {\n      onChange(filters.filter((filter) => filter.id !== filterId));\n    },\n    [filters, onChange],\n  );\n\n  const addFilter = useCallback(\n    (fieldKey: string) => {\n      const field = fieldsMap[fieldKey];\n      if (field && field.key) {\n        // For select and multiselect types, show options directly\n        if (field.type === 'select' || field.type === 'multiselect') {\n          setSelectedFieldForOptions(field);\n          // For multiselect, check if there's already a filter and use its values\n          const existingFilter = filters.find((f) => f.field === fieldKey);\n          const initialValues = field.type === 'multiselect' && existingFilter ? existingFilter.values : [];\n          setTempSelectedValues(initialValues);\n          return;\n        }\n\n        // For other types, add filter directly\n        const defaultOperator =\n          field.defaultOperator ||\n          (field.type === 'daterange'\n            ? 'between'\n            : field.type === 'numberrange'\n              ? 'between'\n              : field.type === 'boolean'\n                ? 'is'\n                : 'is');\n        let defaultValues: unknown[] = [];\n\n        if (['text', 'number', 'date', 'email', 'url', 'tel', 'time', 'datetime'].includes(field.type || '')) {\n          defaultValues = [''] as unknown[];\n        } else if (field.type === 'daterange') {\n          defaultValues = ['', ''] as unknown[];\n        } else if (field.type === 'numberrange') {\n          defaultValues = [field.min || 0, field.max || 100] as unknown[];\n        } else if (field.type === 'boolean') {\n          defaultValues = [false] as unknown[];\n        } else if (field.type === 'time') {\n          defaultValues = [''] as unknown[];\n        } else if (field.type === 'datetime') {\n          defaultValues = [''] as unknown[];\n        }\n\n        const newFilter = createFilter<T>(fieldKey, defaultOperator, defaultValues as T[]);\n        const newFilters = [...filters, newFilter];\n        onChange(newFilters);\n        setAddFilterOpen(false);\n      }\n    },\n    [fieldsMap, filters, onChange],\n  );\n\n  const addFilterWithOption = useCallback(\n    (field: FilterFieldConfig<T>, values: unknown[], closePopover: boolean = true) => {\n      if (!field.key) return;\n\n      const defaultOperator = field.defaultOperator || (field.type === 'multiselect' ? 'is_any_of' : 'is');\n\n      // Check if there's already a filter for this field\n      const existingFilterIndex = filters.findIndex((f) => f.field === field.key);\n\n      if (existingFilterIndex >= 0) {\n        // Update existing filter\n        const updatedFilters = [...filters];\n        updatedFilters[existingFilterIndex] = {\n          ...updatedFilters[existingFilterIndex],\n          values: values as T[],\n        };\n        onChange(updatedFilters);\n      } else {\n        // Create new filter\n        const newFilter = createFilter<T>(field.key, defaultOperator, values as T[]);\n        const newFilters = [...filters, newFilter];\n        onChange(newFilters);\n      }\n\n      if (closePopover) {\n        setAddFilterOpen(false);\n        setSelectedFieldForOptions(null);\n        setTempSelectedValues([]);\n      } else {\n        // For multiselect, keep popover open but update temp values\n        setTempSelectedValues(values as unknown[]);\n      }\n    },\n    [filters, onChange],\n  );\n\n  const selectableFields = useMemo(() => {\n    const flatFields = flattenFields(fields);\n    return flatFields.filter((field) => {\n      // Only include actual filterable fields (must have key and type)\n      if (!field.key || field.type === 'separator') {\n        return false;\n      }\n      // If allowMultiple is true, don't filter out fields that already have filters\n      if (allowMultiple) {\n        return true;\n      }\n      // Filter out fields that already have filters (default behavior)\n      return !filters.some((filter) => filter.field === field.key);\n    });\n  }, [fields, filters, allowMultiple]);\n\n  return (\n    <FilterContext.Provider\n      value={{\n        variant,\n        size,\n        radius,\n        i18n: mergedI18n,\n        cursorPointer,\n        className,\n        showAddButton,\n        addButtonText,\n        addButtonIcon,\n        addButtonClassName,\n        addButton,\n        showSearchInput,\n        trigger,\n        allowMultiple,\n      }}\n    >\n      <div className={cn(filtersContainerVariants({ variant, size }), className)}>\n        {showAddButton && selectableFields.length > 0 && (\n          <Popover\n            open={addFilterOpen}\n            onOpenChange={(open) => {\n              setAddFilterOpen(open);\n              if (!open) {\n                setSelectedFieldForOptions(null);\n                setTempSelectedValues([]);\n              }\n            }}\n          >\n            <PopoverTrigger asChild>\n              {addButton ? (\n                addButton\n              ) : (\n                <button\n                  className={cn(\n                    filterAddButtonVariants({\n                      variant: variant,\n                      size: size,\n                      cursorPointer: cursorPointer,\n                      radius: radius,\n                    }),\n                    addButtonClassName,\n                  )}\n                  title={mergedI18n.addFilterTitle}\n                >\n                  {addButtonIcon || <Plus />}\n                  {addButtonText || mergedI18n.addFilter}\n                </button>\n              )}\n            </PopoverTrigger>\n            <PopoverContent className={cn('w-[200px] p-0', popoverContentClassName)} align=\"start\">\n              <Command>\n                {selectedFieldForOptions ? (\n                  // Show original select/multiselect rendering without back button\n                  <SelectOptionsPopover<T>\n                    field={selectedFieldForOptions}\n                    values={tempSelectedValues as T[]}\n                    onChange={(values) => {\n                      // For multiselect, create filter immediately but keep popover open\n                      // For single select, create filter and close popover\n                      const shouldClosePopover = selectedFieldForOptions.type === 'select';\n                      addFilterWithOption(selectedFieldForOptions, values as unknown[], shouldClosePopover);\n                    }}\n                    onClose={() => setAddFilterOpen(false)}\n                    inline={true}\n                  />\n                ) : (\n                  // Show field selection\n                  <>\n                    {showSearchInput && <CommandInput placeholder={mergedI18n.searchFields} className=\"h-9\" />}\n                    <CommandList>\n                      <CommandEmpty>{mergedI18n.noFieldsFound}</CommandEmpty>\n                      {fields.map((item, index) => {\n                        // Handle grouped fields (FilterFieldGroup structure)\n                        if (isFieldGroup(item)) {\n                          const groupFields = item.fields.filter((field) => {\n                            // Include separators and labels for display\n                            if (field.type === 'separator') {\n                              return true;\n                            }\n                            // If allowMultiple is true, don't filter out fields that already have filters\n                            if (allowMultiple) {\n                              return true;\n                            }\n                            // Filter out fields that already have filters (default behavior)\n                            return !filters.some((filter) => filter.field === field.key);\n                          });\n\n                          if (groupFields.length === 0) return null;\n\n                          return (\n                            <CommandGroup key={`group-${index}`} heading={item.group || 'Fields'}>\n                              {groupFields.map((field, fieldIndex) => {\n                                // Handle separator\n                                if (field.type === 'separator') {\n                                  return <CommandSeparator key={`separator-${fieldIndex}`} />;\n                                }\n\n                                // Regular field\n                                return (\n                                  <CommandItem key={field.key} onSelect={() => field.key && addFilter(field.key)}>\n                                    {field.icon}\n                                    <span>{field.label}</span>\n                                  </CommandItem>\n                                );\n                              })}\n                            </CommandGroup>\n                          );\n                        }\n\n                        // Handle group-level fields (new FilterFieldConfig structure with group property)\n                        if (isGroupLevelField(item)) {\n                          const groupFields = item.fields!.filter((field) => {\n                            // Include separators and labels for display\n                            if (field.type === 'separator') {\n                              return true;\n                            }\n                            // If allowMultiple is true, don't filter out fields that already have filters\n                            if (allowMultiple) {\n                              return true;\n                            }\n                            // Filter out fields that already have filters (default behavior)\n                            return !filters.some((filter) => filter.field === field.key);\n                          });\n\n                          if (groupFields.length === 0) return null;\n\n                          return (\n                            <CommandGroup key={`group-${index}`} heading={item.group || 'Fields'}>\n                              {groupFields.map((field, fieldIndex) => {\n                                // Handle separator\n                                if (field.type === 'separator') {\n                                  return <CommandSeparator key={`separator-${fieldIndex}`} />;\n                                }\n\n                                // Regular field\n                                return (\n                                  <CommandItem key={field.key} onSelect={() => field.key && addFilter(field.key)}>\n                                    {field.icon}\n                                    <span>{field.label}</span>\n                                  </CommandItem>\n                                );\n                              })}\n                            </CommandGroup>\n                          );\n                        }\n\n                        // Handle flat field configuration (backward compatibility)\n                        const field = item as FilterFieldConfig<T>;\n\n                        // Handle separator\n                        if (field.type === 'separator') {\n                          return <CommandSeparator key={`separator-${index}`} />;\n                        }\n\n                        // Regular field\n                        return (\n                          <CommandItem key={field.key} onSelect={() => field.key && addFilter(field.key)}>\n                            {field.icon}\n                            <span>{field.label}</span>\n                          </CommandItem>\n                        );\n                      })}\n                    </CommandList>\n                  </>\n                )}\n              </Command>\n            </PopoverContent>\n          </Popover>\n        )}\n\n        {filters.map((filter) => {\n          const field = fieldsMap[filter.field];\n          if (!field) return null;\n\n          return (\n            <div key={filter.id} className={filterItemVariants({ variant })} data-slot=\"filter-item\">\n              {/* Field Label */}\n              <div className={filterFieldLabelVariants({ variant: variant, size: size, radius: radius })}>\n                {field.icon}\n                {field.label}\n              </div>\n\n              {/* Operator Dropdown */}\n              <FilterOperatorDropdown<T>\n                field={field}\n                operator={filter.operator}\n                values={filter.values}\n                onChange={(operator) => updateFilter(filter.id, { operator })}\n              />\n\n              {/* Value Selector */}\n              <FilterValueSelector<T>\n                field={field}\n                values={filter.values}\n                onChange={(values) => updateFilter(filter.id, { values })}\n                operator={filter.operator}\n              />\n\n              {/* Remove Button */}\n              <FilterRemoveButton onClick={() => removeFilter(filter.id)} />\n            </div>\n          );\n        })}\n      </div>\n    </FilterContext.Provider>\n  );\n}\n\nexport const createFilter = <T = unknown,>(field: string, operator?: string, values: T[] = []): Filter<T> => ({\n  id: `${Date.now()}-${Math.random().toString(36).substring(2, 11)}`,\n  field,\n  operator: operator || 'is',\n  values,\n});\n\nexport const createFilterGroup = <T = unknown,>(\n  id: string,\n  label: string,\n  fields: FilterFieldConfig<T>[],\n  initialFilters: Filter<T>[] = [],\n): FilterGroup<T> => ({\n  id,\n  label,\n  filters: initialFilters,\n  fields,\n});\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/scroll-area.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { ScrollArea as ScrollAreaPrimitive } from 'radix-ui';\n\nfunction ScrollArea({\n  className,\n  viewportClassName,\n  children,\n  viewportRef,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root> & {\n  viewportRef?: React.Ref<HTMLDivElement>;\n  viewportClassName?: string;\n}) {\n  return (\n    <ScrollAreaPrimitive.Root data-slot=\"scroll-area\" className={cn('relative overflow-hidden', className)} {...props}>\n      <ScrollAreaPrimitive.Viewport\n        ref={viewportRef}\n        className={cn('h-full w-full rounded-[inherit]', viewportClassName)}\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  );\n}\n\nfunction ScrollBar({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        'flex touch-none select-none transition-colors',\n        orientation === 'vertical' && 'h-full w-2 border-l border-l-transparent p-[1px]',\n        orientation === 'horizontal' && 'h-2 flex-col border-t border-t-transparent p-[1px]',\n        className,\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  );\n}\n\nexport { ScrollArea, ScrollBar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/dropdown-menu.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Check, ChevronRight, Circle } from 'lucide-react';\nimport { DropdownMenu as DropdownMenuPrimitive } from 'radix-ui';\n\nfunction DropdownMenu({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />;\n}\n\nfunction DropdownMenuPortal({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />;\n}\n\nfunction DropdownMenuTrigger({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return <DropdownMenuPrimitive.Trigger className=\"select-none\" data-slot=\"dropdown-menu-trigger\" {...props} />;\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      className={cn(\n        'flex cursor-default gap-2 select-none items-center rounded-md px-2 py-1.5 text-sm outline-hidden',\n        'focus:bg-accent focus:text-foreground',\n        'data-[state=open]:bg-accent data-[state=open]:text-foreground',\n        'data-[here=true]:bg-accent data-[here=true]:text-foreground',\n        '[&>svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&>svg]:size-4 [&>svg]:shrink-0',\n        inset && 'ps-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRight data-slot=\"dropdown-menu-sub-trigger-indicator\" className=\"ms-auto size-3.5! rtl:rotate-180\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  );\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        'space-y-0.5 z-50 min-w-[8rem] overflow-hidden shadow-md shadow-black/5 rounded-md border border-border bg-popover text-popover-foreground p-2 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'space-y-0.5 z-50 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover p-2 text-popover-foreground shadow-md shadow-black/5 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  );\n}\n\nfunction DropdownMenuGroup({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />;\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean;\n  variant?: 'destructive';\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      className={cn(\n        'text-foreground relative flex cursor-default select-none items-center gap-2 rounded-md px-2 py-1.5 text-sm outline-hidden transition-colors data-disabled:pointer-events-none data-disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n        'focus:bg-accent focus:text-foreground',\n        'data-[active=true]:bg-accent data-[active=true]:text-accent-foreground',\n        inset && 'ps-8',\n        variant === 'destructive' &&\n          'text-destructive hover:text-destructive focus:text-destructive hover:bg-destructive/5 focus:bg-destructive/5 data-[active=true]:bg-destructive/5',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-md py-1.5 ps-8 pe-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50',\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"absolute start-2 flex h-3.5 w-3.5 items-center text-muted-foreground justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Check className=\"h-4 w-4 text-primary\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  );\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-md py-1.5 ps-6 pe-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute start-1.5 flex h-3.5 w-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Circle className=\"h-1.5 w-1.5 fill-primary stroke-primary\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  );\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      className={cn('px-2 py-1.5 text-xs text-muted-foreground font-medium', inset && 'ps-8', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuRadioGroup({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return <DropdownMenuPrimitive.RadioGroup data-slot=\"dropdown-menu-radio-group\" {...props} />;\n}\n\nfunction DropdownMenuSeparator({ className, ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn('-mx-2 my-1.5 h-px bg-muted', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuShortcut({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn('ms-auto text-xs tracking-widest opacity-60', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSub({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />;\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/select.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { isValidElement, ReactNode } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Check, ChevronDown, ChevronUp } from 'lucide-react';\nimport { Select as SelectPrimitive } from 'radix-ui';\n\n// Create a Context for `indicatorPosition` and `indicator` control\nconst SelectContext = React.createContext<{\n  indicatorPosition: 'left' | 'right';\n  indicatorVisibility: boolean;\n  indicator: ReactNode;\n}>({ indicatorPosition: 'left', indicator: null, indicatorVisibility: true });\n\n// Root Component\nconst Select = ({\n  indicatorPosition = 'left',\n  indicatorVisibility = true,\n  indicator,\n  ...props\n}: {\n  indicatorPosition?: 'left' | 'right';\n  indicatorVisibility?: boolean;\n  indicator?: ReactNode;\n} & React.ComponentProps<typeof SelectPrimitive.Root>) => {\n  return (\n    <SelectContext.Provider value={{ indicatorPosition, indicatorVisibility, indicator }}>\n      <SelectPrimitive.Root {...props} />\n    </SelectContext.Provider>\n  );\n};\n\nfunction SelectGroup({ ...props }: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectValue({ ...props }: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n}\n\n// Define size variants for SelectTrigger\nconst selectTriggerVariants = cva(\n  `\n    flex bg-background w-full items-center justify-between outline-none border border-input shadow-xs shadow-black/5 transition-shadow \n    text-foreground data-placeholder:text-muted-foreground focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px] \n    focus-visible:ring-ring/30 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 \n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20\n  `,\n  {\n    variants: {\n      size: {\n        xs: 'h-7 px-2 text-xs gap-1 rounded-md',\n        sm: 'h-8 px-2.5 text-xs gap-1 rounded-md',\n        md: 'h-9 px-3 text-sm gap-1 rounded-md',\n        lg: 'h-10 px-4 text-sm gap-1.5 rounded-md',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nexport interface SelectTriggerProps\n  extends React.ComponentProps<typeof SelectPrimitive.Trigger>,\n    VariantProps<typeof selectTriggerVariants> {}\n\nfunction SelectTrigger({ className, children, size, ...props }: SelectTriggerProps) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      className={cn(selectTriggerVariants({ size }), className)}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDown className=\"h-4 w-4 opacity-60 -me-0.5\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectScrollUpButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <ChevronUp className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <ChevronDown className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover shadow-md shadow-black/5 text-secondary-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1.5 data-[side=left]:-translate-x-1.5 data-[side=right]:translate-x-1.5 data-[side=top]:-translate-y-1.5',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1.5',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  );\n}\n\nfunction SelectLabel({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('py-1.5 ps-8 pe-2 text-xs text-muted-foreground font-medium', className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectItem({ className, children, ...props }: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  const { indicatorPosition, indicatorVisibility, indicator } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 text-sm outline-hidden text-foreground hover:bg-accent focus:bg-accent data-disabled:pointer-events-none data-disabled:opacity-50',\n        indicatorPosition === 'left' ? 'ps-8 pe-2' : 'pe-8 ps-2',\n        className,\n      )}\n      {...props}\n    >\n      {indicatorVisibility &&\n        (indicator && isValidElement(indicator) ? (\n          indicator\n        ) : (\n          <span\n            className={cn(\n              'absolute flex h-3.5 w-3.5 items-center justify-center',\n              indicatorPosition === 'left' ? 'start-2' : 'end-2',\n            )}\n          >\n            <SelectPrimitive.ItemIndicator>\n              <Check className=\"h-4 w-4 text-primary\" />\n            </SelectPrimitive.ItemIndicator>\n          </span>\n        ))}\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectIndicator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ItemIndicator>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <span\n      data-slot=\"select-indicator\"\n      className={cn(\n        'absolute flex top-1/2 -translate-y-1/2 items-center justify-center',\n        indicatorPosition === 'left' ? 'start-2' : 'end-2',\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitive.ItemIndicator>{children}</SelectPrimitive.ItemIndicator>\n    </span>\n  );\n}\n\nfunction SelectSeparator({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('-mx-1.5 my-1.5 h-px bg-border', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectIndicator,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/skeleton.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"skeleton\" className={cn('animate-pulse rounded-md bg-accent', className)} {...props} />;\n}\n\nexport { Skeleton };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/checkbox.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Check, Minus } from 'lucide-react';\nimport { Checkbox as CheckboxPrimitive } from 'radix-ui';\n\n// Define the variants for the Checkbox using cva.\nconst checkboxVariants = cva(\n  `\n    group peer bg-background shrink-0 rounded-md border border-input ring-offset-background focus-visible:outline-none \n    focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 \n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20,\n    data-[state=checked]:bg-primary data-[state=checked]:border-primary data-[state=checked]:text-primary-foreground data-[state=indeterminate]:bg-primary data-[state=indeterminate]:border-primary data-[state=indeterminate]:text-primary-foreground\n    `,\n  {\n    variants: {\n      size: {\n        sm: 'size-4.5 [&_svg]:size-3',\n        md: 'size-5 [&_svg]:size-3.5',\n        lg: 'size-5.5 [&_svg]:size-4',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nfunction Checkbox({\n  className,\n  size,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root> & VariantProps<typeof checkboxVariants>) {\n  return (\n    <CheckboxPrimitive.Root data-slot=\"checkbox\" className={cn(checkboxVariants({ size }), className)} {...props}>\n      <CheckboxPrimitive.Indicator className={cn('flex items-center justify-center text-current')}>\n        <Check className=\"group-data-[state=indeterminate]:hidden\" />\n        <Minus className=\"hidden group-data-[state=indeterminate]:block\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  );\n}\n\nexport { Checkbox };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/command.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Dialog, DialogContent, DialogTitle } from '@/registry/default/ui/dialog';\nimport { type DialogProps } from '@radix-ui/react-dialog';\nimport { Command as CommandPrimitive } from 'cmdk';\nimport { Check, LucideIcon, Search } from 'lucide-react';\n\nfunction Command({ className, ...props }: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      className={cn(\n        'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\ntype CommandDialogProps = DialogProps & { className?: string };\n\nconst CommandDialog = ({ children, className, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className={cn('overflow-hidden p-0 shadow-lg', className)}>\n        <DialogTitle className=\"hidden\" />\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nfunction CommandInput({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div className=\"flex items-center border-border border-b px-3\" cmdk-input-wrapper=\"\" data-slot=\"command-input\">\n      <Search className=\"me-2 h-4 w-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        className={cn(\n          'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-hidden text-foreground placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction CommandList({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CommandEmpty({ ...props }: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return <CommandPrimitive.Empty data-slot=\"command-empty\" className=\"py-6 text-center text-sm\" {...props} />;\n}\n\nfunction CommandGroup({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        'overflow-hidden p-1.5 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CommandSeparator({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn('-mx-1.5 h-px bg-border', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CommandItem({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        'relative flex text-foreground cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\n        '[&_svg:not([role=img]):not([class*=text-])]:opacity-60',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn('ms-auto text-xs tracking-widest text-muted-foreground', className)}\n      {...props}\n    />\n  );\n};\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon; // Allows passing any Lucide icon\n}\n\nfunction CommandCheck({ icon: Icon = Check, className, ...props }: ButtonArrowProps) {\n  return (\n    <Icon\n      data-slot=\"command-check\"\n      data-check=\"true\"\n      className={cn('size-4 ms-auto text-primary', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Command,\n  CommandCheck,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/popover.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Popover as PopoverPrimitive } from 'radix-ui';\n\nfunction Popover({ ...props }: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />;\n}\n\nfunction PopoverTrigger({ ...props }: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;\n}\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.PopoverPortal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'z-50 w-72 rounded-md border border-border bg-popover p-4 text-popover-foreground shadow-md shadow-black/5 outline-hidden data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          className,\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.PopoverPortal>\n  );\n}\n\nfunction PopoverAnchor({ ...props }: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />;\n}\n\nexport { Popover, PopoverContent, PopoverTrigger, PopoverAnchor };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/switch.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Switch as SwitchPrimitive } from 'radix-ui';\n\n// Define a context for `permanent` state\nconst SwitchContext = React.createContext<{ permanent: boolean }>({\n  permanent: false,\n});\n\nconst useSwitchContext = () => {\n  const context = React.useContext(SwitchContext);\n  if (!context) {\n    throw new Error('SwitchIndicator must be used within a Switch component');\n  }\n  return context;\n};\n\n// Define classes for variants\nconst switchVariants = cva(\n  `\n    relative peer inline-flex shrink-0 cursor-pointer items-center rounded-full transition-colors \n    focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background \n    disabled:cursor-not-allowed disabled:opacity-50 data-[state=unchecked]:bg-input\n    aria-invalid:border aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20\n  `,\n  {\n    variants: {\n      shape: {\n        pill: 'rounded-full',\n        square: 'rounded-md',\n      },\n      size: {\n        sm: 'h-5 w-8',\n        md: 'h-6 w-10',\n        lg: 'h-8 w-14',\n        xl: 'h-9 w-16',\n      },\n      permanent: {\n        true: 'bg-input',\n        false: 'data-[state=checked]:bg-primary',\n      },\n    },\n    defaultVariants: {\n      shape: 'pill',\n      permanent: false,\n      size: 'md',\n    },\n  },\n);\n\nconst switchThumbVariants = cva(\n  'pointer-events-none block bg-white w-1/2 h-[calc(100%-4px)] shadow-lg ring-0 transition-transform start-0 data-[state=unchecked]:translate-x-[2px] data-[state=checked]:translate-x-[calc(100%-2px)] rtl:data-[state=unchecked]:-translate-x-[2px] rtl:data-[state=checked]:-translate-x-[calc(100%-2px)]',\n  {\n    variants: {\n      shape: {\n        pill: 'rounded-full',\n        square: 'rounded-md',\n      },\n      size: {\n        xs: '',\n        sm: '',\n        md: '',\n        lg: '',\n        xl: '',\n      },\n    },\n    compoundVariants: [\n      {\n        shape: 'square',\n        size: 'xs',\n        className: 'rounded-sm',\n      },\n    ],\n    defaultVariants: {\n      shape: 'pill',\n      size: 'md',\n    },\n  },\n);\n\nconst switchIndicatorVariants = cva(\n  'text-sm font-medium absolute mx-[2px] top-1/2 w-1/2 -translate-y-1/2 flex pointer-events-none items-center justify-center text-center transition-transform duration-300 [transition-timing-function:cubic-bezier(0.16,1,0.3,1)]',\n  {\n    variants: {\n      state: {\n        on: 'start-0',\n        off: 'end-0',\n      },\n      permanent: {\n        true: '',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      {\n        state: 'on',\n        permanent: false,\n        className:\n          'text-primary-foreground peer-data-[state=unchecked]:invisible peer-data-[state=unchecked]:translate-x-full rtl:peer-data-[state=unchecked]:-translate-x-full',\n      },\n      {\n        state: 'off',\n        permanent: false,\n        className:\n          'peer-data-[state=checked]:invisible -translate-x-full rtl:translate-x-full peer-data-[state=unchecked]:translate-x-0',\n      },\n      {\n        state: 'on',\n        permanent: true,\n        className: 'start-0',\n      },\n      {\n        state: 'off',\n        permanent: true,\n        className: 'end-0',\n      },\n    ],\n    defaultVariants: {\n      state: 'off',\n      permanent: false,\n    },\n  },\n);\n\nfunction SwitchWrapper({\n  className,\n  children,\n  permanent = false,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & { permanent?: boolean }) {\n  return (\n    <SwitchContext.Provider value={{ permanent }}>\n      <div data-slot=\"switch-wrapper\" className={cn('relative inline-flex items-center', className)} {...props}>\n        {children}\n      </div>\n    </SwitchContext.Provider>\n  );\n}\n\nfunction Switch({\n  className,\n  thumbClassName = '',\n  shape,\n  size,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root> &\n  VariantProps<typeof switchVariants> & { thumbClassName?: string }) {\n  const context = useSwitchContext();\n  const permanent = context?.permanent ?? false;\n\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(switchVariants({ shape, size, permanent }), className)}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb className={cn(switchThumbVariants({ shape, size }), thumbClassName)} />\n    </SwitchPrimitive.Root>\n  );\n}\n\nfunction SwitchIndicator({\n  className,\n  state,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement> & VariantProps<typeof switchIndicatorVariants>) {\n  const context = useSwitchContext();\n  const permanent = context?.permanent ?? false;\n\n  return (\n    <span\n      data-slot=\"switch-indicator\"\n      className={cn(switchIndicatorVariants({ state, permanent }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Switch, SwitchIndicator, SwitchWrapper };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/tooltip.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { cn } from '@/lib/utils';\n\nfunction TooltipProvider({ delayDuration = 0, ...props }: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return <TooltipPrimitive.Provider data-slot=\"tooltip-provider\" delayDuration={delayDuration} {...props} />;\n}\n\nfunction Tooltip({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-foreground text-background animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-foreground fill-foreground z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/dialog.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\nimport { Dialog as DialogPrimitive } from 'radix-ui';\n\nconst dialogContentVariants = cva(\n  'flex flex-col fixed outline-0 z-50 border border-border bg-background p-6 shadow-lg shadow-black/5 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 sm:rounded-lg',\n  {\n    variants: {\n      variant: {\n        default: 'left-[50%] top-[50%] max-w-lg translate-x-[-50%] translate-y-[-50%] w-full',\n        fullscreen: 'inset-5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Dialog({ ...props }: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\n}\n\nfunction DialogTrigger({ ...props }: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\n}\n\nfunction DialogPortal({ ...props }: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;\n}\n\nfunction DialogClose({ ...props }: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;\n}\n\nfunction DialogOverlay({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'fixed inset-0 z-50 bg-black/30 [backdrop-filter:blur(4px)] data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  overlay = true,\n  variant,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> &\n  VariantProps<typeof dialogContentVariants> & {\n    showCloseButton?: boolean;\n    overlay?: boolean;\n  }) {\n  return (\n    <DialogPortal>\n      {overlay && <DialogOverlay />}\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(dialogContentVariants({ variant }), className)}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogClose className=\"cursor-pointer outline-0 absolute end-5 top-5 rounded-sm opacity-60 ring-offset-background transition-opacity hover:opacity-100 focus:outline-hidden disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n            <X className=\"size-4\" />\n            <span className=\"sr-only\">Close</span>\n          </DialogClose>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n}\n\nexport default DialogContent;\n\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    data-slot=\"dialog-header\"\n    className={cn('flex flex-col space-y-1 text-center sm:text-start mb-5', className)}\n    {...props}\n  />\n);\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    data-slot=\"dialog-footer\"\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end pt-5 sm:space-x-2.5', className)}\n    {...props}\n  />\n);\n\nfunction DialogTitle({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn('text-lg font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nconst DialogBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div data-slot=\"dialog-body\" className={cn('grow', className)} {...props} />\n);\n\nfunction DialogDescription({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Dialog,\n  DialogBody,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}