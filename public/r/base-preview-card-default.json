{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-preview-card-default",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "radix-ui",
    "@base-ui-components/react"
  ],
  "registryDependencies": [
    "https://reui.io/r/avatar.json",
    "https://reui.io/r/base-preview-card.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-preview-card/default.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from '@/registry/default/ui/avatar';\nimport { PreviewCard, PreviewCardContent, PreviewCardTrigger } from '@/registry/default/ui/base-preview-card';\n\nexport default function BasePreviewCardDefault() {\n  return (\n    <PreviewCard>\n      <PreviewCardTrigger className=\"text-sm\">\n        Learn more about <span className=\"text-primary underline underline-offset-4 cursor-help\">@reui_io</span>.\n      </PreviewCardTrigger>\n      <PreviewCardContent className=\"w-80\">\n        <div className=\"flex justify-between gap-4\">\n          <Avatar>\n            <AvatarImage src=\"https://reui.io/brand/logo-default.png\" />\n            <AvatarFallback>RE</AvatarFallback>\n          </Avatar>\n          <div className=\"space-y-1\">\n            <h4 className=\"text-sm font-semibold\">@reui_io</h4>\n            <p className=\"text-sm\">\n              Open-source collection of UI components and animated effects built with React, Typescript, Tailwind CSS,\n              and Motion.\n            </p>\n          </div>\n        </div>\n      </PreviewCardContent>\n    </PreviewCard>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/avatar.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Avatar as AvatarPrimitive } from 'radix-ui';\n\nconst avatarStatusVariants = cva('flex items-center rounded-full size-2 border-2 border-background', {\n  variants: {\n    variant: {\n      online: 'bg-green-600',\n      offline: 'bg-zinc-400 dark:bg-zinc-500',\n      busy: 'bg-yellow-600',\n      away: 'bg-blue-600',\n    },\n  },\n  defaultVariants: {\n    variant: 'online',\n  },\n});\n\nfunction Avatar({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root data-slot=\"avatar\" className={cn('relative flex shrink-0 size-10', className)} {...props} />\n  );\n}\n\nfunction AvatarImage({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <div className={cn('relative overflow-hidden rounded-full', className)}>\n      <AvatarPrimitive.Image data-slot=\"avatar-image\" className={cn('aspect-square h-full w-full')} {...props} />\n    </div>\n  );\n}\n\nfunction AvatarFallback({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'flex h-full w-full items-center justify-center rounded-full border border-border bg-accent text-accent-foreground text-xs',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarIndicator({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"avatar-indicator\"\n      className={cn('absolute flex size-6 items-center justify-center', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarStatus({\n  className,\n  variant,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof avatarStatusVariants>) {\n  return <div data-slot=\"avatar-status\" className={cn(avatarStatusVariants({ variant }), className)} {...props} />;\n}\n\nexport { Avatar, AvatarFallback, AvatarImage, AvatarIndicator, AvatarStatus, avatarStatusVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-preview-card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { PreviewCard as BasePreviewCard } from '@base-ui-components/react';\n\nfunction PreviewCard({ ...props }: React.ComponentProps<typeof BasePreviewCard.Root>) {\n  return <BasePreviewCard.Root delay={0} closeDelay={0} data-slot=\"preview-card\" {...props} />;\n}\n\nfunction PreviewCardTrigger({ ...props }: React.ComponentProps<typeof BasePreviewCard.Trigger>) {\n  return <BasePreviewCard.Trigger data-slot=\"preview-card-trigger\" {...props} />;\n}\n\nfunction PreviewCardPortal({ ...props }: React.ComponentProps<typeof BasePreviewCard.Portal>) {\n  return <BasePreviewCard.Portal data-slot=\"preview-card-portal\" {...props} />;\n}\n\nfunction PreviewCardPopup({ className, children, ...props }: React.ComponentProps<typeof BasePreviewCard.Popup>) {\n  return (\n    <BasePreviewCard.Popup\n      data-slot=\"preview-card-popup\"\n      className={cn(\n        'bg-popover text-popover-foreground outline-border z-50 w-64 origin-[var(--transform-origin)] rounded-md p-4 shadow-md outline -outline-offset-1 transition-[transform,scale,opacity] data-[ending-style]:scale-95 data-[ending-style]:opacity-0 data-[starting-style]:scale-95 data-[starting-style]:opacity-0',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </BasePreviewCard.Popup>\n  );\n}\n\nfunction PreviewCardPositioner({ ...props }: React.ComponentProps<typeof BasePreviewCard.Positioner>) {\n  return <BasePreviewCard.Positioner data-slot=\"preview-card-positioner\" {...props} />;\n}\n\nfunction PreviewCardArrow({ className, ...props }: React.ComponentProps<typeof BasePreviewCard.Arrow>) {\n  return (\n    <BasePreviewCard.Arrow\n      className={cn(\n        'data-[side=bottom]:top-[-8px] data-[side=left]:right-[-13px] data-[side=left]:rotate-90 data-[side=right]:left-[-13px] data-[side=right]:-rotate-90 data-[side=top]:bottom-[-8px] data-[side=top]:rotate-180',\n        className,\n      )}\n      {...props}\n    >\n      <svg width=\"20\" height=\"10\" viewBox=\"0 0 20 10\" fill=\"none\">\n        <path\n          d=\"M9.66437 2.60207L4.80758 6.97318C4.07308 7.63423 3.11989 8 2.13172 8H0V9H20V8H18.5349C17.5468 8 16.5936 7.63423 15.8591 6.97318L11.0023 2.60207C10.622 2.2598 10.0447 2.25979 9.66437 2.60207Z\"\n          className=\"fill-popover\"\n        />\n        <path\n          d=\"M10.3333 3.34539L5.47654 7.71648C4.55842 8.54279 3.36693 9 2.13172 9H0V8H2.13172C3.11989 8 4.07308 7.63423 4.80758 6.97318L9.66437 2.60207C10.0447 2.25979 10.622 2.2598 11.0023 2.60207L15.8591 6.97318C16.5936 7.63423 17.5468 8 18.5349 8H20V9H18.5349C17.2998 9 16.1083 8.54278 15.1901 7.71648L10.3333 3.34539Z\"\n          className=\"fill-border\"\n        />\n      </svg>\n    </BasePreviewCard.Arrow>\n  );\n}\n\nfunction PreviewCardContent({\n  className,\n  children,\n  align = 'center',\n  sideOffset = 8,\n  side = 'bottom',\n  alignOffset = 0,\n  showArrow = true,\n  ...props\n}: React.ComponentProps<typeof BasePreviewCard.Popup> & {\n  align?: BasePreviewCard.Positioner.Props['align'];\n  sideOffset?: BasePreviewCard.Positioner.Props['sideOffset'];\n  side?: BasePreviewCard.Positioner.Props['side'];\n  alignOffset?: BasePreviewCard.Positioner.Props['alignOffset'];\n  showArrow?: boolean;\n}) {\n  return (\n    <PreviewCardPortal>\n      <PreviewCardPositioner sideOffset={sideOffset} align={align} side={side} alignOffset={alignOffset}>\n        <PreviewCardPopup className={className} {...props}>\n          {showArrow && <PreviewCardArrow />}\n          {children}\n        </PreviewCardPopup>\n      </PreviewCardPositioner>\n    </PreviewCardPortal>\n  );\n}\n\nexport { PreviewCard, PreviewCardTrigger, PreviewCardContent };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}