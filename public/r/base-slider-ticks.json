{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-slider-ticks",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "@base-ui-components/react"
  ],
  "registryDependencies": [
    "https://reui.io/r/base-label.json",
    "https://reui.io/r/base-slider.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-slider/ticks.tsx",
      "content": "import { cn } from '@/registry/default/lib/utils';\nimport { Label } from '@/registry/default/ui/base-label';\nimport { Slider, SliderThumb } from '@/registry/default/ui/base-slider';\n\nexport default function Component() {\n  const max = 12;\n  const skipInterval = 2; // Set to 1 to allow no text skipping\n  const ticks = [...Array(max + 1)].map((_, i) => i);\n\n  return (\n    <div className=\"*:not-first:mt-4 w-full max-w-xs\">\n      <Label>Slider with ticks</Label>\n      <div>\n        <Slider defaultValue={[5]} max={max} aria-label=\"Slider with ticks\">\n          <SliderThumb />\n        </Slider>\n        <span\n          className=\"text-muted-foreground mt-3 flex w-full items-center justify-between gap-1.125 px-0.5 text-xs font-medium\"\n          aria-hidden=\"true\"\n        >\n          {ticks.map((_, i) => (\n            <span key={i} className=\"flex w-0 flex-col items-center justify-center gap-2\">\n              <span className={cn('bg-muted-foreground/70 h-1 w-px', i % skipInterval !== 0 && 'h-0.5')} />\n              <span className={cn(i % skipInterval !== 0 && 'opacity-0')}>{i}</span>\n            </span>\n          ))}\n        </span>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({ className, variant, ...props }: React.ComponentProps<'label'> & VariantProps<typeof labelVariants>) {\n  return <label data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-slider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/registry/default/ui/base-tooltip';\nimport { Slider as SliderPrimitive } from '@base-ui-components/react/slider';\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  showTooltip = false,\n  tooltipContent,\n  onValueChange,\n  children,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root> & {\n  showTooltip?: boolean;\n  tooltipContent?: (value: number) => React.ReactNode;\n  tooltipVariant?: 'dark' | 'light';\n}) {\n  const [internalValues, setInternalValues] = React.useState<number[]>(\n    Array.isArray(value) ? value : Array.isArray(defaultValue) ? defaultValue : [min, max],\n  );\n\n  React.useEffect(() => {\n    if (value !== undefined) {\n      setInternalValues(Array.isArray(value) ? value : [value]);\n    }\n  }, [value]);\n\n  const handleValueChange = (\n    newValue: number | readonly number[],\n    eventDetails: {\n      reason: 'none';\n      event: Event;\n      cancel: () => void;\n      allowPropagation: () => void;\n      isCanceled: boolean;\n      isPropagationAllowed: boolean;\n    },\n    activeThumbIndex: number,\n  ) => {\n    const values = Array.isArray(newValue) ? [...newValue] : [newValue];\n    setInternalValues(values);\n    if (onValueChange) {\n      onValueChange(values, eventDetails, activeThumbIndex);\n    }\n  };\n\n  const [showTooltipState, setShowTooltipState] = React.useState(false);\n\n  const handlePointerDown = () => {\n    if (showTooltip) {\n      setShowTooltipState(true);\n    }\n  };\n\n  const handlePointerUp = React.useCallback(() => {\n    if (showTooltip) {\n      setShowTooltipState(false);\n    }\n  }, [showTooltip]);\n\n  React.useEffect(() => {\n    if (showTooltip) {\n      document.addEventListener('pointerup', handlePointerUp);\n      return () => {\n        document.removeEventListener('pointerup', handlePointerUp);\n      };\n    }\n  }, [showTooltip, handlePointerUp]);\n\n  const renderThumb = (thumbValue: number, index: number) => {\n    const thumb = (\n      <SliderPrimitive.Thumb\n        key={index}\n        data-slot=\"slider-thumb\"\n        className={cn(\n          'border-primary bg-background ring-ring/20 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] outline-none hover:ring-4 data-[focused]:ring-4 data-[touched]:ring-4 data-[dragging]:ring-4 disabled:pointer-events-none disabled:opacity-50',\n        )}\n        onPointerDown={handlePointerDown}\n      />\n    );\n\n    if (!showTooltip) return thumb;\n\n    return (\n      <TooltipProvider key={index}>\n        <Tooltip open={showTooltipState}>\n          <TooltipTrigger render={thumb} />\n          <TooltipContent\n            className=\"px-2 py-1 text-xs\"\n            sideOffset={8}\n            side={props.orientation === 'vertical' ? 'right' : 'top'}\n          >\n            <p>{tooltipContent ? tooltipContent(thumbValue) : thumbValue}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  };\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        'relative flex w-full touch-none select-none items-center data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',\n        className,\n      )}\n      onValueChange={handleValueChange}\n      {...props}\n    >\n      <SliderPrimitive.Control className=\"relative flex h-4 w-full touch-none select-none items-center data-[orientation=vertical]:h-full data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\">\n        <SliderPrimitive.Track className=\"relative h-1.5 w-full overflow-hidden rounded-full bg-accent data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\">\n          <SliderPrimitive.Indicator className=\"absolute h-full bg-primary data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\" />\n        </SliderPrimitive.Track>\n        {showTooltip ? internalValues.map((thumbValue, index) => renderThumb(thumbValue, index)) : children}\n      </SliderPrimitive.Control>\n    </SliderPrimitive.Root>\n  );\n}\n\nfunction SliderThumb({ className, ...props }: React.ComponentProps<typeof SliderPrimitive.Thumb>) {\n  return (\n    <SliderPrimitive.Thumb\n      data-slot=\"slider-thumb\"\n      className={cn(\n        'border-primary bg-background ring-ring/20 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] outline-none hover:ring-4 data-[focused]:ring-4 data-[touched]:ring-4 data-[dragging]:ring-4 disabled:pointer-events-none disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Slider, SliderThumb };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-tooltip.tsx",
      "content": "import * as React from 'react';\nimport { Tooltip as TooltipPrimitive } from '@base-ui-components/react/tooltip';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nfunction TooltipProvider({ delay = 0, ...props }: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return <TooltipPrimitive.Provider data-slot=\"tooltip-provider\" delay={delay} {...props} />;\n}\n\nfunction Tooltip({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />;\n}\n\nfunction TooltipTrigger({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nconst tooltipVariants = cva(\n  'z-55 animate-in fade-in-0 zoom-in-95 data-[closed]:animate-out data-[closed]:fade-out-0 data-[closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n  {\n    variants: {\n      variant: {\n        default:\n          'dark:border dark:border-border bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black shadow-md shadow-black/5',\n        light: 'border border-border bg-background text-foreground shadow-md shadow-black/5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nexport interface TooltipContentProps\n  extends React.ComponentProps<typeof TooltipPrimitive.Popup>,\n    VariantProps<typeof tooltipVariants> {\n  sideOffset?: TooltipPrimitive.Positioner.Props['sideOffset'];\n  side?: TooltipPrimitive.Positioner.Props['side'];\n  align?: TooltipPrimitive.Positioner.Props['align'];\n  alignOffset?: TooltipPrimitive.Positioner.Props['alignOffset'];\n  showArrow?: boolean;\n}\n\nfunction TooltipContent({\n  className,\n  children,\n  variant,\n  sideOffset = 8,\n  showArrow = true,\n  align,\n  alignOffset = 0,\n  side,\n  ...props\n}: TooltipContentProps) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Positioner\n        data-slot=\"tooltip-positioner\"\n        sideOffset={sideOffset}\n        side={side}\n        align={align}\n        alignOffset={alignOffset}\n        className=\"z-50\"\n      >\n        <TooltipPrimitive.Popup\n          data-slot=\"tooltip-content\"\n          className={cn(tooltipVariants({ variant }), className)}\n          {...props}\n        >\n          {children}\n          {showArrow && <TooltipArrow variant={variant} />}\n        </TooltipPrimitive.Popup>\n      </TooltipPrimitive.Positioner>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nconst tooltipArrowBackgroundVariants = cva('', {\n  variants: {\n    variant: {\n      default: 'fill-zinc-950 dark:fill-zinc-300',\n      light: 'fill-background',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst tooltipArrowStrokeVariants = cva('', {\n  variants: {\n    variant: {\n      default: '',\n      light: 'stroke-background stroke-border',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nexport interface TooltipArrowProps\n  extends React.ComponentProps<typeof TooltipPrimitive.Arrow>,\n    VariantProps<typeof tooltipArrowBackgroundVariants> {}\n\nfunction TooltipArrow({ className, variant, ...props }: TooltipArrowProps) {\n  return (\n    <TooltipPrimitive.Arrow\n      data-slot=\"tooltip-arrow\"\n      className={cn(\n        'z-50 data-[side=bottom]:top-[-8px] data-[side=left]:right-[-13px] data-[side=left]:rotate-90 data-[side=right]:left-[-13px] data-[side=right]:-rotate-90 data-[side=top]:bottom-[-8px] data-[side=top]:rotate-180',\n        className,\n      )}\n      {...props}\n    >\n      <svg width=\"20\" height=\"10\" viewBox=\"0 0 20 10\" fill=\"none\">\n        <path\n          d=\"M9.66437 2.60207L4.80758 6.97318C4.07308 7.63423 3.11989 8 2.13172 8H0V9H20V8H18.5349C17.5468 8 16.5936 7.63423 15.8591 6.97318L11.0023 2.60207C10.622 2.2598 10.0447 2.25979 9.66437 2.60207Z\"\n          className={cn(tooltipArrowBackgroundVariants({ variant }))}\n        />\n        <path\n          d=\"M10.3333 3.34539L5.47654 7.71648C4.55842 8.54279 3.36693 9 2.13172 9H0V8H2.13172C3.11989 8 4.07308 7.63423 4.80758 6.97318L9.66437 2.60207C10.0447 2.25979 10.622 2.2598 11.0023 2.60207L15.8591 6.97318C16.5936 7.63423 17.5468 8 18.5349 8H20V9H18.5349C17.2998 9 16.1083 8.54278 15.1901 7.71648L10.3333 3.34539Z\"\n          className={cn(tooltipArrowStrokeVariants({ variant }))}\n        />\n      </svg>\n    </TooltipPrimitive.Arrow>\n  );\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider, TooltipArrow, tooltipVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}