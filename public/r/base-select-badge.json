{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-select-badge",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "radix-ui",
    "@base-ui-components/react",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://reui.io/r/badge.json",
    "https://reui.io/r/base-select.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-select/badge.tsx",
      "content": "import { useState } from 'react';\nimport { Badge } from '@/registry/default/ui/badge';\nimport {\n  Select,\n  SelectClear,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/registry/default/ui/base-select';\nimport { VariantProps } from 'class-variance-authority';\nimport { badgeVariants } from '../../ui/base-badge';\n\ntype Item = {\n  label: string;\n  state: VariantProps<typeof badgeVariants>['variant'];\n  value: string | null;\n};\n\nconst items: Item[] = [\n  {\n    label: 'In Progress',\n    state: 'primary',\n    value: '1',\n  },\n  {\n    label: 'Completed',\n    value: '2',\n    state: 'success',\n  },\n  {\n    label: 'Pending',\n    value: '3',\n    state: 'info',\n  },\n  {\n    label: 'Cancelled',\n    value: '4',\n    state: 'destructive',\n  },\n  {\n    label: 'Rejected',\n    value: '5',\n    state: 'warning',\n  },\n];\n\nexport default function BaseSelectDemo() {\n  const [value, setValue] = useState<string | null>(null);\n  const selectedItem = items.find((item) => item.value === value) || null;\n\n  const renderValue = (item: Item | null) => {\n    return item ? (\n      <Badge variant={item.state} size=\"sm\" appearance=\"outline\">\n        {item.label}\n      </Badge>\n    ) : (\n      <span>Select a status</span>\n    );\n  };\n  return (\n    <Select value={value} onValueChange={(value) => setValue(value as string | null)} indicatorPosition=\"right\">\n      <SelectTrigger className=\"w-60\">\n        <SelectValue>{renderValue(selectedItem)}</SelectValue>\n        {value && <SelectClear onClick={() => setValue(null)} />}\n      </SelectTrigger>\n      <SelectContent>\n        {items.map((item) => (\n          <SelectItem key={item.value} value={item.value}>\n            <Badge variant={item.state} size=\"sm\" appearance=\"outline\">\n              {item.label}\n            </Badge>\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/badge.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Slot as SlotPrimitive } from 'radix-ui';\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n  dotClassName?: string;\n  disabled?: boolean;\n}\n\nexport interface BadgeButtonProps\n  extends React.ButtonHTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeButtonVariants> {\n  asChild?: boolean;\n}\n\nexport type BadgeDotProps = React.HTMLAttributes<HTMLSpanElement>;\n\nconst badgeVariants = cva(\n  'inline-flex items-center whitespace-nowrap justify-center border border-transparent font-medium focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 [&_svg]:-ms-px [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground',\n        secondary: 'bg-secondary text-secondary-foreground',\n        success:\n          'bg-[var(--color-success-accent,var(--color-green-500))] text-[var(--color-success-foreground,var(--color-white))]',\n        warning:\n          'bg-[var(--color-warning-accent,var(--color-yellow-500))] text-[var(--color-warning-foreground,var(--color-white))]',\n        info: 'bg-[var(--color-info-accent,var(--color-violet-500))] text-[var(--color-info-foreground,var(--color-white))]',\n        outline: 'bg-transparent border border-border text-secondary-foreground',\n        destructive: 'bg-destructive text-destructive-foreground',\n      },\n      appearance: {\n        default: '',\n        light: '',\n        outline: '',\n        ghost: 'border-transparent bg-transparent',\n      },\n      disabled: {\n        true: 'opacity-50 pointer-events-none',\n      },\n      size: {\n        lg: 'rounded-md px-[0.5rem] h-7 min-w-7 gap-1.5 text-xs [&_svg]:size-3.5',\n        md: 'rounded-md px-[0.45rem] h-6 min-w-6 gap-1.5 text-xs [&_svg]:size-3.5 ',\n        sm: 'rounded-sm px-[0.325rem] h-5 min-w-5 gap-1 text-[0.6875rem] leading-[0.75rem] [&_svg]:size-3',\n        xs: 'rounded-sm px-[0.25rem] h-4 min-w-4 gap-1 text-[0.625rem] leading-[0.5rem] [&_svg]:size-3',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n    },\n    compoundVariants: [\n      /* Light */\n      {\n        variant: 'primary',\n        appearance: 'light',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'light',\n        className: 'bg-secondary dark:bg-secondary/50 text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'light',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-800))] bg-[var(--color-success-soft,var(--color-green-100))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'light',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] bg-[var(--color-warning-soft,var(--color-yellow-100))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'light',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] bg-[var(--color-info-soft,var(--color-violet-100))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'light',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Outline */\n      {\n        variant: 'primary',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] border-[var(--color-primary-soft,var(--color-blue-100))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:border-[var(--color-primary-soft,var(--color-blue-900))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'success',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-700))] border-[var(--color-success-soft,var(--color-green-200))] bg-[var(--color-success-soft,var(--color-green-50))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:border-[var(--color-success-soft,var(--color-green-900))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] border-[var(--color-warning-soft,var(--color-yellow-200))] bg-[var(--color-warning-soft,var(--color-yellow-50))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:border-[var(--color-warning-soft,var(--color-yellow-900))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] border-[var(--color-info-soft,var(--color-violet-100))] bg-[var(--color-info-soft,var(--color-violet-50))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:border-[var(--color-info-soft,var(--color-violet-900))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] border-[var(--color-destructive-soft,var(--color-red-100))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:border-[var(--color-destructive-soft,var(--color-red-900))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Ghost */\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'ghost',\n        className: 'text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'ghost',\n        className: 'text-[var(--color-success-accent,var(--color-green-500))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'ghost',\n        className: 'text-[var(--color-warning-accent,var(--color-yellow-500))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'ghost',\n        className: 'text-[var(--color-info-accent,var(--color-violet-500))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'text-destructive',\n      },\n\n      { size: 'lg', appearance: 'ghost', className: 'px-0' },\n      { size: 'md', appearance: 'ghost', className: 'px-0' },\n      { size: 'sm', appearance: 'ghost', className: 'px-0' },\n      { size: 'xs', appearance: 'ghost', className: 'px-0' },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      appearance: 'default',\n      size: 'md',\n    },\n  },\n);\n\nconst badgeButtonVariants = cva(\n  'cursor-pointer transition-all inline-flex items-center justify-center leading-none size-3.5 [&>svg]:opacity-100! [&>svg]:size-3.5! p-0 rounded-md -me-0.5 opacity-60 hover:opacity-100',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  size,\n  appearance,\n  shape,\n  asChild = false,\n  disabled,\n  ...props\n}: React.ComponentProps<'span'> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'span';\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant, size, appearance, shape, disabled }), className)}\n      {...props}\n    />\n  );\n}\n\nfunction BadgeButton({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> & VariantProps<typeof badgeButtonVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'span';\n  return (\n    <Comp\n      data-slot=\"badge-button\"\n      className={cn(badgeButtonVariants({ variant, className }))}\n      role=\"button\"\n      {...props}\n    />\n  );\n}\n\nfunction BadgeDot({ className, ...props }: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"badge-dot\"\n      className={cn('size-1.5 rounded-full bg-[currentColor] opacity-75', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, BadgeButton, BadgeDot, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-select.tsx",
      "content": "import * as React from 'react';\nimport { isValidElement, ReactNode } from 'react';\nimport { Select as SelectPrimitive } from '@base-ui-components/react/select';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon, X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Create a Context for `indicatorPosition` and `indicator` control\nconst SelectContext = React.createContext<{\n  indicatorPosition: 'left' | 'right';\n  indicatorVisibility: boolean;\n  indicator: ReactNode;\n  icon: ReactNode;\n}>({ indicatorPosition: 'left', indicator: null, indicatorVisibility: true, icon: null });\n\n// Root Component\nconst Select = ({\n  indicatorPosition = 'left',\n  indicatorVisibility = true,\n  indicator,\n  icon,\n  ...props\n}: {\n  indicatorPosition?: 'left' | 'right';\n  indicatorVisibility?: boolean;\n  indicator?: ReactNode;\n  icon?: ReactNode;\n} & React.ComponentProps<typeof SelectPrimitive.Root>) => {\n  return (\n    <SelectContext.Provider value={{ indicatorPosition, indicatorVisibility, indicator, icon }}>\n      <SelectPrimitive.Root data-slot=\"select\" {...props} />\n    </SelectContext.Provider>\n  );\n};\n\nfunction SelectGroup({ ...props }: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectPortal({ ...props }: React.ComponentProps<typeof SelectPrimitive.Portal>) {\n  return <SelectPrimitive.Portal data-slot=\"select-portal\" {...props} />;\n}\n\nfunction SelectPositioner({ ...props }: React.ComponentProps<typeof SelectPrimitive.Positioner>) {\n  return <SelectPrimitive.Positioner data-slot=\"select-positioner\" {...props} />;\n}\n\nfunction SelectValue({\n  placeholder,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value> & {\n  placeholder?: string;\n}) {\n  if (!placeholder) {\n    return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n  }\n\n  return (\n    <SelectPrimitive.Value\n      className=\"text-sm\"\n      render={(_, { value }) => {\n        if (value) {\n          return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n        }\n\n        // Placeholder\n        return (\n          <span data-slot=\"select-value\" className=\"text-muted-foreground\">\n            {placeholder}\n          </span>\n        );\n      }}\n      {...props}\n    />\n  );\n}\n\n// Clear - A button to clear the input value\nfunction SelectClear({ className, children, onClick, ...props }: React.ComponentProps<'button'>) {\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    onClick?.(event);\n  };\n\n  return (\n    <button\n      data-slot=\"select-clear\"\n      className={cn(\n        `\n\t\t\t\t\tcursor-pointer absolute top-1/2 -translate-y-1/2 end-2 \n\t\t\t\t\trounded-sm opacity-60 hover:opacity-100 transition-opacity \t\t\t\t\t\n\t\t\t\t\tfocus:outline-none focus:ring-0 focus:ring-offset-0 \n\t\t\t\t\tdisabled:pointer-events-none data-[disabled]:pointer-events-none \n\t\t\t\t`,\n        className,\n      )}\n      onClick={handleClick}\n      {...props}\n    >\n      {children ? children : <X />}\n    </button>\n  );\n}\n\n// Define size variants for SelectTrigger\nconst selectTriggerVariants = cva(\n  `\n\t\tgroup relative flex w-fit items-center justify-between gap-2 rounded-md border whitespace-nowrap select-none\n\t\tshadow-xs transition-[color,box-shadow,border-color] outline-none\n\t\tfocus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\n\t\taria-invalid:ring-destructive/50 aria-invalid:border-destructive\n\t\tdata-[disabled]:pointer-events-none data-[disabled]:opacity-60\n\t\t*:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2\n\t\t[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='text-'])]:text-muted-foreground\n\t`,\n  {\n    variants: {\n      size: {\n        sm: `\n\t\t\t\t\th-7 px-2.5 text-xs gap-1 rounded-md\n\t\t\t\t\t[&_[data-slot=select-icon]]:size-3.5 [&_[data-slot=select-icon]]:-me-0.75\n\t\t\t\t\t[&_[data-slot=select-clear]>svg]:size-3 [&_[data-slot=select-clear]]:end-6\n\t\t\t\t`,\n        md: `\n\t\t\t\t\th-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) gap-1 rounded-md\n\t\t\t\t\t[&_[data-slot=select-icon]]:size-4 [&_[data-slot=select-icon]]:-me-1\n\t\t\t\t\t[&_[data-slot=select-clear]>svg]:size-3.5 [&_[data-slot=select-clear]]:end-7\n\t\t\t\t`,\n        lg: `\n\t\t\t\t\th-10 px-4 text-sm gap-1.5 rounded-md\n\t\t\t\t\t[&_[data-slot=select-icon]]:size-4 [&_[data-slot=select-icon]]:-me-1.25\n\t\t\t\t\t[&_[data-slot=select-clear]>svg]:size-3.5 [&_[data-slot=select-clear]]:end-8\n\t\t\t\t`,\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nexport interface SelectTriggerProps\n  extends React.ComponentProps<typeof SelectPrimitive.Trigger>,\n    VariantProps<typeof selectTriggerVariants> {}\n\nfunction SelectTrigger({ className, children, size, ...props }: SelectTriggerProps) {\n  const { icon } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      className={cn(selectTriggerVariants({ size }), className)}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon>\n        {icon && isValidElement(icon) ? (\n          icon\n        ) : (\n          <ChevronDownIcon data-slot=\"select-icon\" className=\"opacity-60 transition-transform duration-200\" />\n        )}\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  side = 'bottom',\n  sideOffset = 2,\n  align = 'start',\n  alignOffset = 0,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Popup> & {\n  sideOffset?: SelectPrimitive.Positioner.Props['sideOffset'];\n  side?: SelectPrimitive.Positioner.Props['side'];\n  align?: SelectPrimitive.Positioner.Props['align'];\n  alignOffset?: SelectPrimitive.Positioner.Props['alignOffset'];\n  position?: 'popper' | 'item-aligned';\n}) {\n  return (\n    <SelectPortal>\n      <SelectPositioner\n        sideOffset={sideOffset}\n        alignItemWithTrigger={position === 'item-aligned'}\n        side={side}\n        align={align}\n        alignOffset={alignOffset}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Popup\n          data-slot=\"select-content\"\n          className={cn(\n            `\n\t\t\t\t\t\t\trelative z-50 max-h-(--available-height) min-w-(--anchor-width) overflow-x-hidden overflow-y-auto\n\t\t\t\t\t\t\tbg-popover text-popover-foreground\n\t\t\t\t\t\t\trounded-md border p-1 shadow-md\t\t\t\t\t\t\t\n\t\t\t\t\t\t\torigin-[var(--transform-origin)]\n\t\t\t\t\t\t\tdata-[open]:animate-in data-[closed]:animate-out \n\t\t\t\t\t\t\tdata-[closed]:fade-out-0 data-[open]:fade-in-0 \n\t\t\t\t\t\t\tdata-[closed]:zoom-out-95 data-[open]:zoom-in-95\n\t\t\t\t\t\t\tdata-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 \n\t\t\t\t\t\t\tdata-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\n\t\t\t\t\t\t`,\n            position === 'item-aligned' && '[&_*[data-slot=select-item]]:min-w-[var(--anchor-width)]',\n            className,\n          )}\n          {...props}\n        >\n          {children}\n        </SelectPrimitive.Popup>\n        <SelectScrollDownButton />\n      </SelectPositioner>\n    </SelectPortal>\n  );\n}\n\nfunction SelectItem({ className, children, ...props }: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  const { indicatorPosition, indicatorVisibility, indicator } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        `\n\t\t\t\t\trelative flex w-full items-center cursor-default select-none\n\t\t\t\t\trounded-sm py-1.5 text-sm outline-hidden\n\t\t\t\t\tdata-highlighted:bg-accent data-highlighted:text-accent-foreground\n\t\t\t\t\tdata-[disabled]:pointer-events-none data-[disabled]:opacity-50\n\t\t\t\t\t[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 [&_svg:not([class*='text-'])]:text-muted-foreground\n\t\t\t\t\t*:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\n\t\t\t\t`,\n        indicatorPosition === 'left' ? 'ps-7 pe-2' : 'pe-7 ps-2',\n        className,\n      )}\n      {...props}\n    >\n      {indicatorVisibility &&\n        (indicator && isValidElement(indicator) ? (\n          indicator\n        ) : (\n          <span\n            className={cn(\n              'absolute flex h-3.5 w-3.5 items-center justify-center',\n              indicatorPosition === 'left' ? 'start-2' : 'end-2',\n            )}\n          >\n            <SelectPrimitive.ItemIndicator data-slot=\"select-item-indicator\">\n              <CheckIcon className=\"h-4 w-4 text-primary\" />\n            </SelectPrimitive.ItemIndicator>\n          </span>\n        ))}\n      <SelectPrimitive.ItemText data-slot=\"select-item-text\">{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectLabel({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.GroupLabel>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.GroupLabel\n      data-slot=\"select-label\"\n      className={cn(\n        'text-muted-foreground py-1.5 text-xs font-medium',\n        indicatorPosition === 'left' ? 'ps-7 pe-2' : 'pe-7 ps-2',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SelectIndicator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ItemIndicator>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <span\n      data-slot=\"select-indicator\"\n      className={cn(\n        'absolute flex top-1/2 -translate-y-1/2 items-center justify-center',\n        indicatorPosition === 'left' ? 'start-2' : 'end-2',\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitive.ItemIndicator>{children}</SelectPrimitive.ItemIndicator>\n    </span>\n  );\n}\n\nfunction SelectSeparator({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectScrollUpButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollUpArrow>) {\n  return (\n    <SelectPrimitive.ScrollUpArrow\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        'fixed top-0 left-0 right-0 z-10 flex w-full cursor-default items-center justify-center rounded-t-md py-1 bg-popover',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpArrow>\n  );\n}\n\nfunction SelectScrollDownButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollDownArrow>) {\n  return (\n    <SelectPrimitive.ScrollDownArrow\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        'fixed bottom-0 left-0 right-0 z-10 flex w-full cursor-default items-center justify-center rounded-b-md py-1 bg-popover',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownArrow>\n  );\n}\n\nexport {\n  Select,\n  SelectTrigger,\n  SelectContent,\n  SelectItem,\n  SelectValue,\n  SelectGroup,\n  SelectLabel,\n  SelectIndicator,\n  SelectSeparator,\n  SelectClear,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-badge.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { mergeProps } from '@base-ui-components/react/merge-props';\nimport { useRender } from '@base-ui-components/react/use-render';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nexport interface BadgeProps extends useRender.ComponentProps<'span'>, VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n  dotClassName?: string;\n  disabled?: boolean;\n}\n\nexport interface BadgeButtonProps extends useRender.ComponentProps<'button'>, VariantProps<typeof badgeButtonVariants> {\n  asChild?: boolean;\n}\n\nexport type BadgeDotProps = React.HTMLAttributes<HTMLSpanElement>;\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center border border-transparent font-medium focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 [&_svg]:-ms-px [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground',\n        secondary: 'bg-secondary text-secondary-foreground',\n        success:\n          'bg-[var(--color-success-accent,var(--color-green-500))] text-[var(--color-success-foreground,var(--color-white))]',\n        warning:\n          'bg-[var(--color-warning-accent,var(--color-yellow-500))] text-[var(--color-warning-foreground,var(--color-white))]',\n        info: 'bg-[var(--color-info-accent,var(--color-violet-500))] text-[var(--color-info-foreground,var(--color-white))]',\n        outline: 'bg-transparent border border-border text-secondary-foreground',\n        destructive: 'bg-destructive text-destructive-foreground',\n      },\n      appearance: {\n        default: '',\n        light: '',\n        outline: '',\n        ghost: 'border-transparent bg-transparent',\n      },\n      disabled: {\n        true: 'opacity-50 pointer-events-none',\n      },\n      size: {\n        lg: 'rounded-md px-[0.5rem] h-7 min-w-7 gap-1.5 text-xs [&_svg]:size-3.5',\n        md: 'rounded-md px-[0.45rem] h-6 min-w-6 gap-1.5 text-xs [&_svg]:size-3.5 ',\n        sm: 'rounded-sm px-[0.325rem] h-5 min-w-5 gap-1 text-[0.6875rem] leading-[0.75rem] [&_svg]:size-3',\n        xs: 'rounded-sm px-[0.25rem] h-4 min-w-4 gap-1 text-[0.625rem] leading-[0.5rem] [&_svg]:size-3',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n    },\n    compoundVariants: [\n      /* Light */\n      {\n        variant: 'primary',\n        appearance: 'light',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'light',\n        className: 'bg-secondary dark:bg-secondary/50 text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'light',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-800))] bg-[var(--color-success-soft,var(--color-green-100))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'light',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] bg-[var(--color-warning-soft,var(--color-yellow-100))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'light',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] bg-[var(--color-info-soft,var(--color-violet-100))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'light',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Outline */\n      {\n        variant: 'primary',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] border-[var(--color-primary-soft,var(--color-blue-100))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:border-[var(--color-primary-soft,var(--color-blue-900))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'success',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-700))] border-[var(--color-success-soft,var(--color-green-200))] bg-[var(--color-success-soft,var(--color-green-50))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:border-[var(--color-success-soft,var(--color-green-900))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] border-[var(--color-warning-soft,var(--color-yellow-200))] bg-[var(--color-warning-soft,var(--color-yellow-50))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:border-[var(--color-warning-soft,var(--color-yellow-900))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] border-[var(--color-info-soft,var(--color-violet-100))] bg-[var(--color-info-soft,var(--color-violet-50))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:border-[var(--color-info-soft,var(--color-violet-900))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] border-[var(--color-destructive-soft,var(--color-red-100))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:border-[var(--color-destructive-soft,var(--color-red-900))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Ghost */\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'ghost',\n        className: 'text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'ghost',\n        className: 'text-[var(--color-success-accent,var(--color-green-500))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'ghost',\n        className: 'text-[var(--color-warning-accent,var(--color-yellow-500))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'ghost',\n        className: 'text-[var(--color-info-accent,var(--color-violet-500))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'text-destructive',\n      },\n\n      { size: 'lg', appearance: 'ghost', className: 'px-0' },\n      { size: 'md', appearance: 'ghost', className: 'px-0' },\n      { size: 'sm', appearance: 'ghost', className: 'px-0' },\n      { size: 'xs', appearance: 'ghost', className: 'px-0' },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      appearance: 'default',\n      size: 'md',\n    },\n  },\n);\n\nconst badgeButtonVariants = cva(\n  'cursor-pointer transition-all inline-flex items-center justify-center leading-none size-3.5 [&>svg]:opacity-100! [&>svg]:size-3.5 p-0 rounded-md -me-0.5 opacity-60 hover:opacity-100',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  render,\n  asChild = false,\n  children,\n  className,\n  variant,\n  size,\n  appearance,\n  shape,\n  disabled,\n  ...props\n}: BadgeProps) {\n  const defaultProps = {\n    className: cn(badgeVariants({ variant, size, appearance, shape, disabled }), className),\n    'data-slot': 'badge',\n  };\n\n  // Determine render element based on asChild prop\n  const renderElement =\n    asChild && React.isValidElement(children)\n      ? (children as React.ReactElement<Record<string, unknown>, string | React.JSXElementConstructor<unknown>>)\n      : render || <span />;\n\n  // When using asChild, children becomes the element props, otherwise use children normally\n  const finalProps =\n    asChild && React.isValidElement(children)\n      ? mergeProps(defaultProps, props)\n      : mergeProps(defaultProps, { ...props, children });\n\n  const element = useRender({\n    render: renderElement,\n    props: finalProps,\n  });\n\n  return element;\n}\n\nfunction BadgeButton({ render, asChild = false, children, className, variant, ...props }: BadgeButtonProps) {\n  const defaultProps = {\n    className: cn(badgeButtonVariants({ variant, className })),\n    role: 'button' as const,\n    'data-slot': 'badge-button',\n  };\n\n  // Determine render element based on asChild prop\n  const renderElement =\n    asChild && React.isValidElement(children)\n      ? (children as React.ReactElement<Record<string, unknown>, string | React.JSXElementConstructor<unknown>>)\n      : render || <button />;\n\n  // When using asChild, children becomes the element props, otherwise use children normally\n  const finalProps =\n    asChild && React.isValidElement(children)\n      ? mergeProps(defaultProps, props)\n      : mergeProps(defaultProps, { ...props, children });\n\n  const element = useRender({\n    render: renderElement,\n    props: finalProps,\n  });\n\n  return element;\n}\n\nfunction BadgeDot({ className, ...props }: BadgeDotProps) {\n  return (\n    <span\n      data-slot=\"badge-dot\"\n      className={cn('size-1.5 rounded-full bg-[currentColor] opacity-75', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, BadgeButton, BadgeDot, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}