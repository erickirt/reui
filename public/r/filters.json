{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "filters",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "lucide-react",
    "radix-ui",
    "@radix-ui/react-dialog",
    "cmdk",
    "@radix-ui/react-tooltip"
  ],
  "registryDependencies": [
    "https://reui.io/r/command.json",
    "https://reui.io/r/dropdown-menu.json",
    "https://reui.io/r/popover.json",
    "https://reui.io/r/switch.json",
    "https://reui.io/r/tooltip.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/filters.tsx",
      "content": "'use client';\n\nimport type React from 'react';\nimport { createContext, useCallback, useContext, useMemo, useState } from 'react';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from '@/registry/default/ui/command';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/registry/default/ui/dropdown-menu';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/registry/default/ui/popover';\nimport { Switch } from '@/registry/default/ui/switch';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/registry/default/ui/tooltip';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { AlertCircle, Check, Plus, X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// i18n Configuration Interface\nexport interface FilterI18nConfig {\n  // UI Labels\n  addFilter: string;\n  searchFields: string;\n  noFieldsFound: string;\n  noResultsFound: string;\n  select: string;\n  true: string;\n  false: string;\n  min: string;\n  max: string;\n  to: string;\n  typeAndPressEnter: string;\n  selected: string;\n  selectedCount: string;\n  percent: string;\n  defaultCurrency: string;\n  defaultColor: string;\n  addFilterTitle: string;\n\n  // Operators\n  operators: {\n    is: string;\n    isNot: string;\n    isAnyOf: string;\n    isNotAnyOf: string;\n    includesAll: string;\n    excludesAll: string;\n    before: string;\n    after: string;\n    between: string;\n    notBetween: string;\n    contains: string;\n    notContains: string;\n    startsWith: string;\n    endsWith: string;\n    isExactly: string;\n    equals: string;\n    notEquals: string;\n    greaterThan: string;\n    lessThan: string;\n    overlaps: string;\n    includes: string;\n    excludes: string;\n    includesAllOf: string;\n    includesAnyOf: string;\n    empty: string;\n    notEmpty: string;\n  };\n\n  // Placeholders\n  placeholders: {\n    enterField: (fieldType: string) => string;\n    selectField: string;\n    searchField: (fieldName: string) => string;\n    enterKey: string;\n    enterValue: string;\n  };\n\n  // Helper functions\n  helpers: {\n    formatOperator: (operator: string) => string;\n  };\n\n  // Validation\n  validation: {\n    invalidEmail: string;\n    invalidUrl: string;\n    invalidTel: string;\n    invalid: string;\n  };\n}\n\n// Default English i18n configuration\nexport const DEFAULT_I18N: FilterI18nConfig = {\n  // UI Labels\n  addFilter: 'Add filter',\n  searchFields: 'Search fields...',\n  noFieldsFound: 'No fields found.',\n  noResultsFound: 'No results found.',\n  select: 'Select...',\n  true: 'True',\n  false: 'False',\n  min: 'Min',\n  max: 'Max',\n  to: 'to',\n  typeAndPressEnter: 'Type and press Enter to add tag',\n  selected: 'selected',\n  selectedCount: 'selected',\n  percent: '%',\n  defaultCurrency: '$',\n  defaultColor: '#000000',\n  addFilterTitle: 'Add filter',\n\n  // Operators\n  operators: {\n    is: 'is',\n    isNot: 'is not',\n    isAnyOf: 'is any of',\n    isNotAnyOf: 'is not any of',\n    includesAll: 'includes all',\n    excludesAll: 'excludes all',\n    before: 'before',\n    after: 'after',\n    between: 'between',\n    notBetween: 'not between',\n    contains: 'contains',\n    notContains: 'does not contain',\n    startsWith: 'starts with',\n    endsWith: 'ends with',\n    isExactly: 'is exactly',\n    equals: 'equals',\n    notEquals: 'not equals',\n    greaterThan: 'greater than',\n    lessThan: 'less than',\n    overlaps: 'overlaps',\n    includes: 'includes',\n    excludes: 'excludes',\n    includesAllOf: 'includes all of',\n    includesAnyOf: 'includes any of',\n    empty: 'is empty',\n    notEmpty: 'is not empty',\n  },\n\n  // Placeholders\n  placeholders: {\n    enterField: (fieldType: string) => `Enter ${fieldType}...`,\n    selectField: 'Select...',\n    searchField: (fieldName: string) => `Search ${fieldName.toLowerCase()}...`,\n    enterKey: 'Enter key...',\n    enterValue: 'Enter value...',\n  },\n\n  // Helper functions\n  helpers: {\n    formatOperator: (operator: string) => operator.replace(/_/g, ' '),\n  },\n\n  // Validation\n  validation: {\n    invalidEmail: 'Invalid email format',\n    invalidUrl: 'Invalid URL format',\n    invalidTel: 'Invalid phone format',\n    invalid: 'Invalid input format',\n  },\n};\n\n// Context for all Filter component props\ninterface FilterContextValue {\n  variant: 'solid' | 'outline';\n  size: 'sm' | 'md' | 'lg';\n  radius: 'md' | 'full';\n  i18n: FilterI18nConfig;\n  cursorPointer: boolean;\n  className?: string;\n  showAddButton?: boolean;\n  addButtonText?: string;\n  addButtonIcon?: React.ReactNode;\n  addButtonClassName?: string;\n  addButton?: React.ReactNode;\n  showSearchInput?: boolean;\n  trigger?: React.ReactNode;\n  allowMultiple?: boolean;\n}\n\nconst FilterContext = createContext<FilterContextValue>({\n  variant: 'outline',\n  size: 'md',\n  radius: 'md',\n  i18n: DEFAULT_I18N,\n  cursorPointer: true,\n  className: undefined,\n  showAddButton: true,\n  addButtonText: undefined,\n  addButtonIcon: undefined,\n  addButtonClassName: undefined,\n  addButton: undefined,\n  showSearchInput: true,\n  trigger: undefined,\n  allowMultiple: true,\n});\n\nconst useFilterContext = () => useContext(FilterContext);\n\n// Reusable input variant component for consistent styling\nconst filterInputVariants = cva(\n  [\n    'transition shrink-0 outline-none text-foreground relative flex items-center',\n    'has-[[data-slot=filters-input]:focus-visible]:ring-ring/30',\n    'has-[[data-slot=filters-input]:focus-visible]:border-ring',\n    'has-[[data-slot=filters-input]:focus-visible]:outline-none',\n    'has-[[data-slot=filters-input]:focus-visible]:ring-[3px]',\n    'has-[[data-slot=filters-input]:focus-visible]:z-1',\n    'has-[[data-slot=filters-input]:aria-invalid]:border',\n    'has-[[data-slot=filters-input]:aria-invalid]:border-solid',\n    'has-[[data-slot=filters-input]:aria-invalid]:border-destructive/60',\n    'has-[[data-slot=filters-input]:aria-invalid]:ring-destructive/10',\n    'dark:has-[[data-slot=filters-input]:aria-invalid]:border-destructive',\n    'dark:has-[[data-slot=filters-input]:aria-invalid]:ring-destructive/20',\n  ],\n  {\n    variants: {\n      variant: {\n        solid: 'border-0 bg-secondary',\n        outline: 'bg-background border border-border',\n      },\n      size: {\n        lg: 'h-10 text-sm px-2.5 has-[[data-slot=filters-prefix]]:ps-0 has-[[data-slot=filters-suffix]]:pe-0',\n        md: 'h-9 text-sm px-2 has-[[data-slot=filters-prefix]]:ps-0 has-[[data-slot=filters-suffix]]:pe-0',\n        sm: 'h-8 text-xs px-1.5 has-[[data-slot=filters-prefix]]:ps-0 has-[[data-slot=filters-suffix]]:pe-0',\n      },\n      cursorPointer: {\n        true: 'cursor-pointer',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n      cursorPointer: true,\n    },\n  },\n);\n\n// Reusable remove button variant component\nconst filterRemoveButtonVariants = cva(\n  ['inline-flex items-center shrink-0 justify-center transition shrink-0 text-muted-foreground hover:text-foreground'],\n  {\n    variants: {\n      variant: {\n        solid: 'bg-secondary',\n        outline: 'border border-border border-s-0 hover:bg-secondary',\n      },\n      size: {\n        lg: 'h-10 w-10 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-9 w-9 [&_svg:not([class*=size-])]:size-3.5',\n        sm: 'h-8 w-8 [&_svg:not([class*=size-])]:size-3',\n      },\n      cursorPointer: {\n        true: 'cursor-pointer',\n        false: '',\n      },\n      radius: {\n        md: 'rounded-e-md',\n        full: 'rounded-e-full',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n      radius: 'md',\n      cursorPointer: true,\n    },\n  },\n);\n\nconst filterAddButtonVariants = cva(\n  [\n    'inline-flex items-center shrink-0 justify-center transition shrink-0 text-foreground shadow-xs shadow-black/5',\n    '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n  ],\n  {\n    variants: {\n      variant: {\n        solid: 'border border-input hover:bg-secondary/60',\n        outline: 'border border-border hover:bg-secondary',\n      },\n      size: {\n        lg: 'h-10 px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-9 px-3 gap-1.5 text-sm [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-8 px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n      },\n      radius: {\n        md: 'rounded-md',\n        full: 'rounded-full',\n      },\n      cursorPointer: {\n        true: 'cursor-pointer',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n      cursorPointer: true,\n    },\n  },\n);\n\nconst filterOperatorVariants = cva(\n  [\n    'transition text-muted-foreground hover:text-foreground data-[state=open]:text-foreground shrink-0 flex items-center relative focus-visible:z-1',\n  ],\n  {\n    variants: {\n      variant: {\n        solid: 'bg-secondary',\n        outline:\n          'bg-background border border-border border-e-0 hover:bg-secondary data-[state=open]:bg-secondary [&+[data-slot=filters-remove]]:border-s',\n      },\n      size: {\n        lg: 'h-10 px-4 text-sm gap-1.5',\n        md: 'h-9 px-3 text-sm gap-1.25',\n        sm: 'h-8 px-2.5 text-xs gap-1',\n      },\n      cursorPointer: {\n        true: 'cursor-pointer',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n      cursorPointer: true,\n    },\n  },\n);\n\nconst filterFieldLabelVariants = cva(\n  [\n    'flex gap-1.5 shrink-0 px-1.5 py-1 items-center text-foreground',\n    '[&_svg:not([class*=size-])]:size-3.5 [&_svg:not([class*=opacity-])]:opacity-60',\n  ],\n  {\n    variants: {\n      variant: {\n        solid: 'bg-secondary',\n        outline: 'border border-border border-e-0',\n      },\n      size: {\n        lg: 'h-10 px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-9 px-3 gap-1.5 text-sm [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-8 px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n      },\n      radius: {\n        md: 'rounded-s-md',\n        full: 'rounded-s-full',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n    },\n  },\n);\n\nconst filterFieldValueVariants = cva(\n  'text-foreground transition shrink-0 flex items-center gap-1 relative focus-visible:z-1',\n  {\n    variants: {\n      variant: {\n        solid: 'bg-secondary',\n        outline: 'bg-background border border-border hover:bg-secondary',\n      },\n      size: {\n        lg: 'h-10 px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-9 px-3 gap-1.5 text-sm [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-8 px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n      },\n      cursorPointer: {\n        true: 'cursor-pointer',\n        false: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'outline',\n      size: 'md',\n      cursorPointer: true,\n    },\n  },\n);\n\nconst filterFieldAddonVariants = cva('text-foreground shrink-0 flex items-center justify-center', {\n  variants: {\n    variant: {\n      solid: '',\n      outline: '',\n    },\n    size: {\n      lg: 'h-10 px-4 text-sm',\n      md: 'h-9 px-3 text-sm',\n      sm: 'h-8 px-2.5 text-xs',\n    },\n  },\n  defaultVariants: {\n    variant: 'outline',\n    size: 'md',\n  },\n});\n\nconst filterFieldBetweenVariants = cva('text-muted-foreground shrink-0 flex items-center', {\n  variants: {\n    variant: {\n      solid: 'bg-secondary',\n      outline: 'bg-background border border-border border-x-0',\n    },\n    size: {\n      lg: 'h-10 px-4 text-sm',\n      md: 'h-9 px-3 text-sm',\n      sm: 'h-8 px-2.5 text-xs',\n    },\n  },\n  defaultVariants: {\n    variant: 'outline',\n    size: 'md',\n  },\n});\n\nconst filtersContainerVariants = cva('flex flex-wrap items-center', {\n  variants: {\n    variant: {\n      solid: 'gap-2',\n      outline: '',\n    },\n    size: {\n      sm: 'gap-1.5',\n      md: 'gap-2.5',\n      lg: 'gap-3.5',\n    },\n  },\n  defaultVariants: {\n    variant: 'outline',\n    size: 'md',\n  },\n});\n\nconst filterItemVariants = cva('flex items-center shadow-xs shadow-black/5', {\n  variants: {\n    variant: {\n      solid: 'gap-px',\n      outline: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'outline',\n  },\n});\n\nfunction FilterInput<T = unknown>({\n  field,\n  onChange,\n  onBlur,\n  onKeyDown,\n  className,\n  ...props\n}: React.InputHTMLAttributes<HTMLInputElement> & { className?: string; field?: FilterFieldConfig<T> }) {\n  const context = useFilterContext();\n  const [isValid, setIsValid] = useState(true);\n  const [validationMessage, setValidationMessage] = useState('');\n\n  // Validation function to check if input matches pattern\n  const validateInput = (value: string, pattern?: string): boolean => {\n    if (!pattern || !value) return true;\n    const regex = new RegExp(pattern);\n    return regex.test(value);\n  };\n\n  // Get validation message for field type\n  const getValidationMessage = (fieldType: string, hasCustomPattern: boolean = false): string => {\n    // If it's a text or number field with a custom pattern, use the generic invalid message\n    if ((fieldType === 'text' || fieldType === 'number') && hasCustomPattern) {\n      return context.i18n.validation.invalid;\n    }\n\n    switch (fieldType) {\n      case 'email':\n        return context.i18n.validation.invalidEmail;\n      case 'url':\n        return context.i18n.validation.invalidUrl;\n      case 'tel':\n        return context.i18n.validation.invalidTel;\n      default:\n        return context.i18n.validation.invalid;\n    }\n  };\n\n  // Handle input change - allow typing without validation\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // Always allow typing, just call the original onChange\n    onChange?.(e);\n  };\n\n  // Handle blur event - validate when user leaves input\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const pattern = field?.pattern || props.pattern;\n\n    // Only validate if there's a value and pattern\n    if (value && pattern) {\n      let valid = true;\n\n      // If there's a custom validation function, use it\n      if (field?.validation) {\n        valid = field.validation(value);\n      } else {\n        // Use pattern validation\n        valid = validateInput(value, pattern);\n      }\n\n      setIsValid(valid);\n      const hasCustomPattern = !!(field?.pattern || props.pattern);\n      setValidationMessage(valid ? '' : getValidationMessage(field?.type || '', hasCustomPattern));\n    } else {\n      // Reset validation state for empty values or no pattern\n      setIsValid(true);\n      setValidationMessage('');\n    }\n\n    // Call the original onBlur if provided\n    onBlur?.(e);\n  };\n\n  // Handle keydown event - hide validation error when user starts typing\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    // Hide validation error when user starts typing (any key except special keys)\n    if (!isValid && !['Tab', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n      setIsValid(true);\n      setValidationMessage('');\n    }\n\n    // Call the original onKeyDown if provided\n    onKeyDown?.(e);\n  };\n\n  return (\n    <div\n      className={cn('w-36', filterInputVariants({ variant: context.variant, size: context.size }), className)}\n      data-slot=\"filters-input-wrapper\"\n    >\n      {field?.prefix && (\n        <div\n          data-slot=\"filters-prefix\"\n          className={filterFieldAddonVariants({ variant: context.variant, size: context.size })}\n        >\n          {field.prefix}\n        </div>\n      )}\n\n      <div className=\"w-full flex items-stretch\">\n        <input\n          className=\"w-full outline-none\"\n          aria-invalid={!isValid}\n          aria-describedby={!isValid && validationMessage ? `${field?.key || 'input'}-error` : undefined}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onKeyDown={handleKeyDown}\n          data-slot=\"filters-input\"\n          {...props}\n        />\n        {!isValid && validationMessage && (\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex items-center\">\n                <AlertCircle className=\"size-3.5 text-destructive\" />\n              </div>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p className=\"text-sm\">{validationMessage}</p>\n            </TooltipContent>\n          </Tooltip>\n        )}\n      </div>\n\n      {field?.suffix && (\n        <div\n          data-slot=\"filters-suffix\"\n          className={cn(filterFieldAddonVariants({ variant: context.variant, size: context.size }))}\n        >\n          {field.suffix}\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface FilterRemoveButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof filterRemoveButtonVariants> {\n  icon?: React.ReactNode;\n}\n\nfunction FilterRemoveButton({ className, icon = <X />, ...props }: FilterRemoveButtonProps) {\n  const context = useFilterContext();\n\n  return (\n    <button\n      data-slot=\"filters-remove\"\n      className={cn(\n        filterRemoveButtonVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n          radius: context.radius,\n        }),\n        className,\n      )}\n      {...props}\n    >\n      {icon}\n    </button>\n  );\n}\n\n// Generic types for flexible filter system\nexport interface FilterOption<T = unknown> {\n  value: T;\n  label: string;\n  icon?: React.ReactNode;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface FilterOperator {\n  value: string;\n  label: string;\n  supportsMultiple?: boolean;\n}\n\n// Custom renderer props interface\nexport interface CustomRendererProps<T = unknown> {\n  field: FilterFieldConfig<T>;\n  values: T[];\n  onChange: (values: T[]) => void;\n  operator: string;\n}\n\n// Grouped field configuration interface\nexport interface FilterFieldGroup<T = unknown> {\n  group?: string;\n  fields: FilterFieldConfig<T>[];\n}\n\n// Union type for both flat and grouped field configurations\nexport type FilterFieldsConfig<T = unknown> = FilterFieldConfig<T>[] | FilterFieldGroup<T>[];\n\nexport interface FilterFieldConfig<T = unknown> {\n  key?: string;\n  label?: string;\n  icon?: React.ReactNode;\n  type?:\n    | 'select'\n    | 'multiselect'\n    | 'date'\n    | 'daterange'\n    | 'text'\n    | 'number'\n    | 'numberrange'\n    | 'boolean'\n    | 'email'\n    | 'url'\n    | 'tel'\n    | 'time'\n    | 'datetime'\n    | 'custom'\n    | 'separator';\n  // Group-level configuration\n  group?: string;\n  fields?: FilterFieldConfig<T>[];\n  // Field-specific options\n  options?: FilterOption<T>[];\n  operators?: FilterOperator[];\n  customRenderer?: (props: CustomRendererProps<T>) => React.ReactNode;\n  customValueRenderer?: (values: T[], options: FilterOption<T>[]) => React.ReactNode;\n  placeholder?: string;\n  searchable?: boolean;\n  maxSelections?: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  prefix?: string | React.ReactNode;\n  suffix?: string | React.ReactNode;\n  pattern?: string;\n  validation?: (value: unknown) => boolean;\n  allowCustomValues?: boolean;\n  className?: string;\n  popoverContentClassName?: string;\n  // Grouping options (legacy support)\n  groupLabel?: string;\n  // Boolean field options\n  onLabel?: string;\n  offLabel?: string;\n}\n\n// Helper functions to handle both flat and grouped field configurations\nconst isFieldGroup = <T = unknown,>(item: FilterFieldConfig<T> | FilterFieldGroup<T>): item is FilterFieldGroup<T> => {\n  return 'fields' in item && Array.isArray(item.fields);\n};\n\n// Helper function to check if a FilterFieldConfig is a group-level configuration\nconst isGroupLevelField = <T = unknown,>(field: FilterFieldConfig<T>): boolean => {\n  return Boolean(field.group && field.fields);\n};\n\nconst flattenFields = <T = unknown,>(fields: FilterFieldsConfig<T>): FilterFieldConfig<T>[] => {\n  return fields.reduce<FilterFieldConfig<T>[]>((acc, item) => {\n    if (isFieldGroup(item)) {\n      return [...acc, ...item.fields];\n    }\n    // Handle group-level fields (new structure)\n    if (isGroupLevelField(item)) {\n      return [...acc, ...item.fields!];\n    }\n    return [...acc, item];\n  }, []);\n};\n\nconst getFieldsMap = <T = unknown,>(fields: FilterFieldsConfig<T>): Record<string, FilterFieldConfig<T>> => {\n  const flatFields = flattenFields(fields);\n  return flatFields.reduce(\n    (acc, field) => {\n      // Only add fields that have a key (skip group-level configurations)\n      if (field.key) {\n        acc[field.key] = field;\n      }\n      return acc;\n    },\n    {} as Record<string, FilterFieldConfig<T>>,\n  );\n};\n\n// Helper function to create operators from i18n config\nconst createOperatorsFromI18n = (i18n: FilterI18nConfig): Record<string, FilterOperator[]> => ({\n  select: [\n    { value: 'is', label: i18n.operators.is },\n    { value: 'is_not', label: i18n.operators.isNot },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  multiselect: [\n    { value: 'is_any_of', label: i18n.operators.isAnyOf },\n    { value: 'is_not_any_of', label: i18n.operators.isNotAnyOf },\n    { value: 'includes_all', label: i18n.operators.includesAll },\n    { value: 'excludes_all', label: i18n.operators.excludesAll },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  date: [\n    { value: 'before', label: i18n.operators.before },\n    { value: 'after', label: i18n.operators.after },\n    { value: 'is', label: i18n.operators.is },\n    { value: 'is_not', label: i18n.operators.isNot },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  daterange: [\n    { value: 'between', label: i18n.operators.between },\n    { value: 'not_between', label: i18n.operators.notBetween },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  text: [\n    { value: 'contains', label: i18n.operators.contains },\n    { value: 'not_contains', label: i18n.operators.notContains },\n    { value: 'starts_with', label: i18n.operators.startsWith },\n    { value: 'ends_with', label: i18n.operators.endsWith },\n    { value: 'is', label: i18n.operators.isExactly },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  number: [\n    { value: 'equals', label: i18n.operators.equals },\n    { value: 'not_equals', label: i18n.operators.notEquals },\n    { value: 'greater_than', label: i18n.operators.greaterThan },\n    { value: 'less_than', label: i18n.operators.lessThan },\n    { value: 'between', label: i18n.operators.between },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  numberrange: [\n    { value: 'between', label: i18n.operators.between },\n    { value: 'overlaps', label: i18n.operators.overlaps },\n    { value: 'contains', label: i18n.operators.contains },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  boolean: [\n    { value: 'is', label: i18n.operators.is },\n    { value: 'is_not', label: i18n.operators.isNot },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  email: [\n    { value: 'contains', label: i18n.operators.contains },\n    { value: 'not_contains', label: i18n.operators.notContains },\n    { value: 'starts_with', label: i18n.operators.startsWith },\n    { value: 'ends_with', label: i18n.operators.endsWith },\n    { value: 'is', label: i18n.operators.isExactly },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  url: [\n    { value: 'contains', label: i18n.operators.contains },\n    { value: 'not_contains', label: i18n.operators.notContains },\n    { value: 'starts_with', label: i18n.operators.startsWith },\n    { value: 'ends_with', label: i18n.operators.endsWith },\n    { value: 'is', label: i18n.operators.isExactly },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  tel: [\n    { value: 'contains', label: i18n.operators.contains },\n    { value: 'not_contains', label: i18n.operators.notContains },\n    { value: 'starts_with', label: i18n.operators.startsWith },\n    { value: 'ends_with', label: i18n.operators.endsWith },\n    { value: 'is', label: i18n.operators.isExactly },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  time: [\n    { value: 'before', label: i18n.operators.before },\n    { value: 'after', label: i18n.operators.after },\n    { value: 'is', label: i18n.operators.is },\n    { value: 'between', label: i18n.operators.between },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n  datetime: [\n    { value: 'before', label: i18n.operators.before },\n    { value: 'after', label: i18n.operators.after },\n    { value: 'is', label: i18n.operators.is },\n    { value: 'between', label: i18n.operators.between },\n    { value: 'empty', label: i18n.operators.empty },\n    { value: 'not_empty', label: i18n.operators.notEmpty },\n  ],\n});\n\n// Default operators for different field types (using default i18n)\nexport const DEFAULT_OPERATORS: Record<string, FilterOperator[]> = createOperatorsFromI18n(DEFAULT_I18N);\n\n// Helper function to get operators for a field\nconst getOperatorsForField = <T = unknown,>(\n  field: FilterFieldConfig<T>,\n  values: T[],\n  i18n: FilterI18nConfig,\n): FilterOperator[] => {\n  if (field.operators) return field.operators;\n\n  const operators = createOperatorsFromI18n(i18n);\n  const defaultOps = operators[field.type || 'select'] || operators.select;\n\n  // Dynamic operator selection based on values\n  if (field.type === 'select' && values.length > 1) {\n    return operators.multiselect;\n  }\n\n  return defaultOps;\n};\n\ninterface FilterOperatorDropdownProps<T = unknown> {\n  field: FilterFieldConfig<T>;\n  operator: string;\n  values: T[];\n  onChange: (operator: string) => void;\n}\n\nfunction FilterOperatorDropdown<T = unknown>({ field, operator, values, onChange }: FilterOperatorDropdownProps<T>) {\n  const context = useFilterContext();\n  const operators = getOperatorsForField(field, values, context.i18n);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger className={filterOperatorVariants({ variant: context.variant, size: context.size })}>\n        {operators.find((op) => op.value === operator)?.label || operator}\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"start\" className=\"w-fit min-w-fit\">\n        {operators.map((op) => (\n          <DropdownMenuItem\n            key={op.value}\n            onClick={() => onChange(op.value)}\n            className=\"flex items-center justify-between\"\n          >\n            <span>{op.label}</span>\n            <Check className={`text-primary ms-auto ${op.value === operator ? 'opacity-100' : 'opacity-0'}`} />\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\ninterface FilterValueSelectorProps<T = unknown> {\n  field: FilterFieldConfig<T>;\n  values: T[];\n  onChange: (values: T[]) => void;\n  operator: string;\n}\n\ninterface SelectOptionsPopoverProps<T = unknown> {\n  field: FilterFieldConfig<T>;\n  values: T[];\n  onChange: (values: T[]) => void;\n  onClose?: () => void;\n  showBackButton?: boolean;\n  onBack?: () => void;\n  inline?: boolean;\n}\n\nfunction SelectOptionsPopover<T = unknown>({\n  field,\n  values,\n  onChange,\n  onClose,\n  inline = false,\n}: SelectOptionsPopoverProps<T>) {\n  const [open, setOpen] = useState(false);\n  const [searchInput, setSearchInput] = useState('');\n  const context = useFilterContext();\n\n  const isMultiSelect = field.type === 'multiselect' || values.length > 1;\n  const selectedOptions = field.options?.filter((opt) => values.includes(opt.value)) || [];\n  const unselectedOptions = field.options?.filter((opt) => !values.includes(opt.value)) || [];\n\n  const handleClose = () => {\n    setOpen(false);\n    onClose?.();\n  };\n\n  // If inline mode, render the content directly without popover\n  if (inline) {\n    return (\n      <div className=\"w-full\">\n        <Command>\n          {field.searchable !== false && (\n            <CommandInput\n              placeholder={context.i18n.placeholders.searchField(field.label || '')}\n              className=\"h-8.5 text-sm\"\n              value={searchInput}\n              onValueChange={setSearchInput}\n            />\n          )}\n          <CommandList>\n            <CommandEmpty>{context.i18n.noResultsFound}</CommandEmpty>\n\n            {/* Selected items */}\n            {selectedOptions.length > 0 && (\n              <CommandGroup heading={field.label || 'Selected'}>\n                {selectedOptions.map((option) => (\n                  <CommandItem\n                    key={String(option.value)}\n                    className=\"group flex gap-2 items-center\"\n                    onSelect={() => {\n                      if (isMultiSelect) {\n                        onChange(values.filter((v) => v !== option.value) as T[]);\n                      } else {\n                        onChange([] as T[]);\n                      }\n                    }}\n                  >\n                    {option.icon && option.icon}\n                    <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                    <Check className=\"text-primary ms-auto\" />\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            )}\n\n            {/* Available items */}\n            {unselectedOptions.length > 0 && (\n              <>\n                {selectedOptions.length > 0 && <CommandSeparator />}\n                <CommandGroup>\n                  {unselectedOptions.map((option) => (\n                    <CommandItem\n                      key={String(option.value)}\n                      className=\"group flex gap-2 items-center\"\n                      value={option.label}\n                      onSelect={() => {\n                        if (isMultiSelect) {\n                          const newValues = [...values, option.value] as T[];\n                          if (field.maxSelections && newValues.length > field.maxSelections) {\n                            return; // Don't exceed max selections\n                          }\n                          onChange(newValues);\n                          // For multiselect, don't close the popover to allow multiple selections\n                        } else {\n                          onChange([option.value] as T[]);\n                          onClose?.();\n                        }\n                      }}\n                    >\n                      {option.icon && option.icon}\n                      <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                      <Check className=\"text-primary ms-auto opacity-0\" />\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </div>\n    );\n  }\n\n  return (\n    <Popover\n      open={open}\n      onOpenChange={(open) => {\n        setOpen(open);\n        if (!open) {\n          setTimeout(() => setSearchInput(''), 200);\n        }\n      }}\n    >\n      <PopoverTrigger\n        className={filterFieldValueVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n        })}\n      >\n        <div className=\"flex gap-1.5 items-center\">\n          {field.customValueRenderer ? (\n            field.customValueRenderer(values, field.options || [])\n          ) : (\n            <>\n              {selectedOptions.length > 0 && (\n                <div className=\"flex items-center -space-x-1.5\">\n                  {selectedOptions.slice(0, 3).map((option) => (\n                    <div key={String(option.value)}>{option.icon}</div>\n                  ))}\n                </div>\n              )}\n              {selectedOptions.length === 1\n                ? selectedOptions[0].label\n                : selectedOptions.length > 1\n                  ? `${selectedOptions.length} ${context.i18n.selectedCount}`\n                  : context.i18n.select}\n            </>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent align=\"start\" className={cn('w-[200px] p-0', field.className)}>\n        <Command>\n          {field.searchable !== false && (\n            <CommandInput\n              placeholder={context.i18n.placeholders.searchField(field.label || '')}\n              className=\"h-9 text-sm\"\n              value={searchInput}\n              onValueChange={setSearchInput}\n            />\n          )}\n          <CommandList>\n            <CommandEmpty>{context.i18n.noResultsFound}</CommandEmpty>\n\n            {/* Selected items */}\n            {selectedOptions.length > 0 && (\n              <CommandGroup>\n                {selectedOptions.map((option) => (\n                  <CommandItem\n                    key={String(option.value)}\n                    className=\"group flex gap-2 items-center\"\n                    onSelect={() => {\n                      if (isMultiSelect) {\n                        onChange(values.filter((v) => v !== option.value) as T[]);\n                      } else {\n                        onChange([] as T[]);\n                      }\n                      if (!isMultiSelect) {\n                        setOpen(false);\n                        handleClose();\n                      }\n                    }}\n                  >\n                    {option.icon && option.icon}\n                    <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                    <Check className=\"text-primary ms-auto\" />\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            )}\n\n            {/* Available items */}\n            {unselectedOptions.length > 0 && (\n              <>\n                {selectedOptions.length > 0 && <CommandSeparator />}\n                <CommandGroup>\n                  {unselectedOptions.map((option) => (\n                    <CommandItem\n                      key={String(option.value)}\n                      className=\"group flex gap-2 items-center\"\n                      value={option.label}\n                      onSelect={() => {\n                        if (isMultiSelect) {\n                          const newValues = [...values, option.value] as T[];\n                          if (field.maxSelections && newValues.length > field.maxSelections) {\n                            return; // Don't exceed max selections\n                          }\n                          onChange(newValues);\n                        } else {\n                          onChange([option.value] as T[]);\n                          setOpen(false);\n                          handleClose();\n                        }\n                      }}\n                    >\n                      {option.icon && option.icon}\n                      <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                      <Check className=\"text-primary ms-auto opacity-0\" />\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nfunction FilterValueSelector<T = unknown>({ field, values, onChange, operator }: FilterValueSelectorProps<T>) {\n  const [open, setOpen] = useState(false);\n  const [searchInput, setSearchInput] = useState('');\n  const context = useFilterContext();\n\n  // Hide value input for empty/not empty operators\n  if (operator === 'empty' || operator === 'not_empty') {\n    return null;\n  }\n\n  // Use custom renderer if provided\n  if (field.customRenderer) {\n    return (\n      <div\n        className={filterFieldValueVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n        })}\n      >\n        {field.customRenderer({ field, values, onChange, operator })}\n      </div>\n    );\n  }\n\n  if (field.type === 'boolean') {\n    const isChecked = values[0] === true;\n\n    // Use custom labels if provided, otherwise fall back to i18n defaults\n    const onLabel = field.onLabel || context.i18n.true;\n    const offLabel = field.offLabel || context.i18n.false;\n\n    return (\n      <div\n        className={filterFieldValueVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n        })}\n      >\n        <div className=\"flex items-center gap-2\">\n          <Switch checked={isChecked} onCheckedChange={(checked) => onChange([checked as T])} size=\"sm\" />\n          {field.onLabel && field.offLabel && (\n            <span className=\"text-xs text-muted-foreground\">{isChecked ? onLabel : offLabel}</span>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  if (field.type === 'time') {\n    if (operator === 'between') {\n      const startTime = (values[0] as string) || '';\n      const endTime = (values[1] as string) || '';\n\n      return (\n        <div className=\"flex items-center\" data-slot=\"filters-item\">\n          <FilterInput\n            type=\"time\"\n            value={startTime}\n            onChange={(e) => onChange([e.target.value, endTime] as T[])}\n            className={field.className}\n            field={field}\n          />\n          <div\n            data-slot=\"filters-between\"\n            className={filterFieldBetweenVariants({ variant: context.variant, size: context.size })}\n          >\n            {context.i18n.to}\n          </div>\n          <FilterInput\n            type=\"time\"\n            value={endTime}\n            onChange={(e) => onChange([startTime, e.target.value] as T[])}\n            className={field.className}\n            field={field}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FilterInput\n        type=\"time\"\n        value={(values[0] as string) || ''}\n        onChange={(e) => onChange([e.target.value] as T[])}\n        field={field}\n        className={field.className}\n      />\n    );\n  }\n\n  if (field.type === 'datetime') {\n    if (operator === 'between') {\n      const startDateTime = (values[0] as string) || '';\n      const endDateTime = (values[1] as string) || '';\n\n      return (\n        <div className=\"flex items-center\" data-slot=\"filters-item\">\n          <FilterInput\n            type=\"datetime-local\"\n            value={startDateTime}\n            onChange={(e) => onChange([e.target.value, endDateTime] as T[])}\n            className={cn('w-36', field.className)}\n            field={field}\n          />\n          <div\n            data-slot=\"filters-between\"\n            className={filterFieldBetweenVariants({ variant: context.variant, size: context.size })}\n          >\n            {context.i18n.to}\n          </div>\n          <FilterInput\n            type=\"datetime-local\"\n            value={endDateTime}\n            onChange={(e) => onChange([startDateTime, e.target.value] as T[])}\n            className={cn('w-36', field.className)}\n            field={field}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FilterInput\n        type=\"datetime-local\"\n        value={(values[0] as string) || ''}\n        onChange={(e) => onChange([e.target.value] as T[])}\n        className={cn('w-36', field.className)}\n        field={field}\n      />\n    );\n  }\n\n  if (['email', 'url', 'tel'].includes(field.type || '')) {\n    const getInputType = () => {\n      switch (field.type) {\n        case 'email':\n          return 'email';\n        case 'url':\n          return 'url';\n        case 'tel':\n          return 'tel';\n        default:\n          return 'text';\n      }\n    };\n\n    const getPattern = () => {\n      switch (field.type) {\n        case 'email':\n          return '^[^@\\\\s]+@[^@\\\\s]+\\\\.[^@\\\\s]+$';\n        case 'url':\n          return '^https?:\\\\/\\\\/(www\\\\.)?[-a-zA-Z0-9@:%._\\\\+~#=]{1,256}\\\\.[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@:%_\\\\+.~#?&//=]*)$';\n        case 'tel':\n          return '^[\\\\+]?[1-9][\\\\d]{0,15}$';\n        default:\n          return undefined;\n      }\n    };\n\n    return (\n      <FilterInput\n        type={getInputType()}\n        value={(values[0] as string) || ''}\n        onChange={(e) => onChange([e.target.value] as T[])}\n        placeholder={field.placeholder || context.i18n.placeholders.enterField(field.type || 'text')}\n        pattern={field.pattern || getPattern()}\n        className={field.className}\n        field={field}\n      />\n    );\n  }\n\n  if (field.type === 'daterange') {\n    const startDate = (values[0] as string) || '';\n    const endDate = (values[1] as string) || '';\n\n    return (\n      <div\n        className={filterFieldValueVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n        })}\n      >\n        <FilterInput\n          type=\"date\"\n          value={startDate}\n          onChange={(e) => onChange([e.target.value, endDate] as T[])}\n          className={cn('w-24', field.className)}\n          field={field}\n        />\n        <div\n          data-slot=\"filters-between\"\n          className={filterFieldBetweenVariants({ variant: context.variant, size: context.size })}\n        >\n          {context.i18n.to}\n        </div>\n        <FilterInput\n          type=\"date\"\n          value={endDate}\n          onChange={(e) => onChange([startDate, e.target.value] as T[])}\n          className={cn('w-24', field.className)}\n          field={field}\n        />\n      </div>\n    );\n  }\n\n  // Handle different field types\n  if (field.type === 'text' || field.type === 'number') {\n    if (field.type === 'number' && operator === 'between') {\n      const minVal = (values[0] as string) || '';\n      const maxVal = (values[1] as string) || '';\n\n      return (\n        <div className=\"flex items-center\" data-slot=\"filters-item\">\n          <FilterInput\n            type=\"number\"\n            value={minVal}\n            onChange={(e) => onChange([e.target.value, maxVal] as T[])}\n            placeholder={context.i18n.min}\n            className={cn('w-16', field.className)}\n            min={field.min}\n            max={field.max}\n            step={field.step}\n            pattern={field.pattern}\n            field={field}\n          />\n          <div\n            data-slot=\"filters-between\"\n            className={filterFieldBetweenVariants({ variant: context.variant, size: context.size })}\n          >\n            {context.i18n.to}\n          </div>\n          <FilterInput\n            type=\"number\"\n            value={maxVal}\n            onChange={(e) => onChange([minVal, e.target.value] as T[])}\n            placeholder={context.i18n.max}\n            className={cn('w-16', field.className)}\n            min={field.min}\n            max={field.max}\n            step={field.step}\n            pattern={field.pattern}\n            field={field}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center\" data-slot=\"filters-item\">\n        <FilterInput\n          type={field.type === 'number' ? 'number' : 'text'}\n          value={(values[0] as string) || ''}\n          onChange={(e) => onChange([e.target.value] as T[])}\n          placeholder={field.placeholder}\n          min={field.type === 'number' ? field.min : undefined}\n          max={field.type === 'number' ? field.max : undefined}\n          step={field.type === 'number' ? field.step : undefined}\n          pattern={field.pattern}\n          field={field}\n          className={cn('w-36', field.className)}\n        />\n      </div>\n    );\n  }\n\n  if (field.type === 'date') {\n    return (\n      <FilterInput\n        type=\"date\"\n        value={(values[0] as string) || ''}\n        onChange={(e) => onChange([e.target.value] as T[])}\n        field={field}\n        className={cn('w-16', field.className)}\n      />\n    );\n  }\n\n  // For select and multiselect types, use the SelectOptionsPopover component\n  if (field.type === 'select' || field.type === 'multiselect') {\n    return <SelectOptionsPopover field={field} values={values} onChange={onChange} />;\n  }\n\n  const isMultiSelect = values.length > 1;\n  const selectedOptions = field.options?.filter((opt) => values.includes(opt.value)) || [];\n  const unselectedOptions = field.options?.filter((opt) => !values.includes(opt.value)) || [];\n\n  return (\n    <Popover\n      open={open}\n      onOpenChange={(open) => {\n        setOpen(open);\n        if (!open) {\n          setTimeout(() => setSearchInput(''), 200);\n        }\n      }}\n    >\n      <PopoverTrigger\n        className={filterFieldValueVariants({\n          variant: context.variant,\n          size: context.size,\n          cursorPointer: context.cursorPointer,\n        })}\n      >\n        <div className=\"flex gap-1.5 items-center\">\n          {field.customValueRenderer ? (\n            field.customValueRenderer(values, field.options || [])\n          ) : (\n            <>\n              {selectedOptions.length > 0 && (\n                <div className=\"flex items-center -space-x-1.5\">\n                  {selectedOptions.slice(0, 3).map((option) => (\n                    <div key={String(option.value)}>{option.icon}</div>\n                  ))}\n                </div>\n              )}\n              {selectedOptions.length === 1\n                ? selectedOptions[0].label\n                : selectedOptions.length > 1\n                  ? `${selectedOptions.length} ${context.i18n.selectedCount}`\n                  : context.i18n.select}\n            </>\n          )}\n        </div>\n      </PopoverTrigger>\n      <PopoverContent className={cn('w-36 p-0', field.popoverContentClassName)}>\n        <Command>\n          {field.searchable !== false && (\n            <CommandInput\n              placeholder={context.i18n.placeholders.searchField(field.label || '')}\n              className=\"h-9 text-sm\"\n              value={searchInput}\n              onValueChange={setSearchInput}\n            />\n          )}\n          <CommandList>\n            <CommandEmpty>{context.i18n.noResultsFound}</CommandEmpty>\n\n            {/* Selected items */}\n            {selectedOptions.length > 0 && (\n              <CommandGroup>\n                {selectedOptions.map((option) => (\n                  <CommandItem\n                    key={String(option.value)}\n                    className=\"group flex gap-2 items-center\"\n                    onSelect={() => {\n                      if (isMultiSelect) {\n                        onChange(values.filter((v) => v !== option.value) as T[]);\n                      } else {\n                        onChange([] as T[]);\n                      }\n                      if (!isMultiSelect) setOpen(false);\n                    }}\n                  >\n                    {option.icon && option.icon}\n                    <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                    <Check className=\"text-primary ms-auto\" />\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            )}\n\n            {/* Available items */}\n            {unselectedOptions.length > 0 && (\n              <>\n                {selectedOptions.length > 0 && <CommandSeparator />}\n                <CommandGroup>\n                  {unselectedOptions.map((option) => (\n                    <CommandItem\n                      key={String(option.value)}\n                      className=\"group flex gap-2 items-center\"\n                      value={option.label}\n                      onSelect={() => {\n                        if (isMultiSelect) {\n                          const newValues = [...values, option.value] as T[];\n                          if (field.maxSelections && newValues.length > field.maxSelections) {\n                            return; // Don't exceed max selections\n                          }\n                          onChange(newValues);\n                        } else {\n                          onChange([option.value] as T[]);\n                          setOpen(false);\n                        }\n                      }}\n                    >\n                      {option.icon && option.icon}\n                      <span className=\"text-accent-foreground truncate\">{option.label}</span>\n                      <Check className=\"text-primary ms-auto opacity-0\" />\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nexport interface Filter<T = unknown> {\n  id: string;\n  field: string;\n  operator: string;\n  values: T[];\n}\n\nexport interface FilterGroup<T = unknown> {\n  id: string;\n  label?: string;\n  filters: Filter<T>[];\n  fields: FilterFieldConfig<T>[];\n}\n\n// FiltersContent component for the filter panel content\ninterface FiltersContentProps<T = unknown> {\n  filters: Filter<T>[];\n  fields: FilterFieldsConfig<T>;\n  onChange: (filters: Filter<T>[]) => void;\n}\n\nexport const FiltersContent = <T = unknown,>({ filters, fields, onChange }: FiltersContentProps<T>) => {\n  const context = useFilterContext();\n  const fieldsMap = useMemo(() => getFieldsMap(fields), [fields]);\n\n  const updateFilter = useCallback(\n    (filterId: string, updates: Partial<Filter<T>>) => {\n      onChange(\n        filters.map((filter) => {\n          if (filter.id === filterId) {\n            const updatedFilter = { ...filter, ...updates };\n            // Clear values for empty/not empty operators\n            if (updates.operator === 'empty' || updates.operator === 'not_empty') {\n              updatedFilter.values = [] as T[];\n            }\n            return updatedFilter;\n          }\n          return filter;\n        }),\n      );\n    },\n    [filters, onChange],\n  );\n\n  const removeFilter = useCallback(\n    (filterId: string) => {\n      onChange(filters.filter((filter) => filter.id !== filterId));\n    },\n    [filters, onChange],\n  );\n\n  return (\n    <div className={cn(filtersContainerVariants({ variant: context.variant, size: context.size }), context.className)}>\n      {filters.map((filter) => {\n        const field = fieldsMap[filter.field];\n        if (!field) return null;\n\n        return (\n          <div key={filter.id} className={filterItemVariants({ variant: context.variant })} data-slot=\"filter-item\">\n            {/* Field Label */}\n            <div\n              className={filterFieldLabelVariants({\n                variant: context.variant,\n                size: context.size,\n                radius: context.radius,\n              })}\n            >\n              {field.icon}\n              {field.label}\n            </div>\n\n            {/* Operator Dropdown */}\n            <FilterOperatorDropdown<T>\n              field={field}\n              operator={filter.operator}\n              values={filter.values}\n              onChange={(operator) => updateFilter(filter.id, { operator })}\n            />\n\n            {/* Value Selector */}\n            <FilterValueSelector<T>\n              field={field}\n              values={filter.values}\n              onChange={(values) => updateFilter(filter.id, { values })}\n              operator={filter.operator}\n            />\n\n            {/* Remove Button */}\n            <FilterRemoveButton onClick={() => removeFilter(filter.id)} />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\ninterface FiltersProps<T = unknown> {\n  filters: Filter<T>[];\n  fields: FilterFieldsConfig<T>;\n  onChange: (filters: Filter<T>[]) => void;\n  className?: string;\n  showAddButton?: boolean;\n  addButtonText?: string;\n  addButtonIcon?: React.ReactNode;\n  addButtonClassName?: string;\n  addButton?: React.ReactNode;\n  variant?: 'solid' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  radius?: 'md' | 'full';\n  i18n?: Partial<FilterI18nConfig>;\n  showSearchInput?: boolean;\n  cursorPointer?: boolean;\n  trigger?: React.ReactNode;\n  allowMultiple?: boolean;\n  popoverContentClassName?: string;\n}\n\nexport function Filters<T = unknown>({\n  filters,\n  fields,\n  onChange,\n  className,\n  showAddButton = true,\n  addButtonText,\n  addButtonIcon,\n  addButtonClassName,\n  addButton,\n  variant = 'outline',\n  size = 'md',\n  radius = 'md',\n  i18n,\n  showSearchInput = true,\n  cursorPointer = true,\n  trigger,\n  allowMultiple = true,\n  popoverContentClassName,\n}: FiltersProps<T>) {\n  const [addFilterOpen, setAddFilterOpen] = useState(false);\n  const [selectedFieldForOptions, setSelectedFieldForOptions] = useState<FilterFieldConfig<T> | null>(null);\n  const [tempSelectedValues, setTempSelectedValues] = useState<unknown[]>([]);\n\n  // Merge provided i18n with defaults\n  const mergedI18n: FilterI18nConfig = {\n    ...DEFAULT_I18N,\n    ...i18n,\n    operators: {\n      ...DEFAULT_I18N.operators,\n      ...i18n?.operators,\n    },\n    placeholders: {\n      ...DEFAULT_I18N.placeholders,\n      ...i18n?.placeholders,\n    },\n    validation: {\n      ...DEFAULT_I18N.validation,\n      ...i18n?.validation,\n    },\n  };\n\n  const fieldsMap = useMemo(() => getFieldsMap(fields), [fields]);\n\n  const updateFilter = useCallback(\n    (filterId: string, updates: Partial<Filter<T>>) => {\n      onChange(\n        filters.map((filter) => {\n          if (filter.id === filterId) {\n            const updatedFilter = { ...filter, ...updates };\n            // Clear values for empty/not empty operators\n            if (updates.operator === 'empty' || updates.operator === 'not_empty') {\n              updatedFilter.values = [] as T[];\n            }\n            return updatedFilter;\n          }\n          return filter;\n        }),\n      );\n    },\n    [filters, onChange],\n  );\n\n  const removeFilter = useCallback(\n    (filterId: string) => {\n      onChange(filters.filter((filter) => filter.id !== filterId));\n    },\n    [filters, onChange],\n  );\n\n  const addFilter = useCallback(\n    (fieldKey: string) => {\n      const field = fieldsMap[fieldKey];\n      if (field && field.key) {\n        // For select and multiselect types, show options directly\n        if (field.type === 'select' || field.type === 'multiselect') {\n          setSelectedFieldForOptions(field);\n          // For multiselect, check if there's already a filter and use its values\n          const existingFilter = filters.find((f) => f.field === fieldKey);\n          const initialValues = field.type === 'multiselect' && existingFilter ? existingFilter.values : [];\n          setTempSelectedValues(initialValues);\n          return;\n        }\n\n        // For other types, add filter directly\n        const defaultOperator =\n          field.type === 'daterange'\n            ? 'between'\n            : field.type === 'numberrange'\n              ? 'between'\n              : field.type === 'boolean'\n                ? 'is'\n                : 'is';\n        let defaultValues: unknown[] = [];\n\n        if (['text', 'number', 'date', 'email', 'url', 'tel', 'time', 'datetime'].includes(field.type || '')) {\n          defaultValues = [''] as unknown[];\n        } else if (field.type === 'daterange') {\n          defaultValues = ['', ''] as unknown[];\n        } else if (field.type === 'numberrange') {\n          defaultValues = [field.min || 0, field.max || 100] as unknown[];\n        } else if (field.type === 'boolean') {\n          defaultValues = [false] as unknown[];\n        } else if (field.type === 'time') {\n          defaultValues = [''] as unknown[];\n        } else if (field.type === 'datetime') {\n          defaultValues = [''] as unknown[];\n        }\n\n        const newFilter = createFilter<T>(fieldKey, defaultOperator, defaultValues as T[]);\n        const newFilters = [...filters, newFilter];\n        onChange(newFilters);\n        setAddFilterOpen(false);\n      }\n    },\n    [fieldsMap, filters, onChange],\n  );\n\n  const addFilterWithOption = useCallback(\n    (field: FilterFieldConfig<T>, values: unknown[], closePopover: boolean = true) => {\n      if (!field.key) return;\n\n      const defaultOperator = field.type === 'multiselect' ? 'is_any_of' : 'is';\n\n      // If allowMultiple is true, always create a new filter\n      if (allowMultiple) {\n        const newFilter = createFilter<T>(field.key, defaultOperator, values as T[]);\n        const newFilters = [...filters, newFilter];\n        onChange(newFilters);\n      } else {\n        // Check if there's already a filter for this field\n        const existingFilterIndex = filters.findIndex((f) => f.field === field.key);\n\n        if (existingFilterIndex >= 0 && field.type === 'multiselect') {\n          // Update existing multiselect filter\n          const updatedFilters = [...filters];\n          updatedFilters[existingFilterIndex] = {\n            ...updatedFilters[existingFilterIndex],\n            values: values as T[],\n          };\n          onChange(updatedFilters);\n        } else {\n          // Create new filter\n          const newFilter = createFilter<T>(field.key, defaultOperator, values as T[]);\n          const newFilters = [...filters, newFilter];\n          onChange(newFilters);\n        }\n      }\n\n      if (closePopover) {\n        setAddFilterOpen(false);\n        setSelectedFieldForOptions(null);\n        setTempSelectedValues([]);\n      } else {\n        // For multiselect, keep popover open but update temp values\n        setTempSelectedValues(values as unknown[]);\n      }\n    },\n    [filters, onChange, allowMultiple],\n  );\n\n  const selectableFields = useMemo(() => {\n    const flatFields = flattenFields(fields);\n    return flatFields.filter((field) => {\n      // Only include actual filterable fields (must have key and type)\n      if (!field.key || field.type === 'separator') {\n        return false;\n      }\n      // If allowMultiple is true, don't filter out fields that already have filters\n      if (allowMultiple) {\n        return true;\n      }\n      // Filter out fields that already have filters (default behavior)\n      return !filters.some((filter) => filter.field === field.key);\n    });\n  }, [fields, filters, allowMultiple]);\n\n  return (\n    <FilterContext.Provider\n      value={{\n        variant,\n        size,\n        radius,\n        i18n: mergedI18n,\n        cursorPointer,\n        className,\n        showAddButton,\n        addButtonText,\n        addButtonIcon,\n        addButtonClassName,\n        addButton,\n        showSearchInput,\n        trigger,\n        allowMultiple,\n      }}\n    >\n      <div className={cn(filtersContainerVariants({ variant, size }), className)}>\n        {showAddButton && selectableFields.length > 0 && (\n          <Popover\n            open={addFilterOpen}\n            onOpenChange={(open) => {\n              setAddFilterOpen(open);\n              if (!open) {\n                setSelectedFieldForOptions(null);\n                setTempSelectedValues([]);\n              }\n            }}\n          >\n            <PopoverTrigger asChild>\n              {addButton ? (\n                addButton\n              ) : (\n                <button\n                  className={cn(\n                    filterAddButtonVariants({\n                      variant: variant,\n                      size: size,\n                      cursorPointer: cursorPointer,\n                      radius: radius,\n                    }),\n                    addButtonClassName,\n                  )}\n                  title={mergedI18n.addFilterTitle}\n                >\n                  {addButtonIcon || <Plus />}\n                  {addButtonText || mergedI18n.addFilter}\n                </button>\n              )}\n            </PopoverTrigger>\n            <PopoverContent className={cn('w-[200px] p-0', popoverContentClassName)} align=\"start\">\n              <Command>\n                {selectedFieldForOptions ? (\n                  // Show original select/multiselect rendering without back button\n                  <SelectOptionsPopover<T>\n                    field={selectedFieldForOptions}\n                    values={tempSelectedValues as T[]}\n                    onChange={(values) => {\n                      // For multiselect, create filter immediately but keep popover open\n                      // For single select, create filter and close popover\n                      const shouldClosePopover = selectedFieldForOptions.type === 'select';\n                      addFilterWithOption(selectedFieldForOptions, values as unknown[], shouldClosePopover);\n                    }}\n                    onClose={() => setAddFilterOpen(false)}\n                    inline={true}\n                  />\n                ) : (\n                  // Show field selection\n                  <>\n                    {showSearchInput && <CommandInput placeholder={mergedI18n.searchFields} className=\"h-9\" />}\n                    <CommandList>\n                      <CommandEmpty>{mergedI18n.noFieldsFound}</CommandEmpty>\n                      {fields.map((item, index) => {\n                        // Handle grouped fields (FilterFieldGroup structure)\n                        if (isFieldGroup(item)) {\n                          const groupFields = item.fields.filter((field) => {\n                            // Include separators and labels for display\n                            if (field.type === 'separator') {\n                              return true;\n                            }\n                            // If allowMultiple is true, don't filter out fields that already have filters\n                            if (allowMultiple) {\n                              return true;\n                            }\n                            // Filter out fields that already have filters (default behavior)\n                            return !filters.some((filter) => filter.field === field.key);\n                          });\n\n                          if (groupFields.length === 0) return null;\n\n                          return (\n                            <CommandGroup key={`group-${index}`} heading={item.group || 'Fields'}>\n                              {groupFields.map((field, fieldIndex) => {\n                                // Handle separator\n                                if (field.type === 'separator') {\n                                  return <CommandSeparator key={`separator-${fieldIndex}`} />;\n                                }\n\n                                // Regular field\n                                return (\n                                  <CommandItem key={field.key} onSelect={() => field.key && addFilter(field.key)}>\n                                    {field.icon}\n                                    <span>{field.label}</span>\n                                  </CommandItem>\n                                );\n                              })}\n                            </CommandGroup>\n                          );\n                        }\n\n                        // Handle group-level fields (new FilterFieldConfig structure with group property)\n                        if (isGroupLevelField(item)) {\n                          const groupFields = item.fields!.filter((field) => {\n                            // Include separators and labels for display\n                            if (field.type === 'separator') {\n                              return true;\n                            }\n                            // If allowMultiple is true, don't filter out fields that already have filters\n                            if (allowMultiple) {\n                              return true;\n                            }\n                            // Filter out fields that already have filters (default behavior)\n                            return !filters.some((filter) => filter.field === field.key);\n                          });\n\n                          if (groupFields.length === 0) return null;\n\n                          return (\n                            <CommandGroup key={`group-${index}`} heading={item.group || 'Fields'}>\n                              {groupFields.map((field, fieldIndex) => {\n                                // Handle separator\n                                if (field.type === 'separator') {\n                                  return <CommandSeparator key={`separator-${fieldIndex}`} />;\n                                }\n\n                                // Regular field\n                                return (\n                                  <CommandItem key={field.key} onSelect={() => field.key && addFilter(field.key)}>\n                                    {field.icon}\n                                    <span>{field.label}</span>\n                                  </CommandItem>\n                                );\n                              })}\n                            </CommandGroup>\n                          );\n                        }\n\n                        // Handle flat field configuration (backward compatibility)\n                        const field = item as FilterFieldConfig<T>;\n\n                        // Handle separator\n                        if (field.type === 'separator') {\n                          return <CommandSeparator key={`separator-${index}`} />;\n                        }\n\n                        // Regular field\n                        return (\n                          <CommandItem key={field.key} onSelect={() => field.key && addFilter(field.key)}>\n                            {field.icon}\n                            <span>{field.label}</span>\n                          </CommandItem>\n                        );\n                      })}\n                    </CommandList>\n                  </>\n                )}\n              </Command>\n            </PopoverContent>\n          </Popover>\n        )}\n\n        {filters.map((filter) => {\n          const field = fieldsMap[filter.field];\n          if (!field) return null;\n\n          return (\n            <div key={filter.id} className={filterItemVariants({ variant })} data-slot=\"filter-item\">\n              {/* Field Label */}\n              <div className={filterFieldLabelVariants({ variant: variant, size: size, radius: radius })}>\n                {field.icon}\n                {field.label}\n              </div>\n\n              {/* Operator Dropdown */}\n              <FilterOperatorDropdown<T>\n                field={field}\n                operator={filter.operator}\n                values={filter.values}\n                onChange={(operator) => updateFilter(filter.id, { operator })}\n              />\n\n              {/* Value Selector */}\n              <FilterValueSelector<T>\n                field={field}\n                values={filter.values}\n                onChange={(values) => updateFilter(filter.id, { values })}\n                operator={filter.operator}\n              />\n\n              {/* Remove Button */}\n              <FilterRemoveButton onClick={() => removeFilter(filter.id)} />\n            </div>\n          );\n        })}\n      </div>\n    </FilterContext.Provider>\n  );\n}\n\nexport const createFilter = <T = unknown,>(field: string, operator?: string, values: T[] = []): Filter<T> => ({\n  id: `${Date.now()}-${Math.random().toString(36).substring(2, 11)}`,\n  field,\n  operator: operator || 'is',\n  values,\n});\n\nexport const createFilterGroup = <T = unknown,>(\n  id: string,\n  label: string,\n  fields: FilterFieldConfig<T>[],\n  initialFilters: Filter<T>[] = [],\n): FilterGroup<T> => ({\n  id,\n  label,\n  filters: initialFilters,\n  fields,\n});\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/ui/command.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Dialog, DialogContent, DialogTitle } from '@/registry/default/ui/dialog';\nimport { type DialogProps } from '@radix-ui/react-dialog';\nimport { Command as CommandPrimitive } from 'cmdk';\nimport { Check, LucideIcon, Search } from 'lucide-react';\n\nfunction Command({ className, ...props }: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      className={cn(\n        'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\ntype CommandDialogProps = DialogProps & { className?: string };\n\nconst CommandDialog = ({ children, className, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className={cn('overflow-hidden p-0 shadow-lg', className)}>\n        <DialogTitle className=\"hidden\" />\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nfunction CommandInput({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div className=\"flex items-center border-border border-b px-3\" cmdk-input-wrapper=\"\" data-slot=\"command-input\">\n      <Search className=\"me-2 h-4 w-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        className={cn(\n          'flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-hidden text-foreground placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction CommandList({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CommandEmpty({ ...props }: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return <CommandPrimitive.Empty data-slot=\"command-empty\" className=\"py-6 text-center text-sm\" {...props} />;\n}\n\nfunction CommandGroup({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        'overflow-hidden p-1.5 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CommandSeparator({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn('-mx-1.5 h-px bg-border', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CommandItem({ className, ...props }: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        'relative flex text-foreground cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn('ms-auto text-xs tracking-widest text-muted-foreground', className)}\n      {...props}\n    />\n  );\n};\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon; // Allows passing any Lucide icon\n}\n\nfunction CommandCheck({ icon: Icon = Check, className, ...props }: ButtonArrowProps) {\n  return (\n    <Icon\n      data-slot=\"command-check\"\n      data-check=\"true\"\n      className={cn('size-4 ms-auto text-primary', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Command,\n  CommandCheck,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/dropdown-menu.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Check, ChevronRight, Circle } from 'lucide-react';\nimport { DropdownMenu as DropdownMenuPrimitive } from 'radix-ui';\n\nfunction DropdownMenu({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />;\n}\n\nfunction DropdownMenuPortal({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />;\n}\n\nfunction DropdownMenuTrigger({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return <DropdownMenuPrimitive.Trigger className=\"select-none\" data-slot=\"dropdown-menu-trigger\" {...props} />;\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      className={cn(\n        'flex cursor-default gap-2 select-none items-center rounded-md px-2 py-1.5 text-sm outline-hidden',\n        'focus:bg-accent focus:text-foreground',\n        'data-[state=open]:bg-accent data-[state=open]:text-foreground',\n        'data-[here=true]:bg-accent data-[here=true]:text-foreground',\n        '[&>svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&>svg]:size-4 [&>svg]:shrink-0',\n        inset && 'ps-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRight data-slot=\"dropdown-menu-sub-trigger-indicator\" className=\"ms-auto size-3.5! rtl:rotate-180\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  );\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        'space-y-0.5 z-50 min-w-[8rem] overflow-hidden shadow-md shadow-black/5 rounded-md border border-border bg-popover text-popover-foreground p-2 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'space-y-0.5 z-50 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover p-2 text-popover-foreground shadow-md shadow-black/5 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  );\n}\n\nfunction DropdownMenuGroup({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />;\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean;\n  variant?: 'destructive';\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      className={cn(\n        'text-foreground relative flex cursor-default select-none items-center gap-2 rounded-md px-2 py-1.5 text-sm outline-hidden transition-colors data-disabled:pointer-events-none data-disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n        'focus:bg-accent focus:text-foreground',\n        'data-[active=true]:bg-accent data-[active=true]:text-accent-foreground',\n        inset && 'ps-8',\n        variant === 'destructive' &&\n          'text-destructive hover:text-destructive focus:text-destructive hover:bg-destructive/5 focus:bg-destructive/5 data-[active=true]:bg-destructive/5',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-md py-1.5 ps-8 pe-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50',\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"absolute start-2 flex h-3.5 w-3.5 items-center text-muted-foreground justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Check className=\"h-4 w-4 text-primary\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  );\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-md py-1.5 ps-6 pe-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute start-1.5 flex h-3.5 w-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Circle className=\"h-1.5 w-1.5 fill-primary stroke-primary\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  );\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      className={cn('px-2 py-1.5 text-xs text-muted-foreground font-medium', inset && 'ps-8', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuRadioGroup({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return <DropdownMenuPrimitive.RadioGroup data-slot=\"dropdown-menu-radio-group\" {...props} />;\n}\n\nfunction DropdownMenuSeparator({ className, ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn('-mx-2 my-1.5 h-px bg-muted', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuShortcut({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn('ms-auto text-xs tracking-widest opacity-60', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSub({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />;\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/popover.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Popover as PopoverPrimitive } from 'radix-ui';\n\nfunction Popover({ ...props }: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />;\n}\n\nfunction PopoverTrigger({ ...props }: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;\n}\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.PopoverPortal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'z-50 w-72 rounded-md border border-border bg-popover p-4 text-popover-foreground shadow-md shadow-black/5 outline-hidden data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          className,\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.PopoverPortal>\n  );\n}\n\nfunction PopoverAnchor({ ...props }: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />;\n}\n\nexport { Popover, PopoverContent, PopoverTrigger, PopoverAnchor };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/switch.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Switch as SwitchPrimitive } from 'radix-ui';\n\n// Define a context for `permanent` state\nconst SwitchContext = React.createContext<{ permanent: boolean }>({\n  permanent: false,\n});\n\nconst useSwitchContext = () => {\n  const context = React.useContext(SwitchContext);\n  if (!context) {\n    throw new Error('SwitchIndicator must be used within a Switch component');\n  }\n  return context;\n};\n\n// Define classes for variants\nconst switchVariants = cva(\n  `\n    relative peer inline-flex shrink-0 cursor-pointer items-center rounded-full transition-colors \n    focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background \n    disabled:cursor-not-allowed disabled:opacity-50 data-[state=unchecked]:bg-input\n    aria-invalid:border aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20\n  `,\n  {\n    variants: {\n      shape: {\n        pill: 'rounded-full',\n        square: 'rounded-md',\n      },\n      size: {\n        sm: 'h-5 w-8',\n        md: 'h-6 w-10',\n        lg: 'h-8 w-14',\n        xl: 'h-9 w-16',\n      },\n      permanent: {\n        true: 'bg-input',\n        false: 'data-[state=checked]:bg-primary',\n      },\n    },\n    defaultVariants: {\n      shape: 'pill',\n      permanent: false,\n      size: 'md',\n    },\n  },\n);\n\nconst switchThumbVariants = cva(\n  'pointer-events-none block bg-white w-1/2 h-[calc(100%-4px)] shadow-lg ring-0 transition-transform start-0 data-[state=unchecked]:translate-x-[2px] data-[state=checked]:translate-x-[calc(100%-2px)] rtl:data-[state=unchecked]:-translate-x-[2px] rtl:data-[state=checked]:-translate-x-[calc(100%-2px)]',\n  {\n    variants: {\n      shape: {\n        pill: 'rounded-full',\n        square: 'rounded-md',\n      },\n      size: {\n        xs: '',\n        sm: '',\n        md: '',\n        lg: '',\n        xl: '',\n      },\n    },\n    compoundVariants: [\n      {\n        shape: 'square',\n        size: 'xs',\n        className: 'rounded-sm',\n      },\n    ],\n    defaultVariants: {\n      shape: 'pill',\n      size: 'md',\n    },\n  },\n);\n\nconst switchIndicatorVariants = cva(\n  'text-sm font-medium absolute mx-[2px] top-1/2 w-1/2 -translate-y-1/2 flex pointer-events-none items-center justify-center text-center transition-transform duration-300 [transition-timing-function:cubic-bezier(0.16,1,0.3,1)]',\n  {\n    variants: {\n      state: {\n        on: 'start-0',\n        off: 'end-0',\n      },\n      permanent: {\n        true: '',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      {\n        state: 'on',\n        permanent: false,\n        className:\n          'text-primary-foreground peer-data-[state=unchecked]:invisible peer-data-[state=unchecked]:translate-x-full rtl:peer-data-[state=unchecked]:-translate-x-full',\n      },\n      {\n        state: 'off',\n        permanent: false,\n        className:\n          'peer-data-[state=checked]:invisible -translate-x-full rtl:translate-x-full peer-data-[state=unchecked]:translate-x-0',\n      },\n      {\n        state: 'on',\n        permanent: true,\n        className: 'start-0',\n      },\n      {\n        state: 'off',\n        permanent: true,\n        className: 'end-0',\n      },\n    ],\n    defaultVariants: {\n      state: 'off',\n      permanent: false,\n    },\n  },\n);\n\nfunction SwitchWrapper({\n  className,\n  children,\n  permanent = false,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & { permanent?: boolean }) {\n  return (\n    <SwitchContext.Provider value={{ permanent }}>\n      <div data-slot=\"switch-wrapper\" className={cn('relative inline-flex items-center', className)} {...props}>\n        {children}\n      </div>\n    </SwitchContext.Provider>\n  );\n}\n\nfunction Switch({\n  className,\n  thumbClassName = '',\n  shape,\n  size,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root> &\n  VariantProps<typeof switchVariants> & { thumbClassName?: string }) {\n  const context = useSwitchContext();\n  const permanent = context?.permanent ?? false;\n\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(switchVariants({ shape, size, permanent }), className)}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb className={cn(switchThumbVariants({ shape, size }), thumbClassName)} />\n    </SwitchPrimitive.Root>\n  );\n}\n\nfunction SwitchIndicator({\n  className,\n  state,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement> & VariantProps<typeof switchIndicatorVariants>) {\n  const context = useSwitchContext();\n  const permanent = context?.permanent ?? false;\n\n  return (\n    <span\n      data-slot=\"switch-indicator\"\n      className={cn(switchIndicatorVariants({ state, permanent }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Switch, SwitchIndicator, SwitchWrapper };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/tooltip.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { cn } from '@/lib/utils';\n\nfunction TooltipProvider({ delayDuration = 0, ...props }: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return <TooltipPrimitive.Provider data-slot=\"tooltip-provider\" delayDuration={delayDuration} {...props} />;\n}\n\nfunction Tooltip({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-foreground text-background animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-foreground fill-foreground z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/dialog.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\nimport { Dialog as DialogPrimitive } from 'radix-ui';\n\nconst dialogContentVariants = cva(\n  'flex flex-col fixed outline-0 z-50 border border-border bg-background p-6 shadow-lg shadow-black/5 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 sm:rounded-lg',\n  {\n    variants: {\n      variant: {\n        default: 'left-[50%] top-[50%] max-w-lg translate-x-[-50%] translate-y-[-50%] w-full',\n        fullscreen: 'inset-5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Dialog({ ...props }: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\n}\n\nfunction DialogTrigger({ ...props }: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\n}\n\nfunction DialogPortal({ ...props }: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;\n}\n\nfunction DialogClose({ ...props }: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;\n}\n\nfunction DialogOverlay({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'fixed inset-0 z-50 bg-black/30 [backdrop-filter:blur(4px)] data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  overlay = true,\n  variant,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> &\n  VariantProps<typeof dialogContentVariants> & {\n    showCloseButton?: boolean;\n    overlay?: boolean;\n  }) {\n  return (\n    <DialogPortal>\n      {overlay && <DialogOverlay />}\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(dialogContentVariants({ variant }), className)}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogClose className=\"cursor-pointer outline-0 absolute end-5 top-5 rounded-sm opacity-60 ring-offset-background transition-opacity hover:opacity-100 focus:outline-hidden disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n            <X className=\"size-4\" />\n            <span className=\"sr-only\">Close</span>\n          </DialogClose>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n}\n\nexport default DialogContent;\n\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    data-slot=\"dialog-header\"\n    className={cn('flex flex-col space-y-1 text-center sm:text-start mb-5', className)}\n    {...props}\n  />\n);\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    data-slot=\"dialog-footer\"\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end pt-5 sm:space-x-2.5', className)}\n    {...props}\n  />\n);\n\nfunction DialogTitle({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn('text-lg font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nconst DialogBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div data-slot=\"dialog-body\" className={cn('grow', className)} {...props} />\n);\n\nfunction DialogDescription({ className, ...props }: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Dialog,\n  DialogBody,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}