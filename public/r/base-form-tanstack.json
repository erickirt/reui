{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-form-tanstack",
  "type": "registry:ui",
  "dependencies": [
    "@base-ui-components/react",
    "@tanstack/react-form",
    "clsx",
    "tailwind-merge",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "https://reui.io/r/base-label.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/base-form-tanstack.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { Label } from '@/registry/default/ui/base-label';\nimport { useRender } from '@base-ui-components/react/use-render';\nimport { createFormHookContexts, createFormHook as createTanstackFormHook } from '@tanstack/react-form';\nimport { cn } from '@/lib/utils';\n\nconst { fieldContext, formContext, useFieldContext } = createFormHookContexts();\n\nconst useFormField = () => {\n  const itemContext = React.useContext(FormItemContext);\n  const fieldContext = useFieldContext();\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <field.Container>');\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldContext.state.meta,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div data-slot=\"form-item\" className={cn('grid gap-2', className)} {...props} />\n    </FormItemContext.Provider>\n  );\n}\n\nfunction FieldLabel({ className, ...props }: React.ComponentProps<typeof Label>) {\n  const { formItemId, isValid } = useFormField();\n\n  return (\n    <Label\n      data-slot=\"field-label\"\n      data-error={!isValid}\n      className={cn('data-[error=true]:text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n}\n\nfunction FieldControl({ children = <div /> }: { children?: useRender.RenderProp }) {\n  const { formItemId, isValid, formDescriptionId, formMessageId } = useFormField();\n\n  return useRender({\n    render: children,\n    props: {\n      'data-slot': 'field-control',\n      id: formItemId,\n      'aria-describedby': isValid ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`,\n      'aria-invalid': !isValid,\n    },\n  });\n}\n\nfunction FieldDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      data-slot=\"field-description\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\nfunction FieldMessage({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formMessageId, isValid, errors } = useFormField();\n\n  if (props.children) return props.children;\n\n  const body = isValid ? props.children : String(errors.map((error) => error.message).join(', ') ?? '');\n\n  if (!body) return null;\n\n  return (\n    <p data-slot=\"field-message\" id={formMessageId} className={cn('text-destructive text-sm', className)} {...props}>\n      {body}\n    </p>\n  );\n}\n\nconst createFormHook = (args?: Parameters<typeof createTanstackFormHook>[0]) => {\n  const formHook = createTanstackFormHook({\n    fieldComponents: {\n      ...args?.fieldComponents,\n      Label: FieldLabel,\n      Control: FieldControl,\n      Description: FieldDescription,\n      Message: FieldMessage,\n    },\n    formComponents: { ...args?.formComponents, Item: FormItem },\n    fieldContext,\n    formContext,\n  });\n\n  return formHook;\n};\n\nexport { createFormHook };\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/ui/base-label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({ className, variant, ...props }: React.ComponentProps<'label'> & VariantProps<typeof labelVariants>) {\n  return <label data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}