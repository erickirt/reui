{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-radio-group-size",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "@base-ui-components/react",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://reui.io/r/base-label.json",
    "https://reui.io/r/base-radio-group.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-radio-group/size.tsx",
      "content": "'use client';\n\nimport { Label } from '@/registry/default/ui/base-label';\nimport { RadioGroup, RadioGroupItem } from '@/registry/default/ui/base-radio-group';\n\nexport default function Component() {\n  return (\n    <div className=\"flex flex-wrap items-center gap-6\">\n      <div>\n        <RadioGroup defaultValue=\"small-option-1\" size=\"sm\">\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"small-option-1\" id=\"small-option-1\" />\n            <Label htmlFor=\"small-option-1\">Small 1</Label>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"small-option-2\" id=\"small-option-2\" />\n            <Label htmlFor=\"small-option-2\">Small 2</Label>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"small-option-3\" id=\"small-option-3\" />\n            <Label htmlFor=\"small-option-3\">Small 3</Label>\n          </div>\n        </RadioGroup>\n      </div>\n\n      <div>\n        <RadioGroup defaultValue=\"medium-option-1\" size=\"md\">\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"medium-option-1\" id=\"medium-option-1\" />\n            <Label htmlFor=\"medium-option-1\">Medium 1</Label>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"medium-option-2\" id=\"medium-option-2\" />\n            <Label htmlFor=\"medium-option-2\">Medium 2</Label>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"medium-option-3\" id=\"medium-option-3\" />\n            <Label htmlFor=\"medium-option-3\">Medium 3</Label>\n          </div>\n        </RadioGroup>\n      </div>\n\n      <div>\n        <RadioGroup defaultValue=\"large-option-1\" size=\"lg\">\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"large-option-1\" id=\"large-option-1\" />\n            <Label htmlFor=\"large-option-1\">Large 1</Label>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"large-option-2\" id=\"large-option-2\" />\n            <Label htmlFor=\"large-option-2\">Large 2</Label>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"large-option-3\" id=\"large-option-3\" />\n            <Label htmlFor=\"large-option-3\">Large 3</Label>\n          </div>\n        </RadioGroup>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/base-label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({ className, variant, ...props }: React.ComponentProps<'label'> & VariantProps<typeof labelVariants>) {\n  return <label data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-radio-group.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Radio as RadioPrimitive } from '@base-ui-components/react/radio';\nimport { RadioGroup as RadioGroupPrimitive } from '@base-ui-components/react/radio-group';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { CircleIcon } from 'lucide-react';\n\ntype RadioSize = 'sm' | 'md' | 'lg';\n\n// Define variants for the RadioGroupItem using cva.\nconst radioItemVariants = cva(\n  `\n    peer border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 \n    dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square shrink-0 \n    rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\n    disabled:[&+[data-slot=label]]:opacity-50\n  `,\n  {\n    variants: {\n      size: {\n        sm: 'size-3 [&_svg]:size-1.5',\n        md: 'size-4 [&_svg]:size-2',\n        lg: 'size-5 [&_svg]:size-2.5',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\n// Create a context to pass the size down to items.\nconst RadioGroupContext = React.createContext<{\n  size: RadioSize;\n}>({ size: 'md' });\n\nfunction RadioGroup({\n  className,\n  size = 'md',\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive> & { size?: RadioSize }) {\n  return (\n    <RadioGroupContext.Provider value={{ size }}>\n      <RadioGroupPrimitive data-slot=\"radio-group\" className={cn('grid gap-3', className)} {...props} />\n    </RadioGroupContext.Provider>\n  );\n}\n\nfunction RadioGroupItem({\n  className,\n  size,\n  ...props\n}: React.ComponentProps<typeof RadioPrimitive.Root> & VariantProps<typeof radioItemVariants>) {\n  // Use the size from context if not provided at the item level.\n  const { size: contextSize } = React.useContext(RadioGroupContext);\n  const effectiveSize = size ?? contextSize;\n\n  return (\n    <RadioPrimitive.Root\n      data-slot=\"radio-group-item\"\n      className={cn(radioItemVariants({ size: effectiveSize }), className)}\n      {...props}\n    >\n      <RadioPrimitive.Indicator data-slot=\"radio-group-indicator\" className=\"relative flex items-center justify-center\">\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioPrimitive.Indicator>\n    </RadioPrimitive.Root>\n  );\n}\n\nexport { RadioGroup, RadioGroupItem };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}