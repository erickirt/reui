{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rating-editable",
  "type": "registry:component",
  "dependencies": [
    "sonner",
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://reui.io/r/alert.json",
    "https://reui.io/r/rating.json"
  ],
  "files": [
    {
      "path": "registry/default/components/rating/editable.tsx",
      "content": "'use client';\n\nimport { useState } from 'react';\nimport { Alert, AlertIcon, AlertTitle } from '@/registry/default/ui/alert';\nimport { Rating } from '@/registry/default/ui/rating';\nimport { CircleAlert } from 'lucide-react';\nimport { toast } from 'sonner';\n\nexport default function RatingEditableDemo() {\n  const [productRating, setProductRating] = useState(0);\n  const handleRatingChange = (rating: number) => {\n    setProductRating(rating);\n\n    toast.custom(\n      (t) => (\n        <Alert variant=\"mono\" icon=\"success\" close={true} onClose={() => toast.dismiss(t)}>\n          <AlertIcon>\n            <CircleAlert />\n          </AlertIcon>\n          <AlertTitle>\n            Rated <span className=\"font-bold\">{rating}</span> out of 5\n          </AlertTitle>\n        </Alert>\n      ),\n      {\n        duration: 5000,\n      },\n    );\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <Rating rating={productRating} editable={true} onRatingChange={handleRatingChange} showValue={true} />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/alert.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\nconst alertVariants = cva('flex items-stretch w-full gap-2 group-[.toaster]:w-(--width)', {\n  variants: {\n    variant: {\n      secondary: '',\n      primary: '',\n      destructive: '',\n      success: '',\n      info: '',\n      mono: '',\n      warning: '',\n    },\n    icon: {\n      primary: '',\n      destructive: '',\n      success: '',\n      info: '',\n      warning: '',\n    },\n    appearance: {\n      solid: '',\n      outline: '',\n      light: '',\n      stroke: 'text-foreground',\n    },\n    size: {\n      lg: 'rounded-lg p-4 gap-3 text-base [&>[data-slot=alert-icon]>svg]:size-6 *:data-slot=alert-icon:mt-0.5 [&_[data-slot=alert-close]]:mt-1',\n      md: 'rounded-lg p-3.5 gap-2.5 text-sm [&>[data-slot=alert-icon]>svg]:size-5 *:data-slot=alert-icon:mt-0 [&_[data-slot=alert-close]]:mt-0.5',\n      sm: 'rounded-md px-3 py-2.5 gap-2 text-xs [&>[data-slot=alert-icon]>svg]:size-4 *:data-alert-icon:mt-0.5 [&_[data-slot=alert-close]]:mt-0.25 [&_[data-slot=alert-close]_svg]:size-3.5',\n    },\n  },\n  compoundVariants: [\n    /* Solid */\n    {\n      variant: 'secondary',\n      appearance: 'solid',\n      className: 'bg-muted text-foreground',\n    },\n    {\n      variant: 'primary',\n      appearance: 'solid',\n      className: 'bg-primary text-primary-foreground',\n    },\n    {\n      variant: 'destructive',\n      appearance: 'solid',\n      className: 'bg-destructive text-destructive-foreground',\n    },\n    {\n      variant: 'success',\n      appearance: 'solid',\n      className:\n        'bg-[var(--color-success,var(--color-green-500))] text-[var(--color-success-foreground,var(--color-white))]',\n    },\n    {\n      variant: 'info',\n      appearance: 'solid',\n      className:\n        'bg-[var(--color-info,var(--color-violet-600))] text-[var(--color-info-foreground,var(--color-white))]',\n    },\n    {\n      variant: 'warning',\n      appearance: 'solid',\n      className:\n        'bg-[var(--color-warning,var(--color-yellow-500))] text-[var(--color-warning-foreground,var(--color-white))]',\n    },\n    {\n      variant: 'mono',\n      appearance: 'solid',\n      className: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black *:data-slot-[alert=close]:text-white',\n    },\n\n    /* Outline */\n    {\n      variant: 'secondary',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-foreground [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'primary',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-primary [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'destructive',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-destructive [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'success',\n      appearance: 'outline',\n      className:\n        'border border-border bg-background text-[var(--color-success,var(--color-green-500))] [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'info',\n      appearance: 'outline',\n      className:\n        'border border-border bg-background text-[var(--color-info,var(--color-violet-600))] [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'warning',\n      appearance: 'outline',\n      className:\n        'border border-border bg-background text-[var(--color-warning,var(--color-yellow-500))] [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'mono',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-foreground [&_[data-slot=alert-close]]:text-foreground',\n    },\n\n    /* Light */\n    {\n      variant: 'secondary',\n      appearance: 'light',\n      className: 'bg-muted border border-border text-foreground',\n    },\n    {\n      variant: 'primary',\n      appearance: 'light',\n      className:\n        'text-foreground bg-[var(--color-primary-soft,var(--color-blue-50))] border border-[var(--color-primary-alpha,var(--color-blue-100))] [&_[data-slot=alert-icon]]:text-primary dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:border-[var(--color-primary-alpha,var(--color-blue-900))]',\n    },\n    {\n      variant: 'destructive',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-destructive-soft,var(--color-red-50))] border border-[var(--color-destructive-alpha,var(--color-red-100))] text-foreground [&_[data-slot=alert-icon]]:text-destructive dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:border-[var(--color-destructive-alpha,var(--color-red-900))] ',\n    },\n    {\n      variant: 'success',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-success-soft,var(--color-green-50))] border border-[var(--color-success-alpha,var(--color-green-200))] text-foreground [&_[data-slot=alert-icon]]:text-[var(--color-success-foreground,var(--color-green-600))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:border-[var(--color-success-alpha,var(--color-green-900))]',\n    },\n    {\n      variant: 'info',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-info-soft,var(--color-violet-50))] border border-[var(--color-info-alpha,var(--color-violet-100))] text-foreground [&_[data-slot=alert-icon]]:text-[var(--color-info-foreground,var(--color-violet-600))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:border-[var(--color-info-alpha,var(--color-violet-900))]',\n    },\n    {\n      variant: 'warning',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-warning-soft,var(--color-yellow-50))] border border-[var(--color-warning-alpha,var(--color-yellow-200))] text-foreground [&_[data-slot=alert-icon]]:text-[var(--color-warning-foreground,var(--color-yellow-600))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:border-[var(--color-warning-alpha,var(--color-yellow-900))]',\n    },\n\n    /* Mono */\n    {\n      variant: 'mono',\n      icon: 'primary',\n      className: '[&_[data-slot=alert-icon]]:text-primary',\n    },\n    {\n      variant: 'mono',\n      icon: 'warning',\n      className: '[&_[data-slot=alert-icon]]:text-[var(--color-warning-foreground,var(--color-yellow-600))]',\n    },\n    {\n      variant: 'mono',\n      icon: 'success',\n      className: '[&_[data-slot=alert-icon]]:text-[var(--color-success-foreground,var(--color-green-600))]',\n    },\n    {\n      variant: 'mono',\n      icon: 'destructive',\n      className: '[&_[data-slot=alert-icon]]:text-destructive',\n    },\n    {\n      variant: 'mono',\n      icon: 'info',\n      className: '[&_[data-slot=alert-icon]]:text-[var(--color-info-foreground,var(--color-violet-600))]',\n    },\n  ],\n  defaultVariants: {\n    variant: 'secondary',\n    appearance: 'solid',\n    size: 'md',\n  },\n});\n\ninterface AlertProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof alertVariants> {\n  close?: boolean;\n  onClose?: () => void;\n}\n\ninterface AlertIconProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof alertVariants> {}\n\nfunction Alert({ className, variant, size, icon, appearance, close = false, onClose, children, ...props }: AlertProps) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant, size, icon, appearance }), className)}\n      {...props}\n    >\n      {children}\n      {close && (\n        <button\n          onClick={onClose}\n          aria-label=\"Dismiss\"\n          data-slot=\"alert-close\"\n          className={cn('group shrink-0 size-4 cursor-pointer')}\n        >\n          <X className=\"opacity-60 group-hover:opacity-100 size-4\" />\n        </button>\n      )}\n    </div>\n  );\n}\n\nfunction AlertTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return <div data-slot=\"alert-title\" className={cn('grow tracking-tight', className)} {...props} />;\n}\n\nfunction AlertIcon({ children, className, ...props }: AlertIconProps) {\n  return (\n    <div data-slot=\"alert-icon\" className={cn('shrink-0', className)} {...props}>\n      {children}\n    </div>\n  );\n}\n\nfunction AlertToolbar({ children, className, ...props }: AlertIconProps) {\n  return (\n    <div data-slot=\"alert-toolbar\" className={cn(className)} {...props}>\n      {children}\n    </div>\n  );\n}\n\nfunction AlertDescription({ className, ...props }: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn('text-sm [&_p]:leading-relaxed [&_p]:mb-2', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertContent({ className, ...props }: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <div\n      data-slot=\"alert-content\"\n      className={cn('space-y-2 [&_[data-slot=alert-title]]:font-semibold', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Alert, AlertContent, AlertDescription, AlertIcon, AlertTitle, AlertToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/rating.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Star } from 'lucide-react';\n\nconst ratingVariants = cva('flex items-center', {\n  variants: {\n    size: {\n      sm: 'gap-2',\n      md: 'gap-2.5',\n      lg: 'gap-3',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n});\n\nconst starVariants = cva('', {\n  variants: {\n    size: {\n      sm: 'w-4 h-4',\n      md: 'w-5 h-5',\n      lg: 'w-6 h-6',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n});\n\nconst valueVariants = cva('text-muted-foreground w-5', {\n  variants: {\n    size: {\n      sm: 'text-xs',\n      md: 'text-sm',\n      lg: 'text-base',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n});\n\nfunction Rating({\n  rating,\n  maxRating = 5,\n  size,\n  className,\n  starClassName,\n  showValue = false,\n  editable = false,\n  onRatingChange,\n  ...props\n}: React.ComponentProps<'div'> &\n  VariantProps<typeof ratingVariants> & {\n    /**\n     * Current rating value (supports decimal values for partial stars)\n     */\n    rating: number;\n    /**\n     * Maximum rating value (number of stars to show)\n     */\n    maxRating?: number;\n    /**\n     * Whether to show the numeric rating value\n     */\n    showValue?: boolean;\n    /**\n     * Class name for the value span\n     */\n    starClassName?: string;\n    /**\n     * Whether the rating is editable (clickable)\n     */\n    editable?: boolean;\n    /**\n     * Callback function called when rating changes\n     */\n    onRatingChange?: (rating: number) => void;\n  }) {\n  const [hoveredRating, setHoveredRating] = React.useState<number | null>(null);\n  const displayRating = editable && hoveredRating !== null ? hoveredRating : rating;\n\n  const handleStarClick = (starRating: number) => {\n    if (editable && onRatingChange) {\n      onRatingChange(starRating);\n    }\n  };\n\n  const handleStarMouseEnter = (starRating: number) => {\n    if (editable) {\n      setHoveredRating(starRating);\n    }\n  };\n\n  const handleStarMouseLeave = () => {\n    if (editable) {\n      setHoveredRating(null);\n    }\n  };\n\n  const renderStars = () => {\n    const stars = [];\n\n    for (let i = 1; i <= maxRating; i++) {\n      const filled = displayRating >= i;\n      const partiallyFilled = displayRating > i - 1 && displayRating < i;\n      const fillPercentage = partiallyFilled ? (displayRating - (i - 1)) * 100 : 0;\n\n      stars.push(\n        <div\n          key={i}\n          className={cn('relative', editable && 'cursor-pointer')}\n          onClick={() => handleStarClick(i)}\n          onMouseEnter={() => handleStarMouseEnter(i)}\n          onMouseLeave={handleStarMouseLeave}\n        >\n          {/* Background star (empty) */}\n          <Star data-slot=\"rating-star-empty\" className={cn(starVariants({ size }), 'text-muted-foreground/30')} />\n\n          {/* Filled star */}\n          <div\n            className=\"absolute inset-0 overflow-hidden\"\n            style={{\n              width: filled ? '100%' : `${fillPercentage}%`,\n            }}\n          >\n            <Star\n              data-slot=\"rating-star-filled\"\n              className={cn(starVariants({ size }), 'text-yellow-400 fill-yellow-400')}\n            />\n          </div>\n        </div>,\n      );\n    }\n\n    return stars;\n  };\n\n  return (\n    <div data-slot=\"rating\" className={cn(ratingVariants({ size }), className)} {...props}>\n      <div className=\"flex items-center\">{renderStars()}</div>\n      {showValue && (\n        <span data-slot=\"rating-value\" className={cn(valueVariants({ size }), starClassName)}>\n          {displayRating.toFixed(1)}\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport { Rating };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}