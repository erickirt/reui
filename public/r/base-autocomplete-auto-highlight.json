{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-autocomplete-auto-highlight",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "@base-ui-components/react",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://reui.io/r/base-autocomplete.json",
    "https://reui.io/r/base-label.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-autocomplete/auto-highlight.tsx",
      "content": "'use client';\n\nimport {\n  Autocomplete,\n  AutocompleteContent,\n  AutocompleteEmpty,\n  AutocompleteInput,\n  AutocompleteItem,\n  AutocompleteList,\n} from '@/registry/default/ui/base-autocomplete';\nimport { Label } from '@/registry/default/ui/base-label';\n\nexport default function AutocompleteDemo() {\n  return (\n    <div className=\"w-full max-w-xs\">\n      <Autocomplete items={tags} autoHighlight>\n        <Label htmlFor=\"tags\">Search tags</Label>\n        <AutocompleteInput id=\"tags\" placeholder=\"e.g. feature\" className=\"mt-2\" />\n        <AutocompleteContent>\n          <AutocompleteEmpty>No tags found.</AutocompleteEmpty>\n          <AutocompleteList>\n            {(tag) => (\n              <AutocompleteItem key={tag.id} value={tag.value}>\n                {tag.value}\n              </AutocompleteItem>\n            )}\n          </AutocompleteList>\n        </AutocompleteContent>\n      </Autocomplete>\n    </div>\n  );\n}\n\ninterface Tag {\n  id: string;\n  value: string;\n}\n\nconst tags: Tag[] = [\n  { id: 't1', value: 'feature' },\n  { id: 't2', value: 'fix' },\n  { id: 't3', value: 'bug' },\n  { id: 't4', value: 'docs' },\n  { id: 't5', value: 'internal' },\n  { id: 't6', value: 'mobile' },\n  { id: 'c-accordion', value: 'component: accordion' },\n  { id: 'c-alert-dialog', value: 'component: alert dialog' },\n  { id: 'c-autocomplete', value: 'component: autocomplete' },\n  { id: 'c-avatar', value: 'component: avatar' },\n  { id: 'c-checkbox', value: 'component: checkbox' },\n  { id: 'c-checkbox-group', value: 'component: checkbox group' },\n  { id: 'c-collapsible', value: 'component: collapsible' },\n  { id: 'c-combobox', value: 'component: combobox' },\n  { id: 'c-context-menu', value: 'component: context menu' },\n  { id: 'c-dialog', value: 'component: dialog' },\n  { id: 'c-field', value: 'component: field' },\n  { id: 'c-fieldset', value: 'component: fieldset' },\n  { id: 'c-filterable-menu', value: 'component: filterable menu' },\n  { id: 'c-form', value: 'component: form' },\n  { id: 'c-input', value: 'component: input' },\n  { id: 'c-menu', value: 'component: menu' },\n  { id: 'c-menubar', value: 'component: menubar' },\n  { id: 'c-meter', value: 'component: meter' },\n  { id: 'c-navigation-menu', value: 'component: navigation menu' },\n  { id: 'c-number-field', value: 'component: number field' },\n  { id: 'c-popover', value: 'component: popover' },\n  { id: 'c-preview-card', value: 'component: preview card' },\n  { id: 'c-progress', value: 'component: progress' },\n  { id: 'c-radio', value: 'component: radio' },\n  { id: 'c-scroll-area', value: 'component: scroll area' },\n  { id: 'c-select', value: 'component: select' },\n  { id: 'c-separator', value: 'component: separator' },\n  { id: 'c-slider', value: 'component: slider' },\n  { id: 'c-switch', value: 'component: switch' },\n  { id: 'c-tabs', value: 'component: tabs' },\n  { id: 'c-toast', value: 'component: toast' },\n  { id: 'c-toggle', value: 'component: toggle' },\n  { id: 'c-toggle-group', value: 'component: toggle group' },\n  { id: 'c-toolbar', value: 'component: toolbar' },\n  { id: 'c-tooltip', value: 'component: tooltip' },\n];\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/base-autocomplete.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Autocomplete as AutocompletePrimitive } from '@base-ui-components/react/autocomplete';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\n// Define input size variants (without file: part)\nconst inputVariants = cva(\n  `\n    flex w-full bg-background border border-input shadow-xs shadow-black/5 transition-[color,box-shadow] text-foreground placeholder:text-muted-foreground/80 \n    focus-visible:ring-ring/30 focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px]     \n    disabled:cursor-not-allowed disabled:opacity-60 \n    [&[readonly]]:bg-muted/80 [&[readonly]]:cursor-not-allowed\n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n  `,\n  {\n    variants: {\n      variant: {\n        lg: 'h-10 px-4 text-sm rounded-md [&~[data-slot=autocomplete-clear]]:end-2.5',\n        md: 'h-9 px-3 text-sm rounded-md [&~[data-slot=autocomplete-clear]]:end-2',\n        sm: 'h-8 px-2.5 text-xs rounded-md [&~[data-slot=autocomplete-clear]]:end-1.75',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n    },\n  },\n);\n\n// Root - Groups all parts of the autocomplete\nfunction Autocomplete({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Root>) {\n  return <AutocompletePrimitive.Root data-slot=\"autocomplete\" {...props} />;\n}\n\n// Value - Displays the selected value\nfunction AutocompleteValue({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Value>) {\n  return <AutocompletePrimitive.Value data-slot=\"autocomplete-value\" {...props} />;\n}\n\n// Input and Clear controls\nfunction AutocompleteControl({ className, ...props }: React.ComponentProps<'div'>) {\n  return <span data-slot=\"autocomplete-control\" className={cn('relative', className)} {...props} />;\n}\n\n// Trigger - A button that opens the autocomplete\nfunction AutocompleteTrigger({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Trigger>) {\n  return <AutocompletePrimitive.Trigger data-slot=\"autocomplete-trigger\" {...props} />;\n}\n\n// Input - The input element for typing\nfunction AutocompleteInput({\n  className,\n  variant = 'md',\n  ...props\n}: React.ComponentProps<typeof AutocompletePrimitive.Input> & VariantProps<typeof inputVariants>) {\n  return (\n    <AutocompletePrimitive.Input\n      data-slot=\"autocomplete-input\"\n      data-variant={variant}\n      className={cn(inputVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\n// Icon - An icon element for the autocomplete\nfunction AutocompleteIcon({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Icon>) {\n  return (\n    <AutocompletePrimitive.Icon\n      data-slot=\"autocomplete-icon\"\n      className={cn('h-4 w-4 opacity-50', className)}\n      {...props}\n    />\n  );\n}\n\n// Status - Displays the status of the autocomplete\nfunction AutocompleteStatus({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Status>) {\n  return (\n    <AutocompletePrimitive.Status\n      data-slot=\"autocomplete-status\"\n      className={cn('px-2 py-1.5 text-sm text-muted-foreground empty:m-0 empty:p-0', className)}\n      {...props}\n    />\n  );\n}\n\n// Portal - A portal element that moves the popup to a different part of the DOM\nfunction AutocompletePortal({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Portal>) {\n  return <AutocompletePrimitive.Portal data-slot=\"autocomplete-portal\" {...props} />;\n}\n\n// Backdrop - An overlay displayed beneath the autocomplete popup\nfunction AutocompleteBackdrop({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Backdrop>) {\n  return <AutocompletePrimitive.Backdrop data-slot=\"autocomplete-backdrop\" {...props} />;\n}\n\n// Positioner - Positions the autocomplete popup against the input\nfunction AutocompletePositioner({\n  className,\n  ...props\n}: React.ComponentProps<typeof AutocompletePrimitive.Positioner>) {\n  return (\n    <AutocompletePrimitive.Positioner\n      data-slot=\"autocomplete-positioner\"\n      className={cn('z-50 outline-none', className)}\n      {...props}\n    />\n  );\n}\n\n// Popup - A container for the autocomplete options\nfunction AutocompletePopup({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Popup>) {\n  return (\n    <AutocompletePrimitive.Popup\n      data-slot=\"autocomplete-popup\"\n      className={cn(\n        'py-1 w-[var(--anchor-width)] max-h-[min(var(--available-height),23rem)] max-w-[var(--available-width)]',\n        'overflow-y-auto scroll-pt-2 scroll-pb-2 overscroll-contain bg-[canvas]',\n        'rounded-md border border-border bg-popover text-popover-foreground shadow-md shadow-black/5',\n        'origin-[var(--transform-origin)] transition-[transform,scale,opacity] data-[ending-style]:scale-90',\n        'data-[ending-style]:opacity-0 data-[starting-style]:scale-90 data-[starting-style]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// List - A container for the autocomplete options\nfunction AutocompleteList({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.List>) {\n  return (\n    <AutocompletePrimitive.List data-slot=\"autocomplete-list\" className={cn('space-y-0.5', className)} {...props} />\n  );\n}\n\n// Collection - A collection of autocomplete items\nfunction AutocompleteCollection({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Collection>) {\n  return <AutocompletePrimitive.Collection data-slot=\"autocomplete-collection\" {...props} />;\n}\n\n// Row - A row container for autocomplete items\nfunction AutocompleteRow({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Row>) {\n  return (\n    <AutocompletePrimitive.Row\n      data-slot=\"autocomplete-row\"\n      className={cn('flex items-center gap-2', className)}\n      {...props}\n    />\n  );\n}\n\n// Item - An individual selectable option in the autocomplete\nfunction AutocompleteItem({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Item>) {\n  return (\n    <AutocompletePrimitive.Item\n      data-slot=\"autocomplete-item\"\n      className={cn(\n        'text-foreground relative flex cursor-default select-none items-center gap-2 rounded-md px-4 py-2 text-sm outline-hidden transition-colors',\n        'data-disabled:pointer-events-none data-disabled:opacity-50',\n        '[&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n        'data-[highlighted]:relative data-[highlighted]:z-0 data-[highlighted]:text-foreground data-[highlighted]:before:absolute',\n        'data-[highlighted]:before:inset-x-1 data-[highlighted]:before:inset-y-0 data-[highlighted]:before:z-[-1] data-[highlighted]:before:rounded-sm data-[highlighted]:before:bg-accent',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport interface AutocompleteContentProps extends React.ComponentProps<typeof AutocompletePrimitive.Popup> {\n  align?: AutocompletePrimitive.Positioner.Props['align'];\n  sideOffset?: AutocompletePrimitive.Positioner.Props['sideOffset'];\n  alignOffset?: AutocompletePrimitive.Positioner.Props['alignOffset'];\n  side?: AutocompletePrimitive.Positioner.Props['side'];\n  showBackdrop?: boolean;\n}\n\nfunction AutocompleteContent({\n  className,\n  children,\n  showBackdrop = false,\n  align = 'start',\n  sideOffset = 4,\n  alignOffset = 0,\n  side = 'bottom',\n  ...props\n}: AutocompleteContentProps) {\n  return (\n    <AutocompletePortal>\n      {showBackdrop && <AutocompleteBackdrop />}\n      <AutocompletePositioner align={align} sideOffset={sideOffset} alignOffset={alignOffset} side={side}>\n        <AutocompletePopup className={className} {...props}>\n          {children}\n        </AutocompletePopup>\n      </AutocompletePositioner>\n    </AutocompletePortal>\n  );\n}\n\n// Group - Groups related autocomplete items with the corresponding label\nfunction AutocompleteGroup({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Group>) {\n  return <AutocompletePrimitive.Group data-slot=\"autocomplete-group\" {...props} />;\n}\n\n// GroupLabel - An accessible label that is automatically associated with its parent group\nfunction AutocompleteGroupLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AutocompletePrimitive.GroupLabel>) {\n  return (\n    <AutocompletePrimitive.GroupLabel\n      data-slot=\"autocomplete-group-label\"\n      className={cn('px-2 py-1.5 text-xs text-muted-foreground font-medium', className)}\n      {...props}\n    />\n  );\n}\n\n// Empty - A component to display when no options are available\nfunction AutocompleteEmpty({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Empty>) {\n  return (\n    <AutocompletePrimitive.Empty\n      data-slot=\"autocomplete-empty\"\n      className={cn('px-2 py-1.5 text-sm text-muted-foreground empty:m-0 empty:p-0', className)}\n      {...props}\n    />\n  );\n}\n\n// Clear - A button to clear the input value\nfunction AutocompleteClear({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AutocompletePrimitive.Clear>) {\n  return (\n    <AutocompletePrimitive.Clear\n      data-slot=\"autocomplete-clear\"\n      className={cn(\n        'absolute cursor-pointer top-1/2 -translate-y-1/2 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100',\n        'focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none',\n        'data-[disabled]:pointer-events-none',\n        className,\n      )}\n      {...props}\n    >\n      {children ? children : <X className=\"size-3.5\" />}\n    </AutocompletePrimitive.Clear>\n  );\n}\n\n// Arrow - Displays an element positioned against the autocomplete anchor\nfunction AutocompleteArrow({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Arrow>) {\n  return <AutocompletePrimitive.Arrow data-slot=\"autocomplete-arrow\" {...props} />;\n}\n\n// Separator - A separator element accessible to screen readers\nfunction AutocompleteSeparator({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Separator>) {\n  return (\n    <AutocompletePrimitive.Separator\n      data-slot=\"autocomplete-separator\"\n      className={cn('my-1.5 h-px bg-muted', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Autocomplete,\n  AutocompleteControl,\n  AutocompleteValue,\n  AutocompleteTrigger,\n  AutocompleteInput,\n  AutocompleteIcon,\n  AutocompleteStatus,\n  AutocompletePortal,\n  AutocompleteBackdrop,\n  AutocompletePositioner,\n  AutocompletePopup,\n  AutocompleteList,\n  AutocompleteCollection,\n  AutocompleteRow,\n  AutocompleteItem,\n  AutocompleteContent,\n  AutocompleteGroup,\n  AutocompleteGroupLabel,\n  AutocompleteEmpty,\n  AutocompleteClear,\n  AutocompleteArrow,\n  AutocompleteSeparator,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({ className, variant, ...props }: React.ComponentProps<'label'> & VariantProps<typeof labelVariants>) {\n  return <label data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}