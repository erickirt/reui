{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-combobox-multi-select",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "@base-ui-components/react",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://reui.io/r/base-combobox.json",
    "https://reui.io/r/base-label.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-combobox/multi-select.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  Combobox,\n  ComboboxChip,\n  ComboboxChipRemove,\n  ComboboxChips,\n  ComboboxContent,\n  ComboboxEmpty,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxItemIndicator,\n  ComboboxList,\n  ComboboxValue,\n} from '@/registry/default/ui/base-combobox';\nimport { Label } from '@/registry/default/ui/base-label';\n\nexport default function MultiSelectComboboxExample() {\n  const containerRef = React.useRef<HTMLDivElement | null>(null);\n  const id = React.useId();\n\n  return (\n    <Combobox items={langs} multiple>\n      <div className=\"w-full max-w-xs flex flex-col gap-3\">\n        <Label htmlFor={id}>Programming languages</Label>\n        <ComboboxChips ref={containerRef}>\n          <ComboboxValue>\n            {(value: ProgrammingLanguage[]) => (\n              <React.Fragment>\n                {value.map((language) => (\n                  <ComboboxChip key={language.id} aria-label={language.value}>\n                    {language.value}\n                    <ComboboxChipRemove />\n                  </ComboboxChip>\n                ))}\n                <ComboboxInput id={id} placeholder={value.length > 0 ? '' : 'e.g. TypeScript'} />\n              </React.Fragment>\n            )}\n          </ComboboxValue>\n        </ComboboxChips>\n      </div>\n\n      <ComboboxContent anchor={containerRef}>\n        <ComboboxEmpty>No languages found.</ComboboxEmpty>\n        <ComboboxList>\n          {(language: ProgrammingLanguage) => (\n            <ComboboxItem key={language.id} value={language}>\n              <ComboboxItemIndicator />\n              <div className=\"col-start-2\">{language.value}</div>\n            </ComboboxItem>\n          )}\n        </ComboboxList>\n      </ComboboxContent>\n    </Combobox>\n  );\n}\n\ninterface ProgrammingLanguage {\n  id: string;\n  value: string;\n}\n\nconst langs: ProgrammingLanguage[] = [\n  { id: 'js', value: 'JavaScript' },\n  { id: 'ts', value: 'TypeScript' },\n  { id: 'py', value: 'Python' },\n  { id: 'java', value: 'Java' },\n  { id: 'cpp', value: 'C++' },\n  { id: 'cs', value: 'C#' },\n  { id: 'php', value: 'PHP' },\n  { id: 'ruby', value: 'Ruby' },\n  { id: 'go', value: 'Go' },\n  { id: 'rust', value: 'Rust' },\n  { id: 'swift', value: 'Swift' },\n];\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/base-combobox.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Combobox as ComboboxPrimitive } from '@base-ui-components/react/combobox';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Check, ChevronDown, X } from 'lucide-react';\n\n// Define input size variants (without file: part)\nconst inputVariants = cva(\n  `\n    flex w-full bg-background border border-input shadow-xs shadow-black/5 transition-[color,box-shadow] text-foreground placeholder:text-muted-foreground/80 \n    focus-visible:ring-ring/30 focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px]     \n    has-[[data-slot=combobox-input]:focus-visible]:ring-ring/30 \n    has-[[data-slot=combobox-input]:focus-visible]:border-ring\n    has-[[data-slot=combobox-input]:focus-visible]:outline-none\n    has-[[data-slot=combobox-input]:focus-visible]:ring-[3px]\n    [&_[data-slot=combobox-input]]:grow\n    disabled:cursor-not-allowed disabled:opacity-60 \n    [&[readonly]]:bg-muted/80 [&[readonly]]:cursor-not-allowed\n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n  `,\n  {\n    variants: {\n      variant: {\n        lg: 'py-1 min-h-10 px-4 text-sm rounded-md [&~[data-slot=combobox-icon]]:end-2.5 [&~[data-slot=combobox-clear]]:end-7',\n        md: 'py-1 min-h-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) rounded-md [&~[data-slot=combobox-icon]]:end-2 [&~[data-slot=combobox-clear]]:end-6',\n        sm: 'py-0.5 min-h-7 px-2.5 text-xs rounded-md [&~[data-slot=combobox-icon]]:end-1.75 [&~[data-slot=combobox-clear]]:end-5.75',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n    },\n  },\n);\n\nconst chipsVariants = cva(\n  [\n    'flex items-center flex-wrap gap-1',\n    '[&_[data-slot=combobox-input]]:py-0 [&_[data-slot=combobox-input]]:px-1.5 has-[[data-slot=combobox-chip]]:[&_[data-slot=combobox-input]]:px-0',\n    '[&_[data-slot=combobox-input]]:min-h-0 [&_[data-slot=combobox-input]]:flex-1',\n    '[&_[data-slot=combobox-input]]:border-0 [&_[data-slot=combobox-input]]:shadow-none [&_[data-slot=combobox-input]]:rounded-none',\n    '[&_[data-slot=combobox-input]]:outline-none [&_[data-slot=combobox-input]]:ring-0',\n  ],\n  {\n    variants: {\n      variant: {\n        sm: 'px-0.75',\n        md: 'px-1',\n        lg: 'px-1.5',\n      },\n    },\n  },\n);\n\n// Root - Groups all parts of the combobox\nfunction Combobox({ ...props }: React.ComponentProps<typeof ComboboxPrimitive.Root>) {\n  return <ComboboxPrimitive.Root data-slot=\"combobox\" {...props} />;\n}\n\n// Input and Clear controls\nfunction ComboboxControl({ className, ...props }: React.ComponentProps<'div'>) {\n  return <span data-slot=\"combobox-control\" className={cn('relative', className)} {...props} />;\n}\n\n// Value - Displays the selected value\nfunction ComboboxValue({ ...props }: React.ComponentProps<typeof ComboboxPrimitive.Value>) {\n  return <ComboboxPrimitive.Value data-slot=\"combobox-value\" {...props} />;\n}\n\n// Input - The input element for typing\nfunction ComboboxInput({\n  className,\n  variant = 'md',\n  ...props\n}: React.ComponentProps<typeof ComboboxPrimitive.Input> & VariantProps<typeof inputVariants>) {\n  return (\n    <ComboboxPrimitive.Input\n      data-slot=\"combobox-input\"\n      data-variant={variant}\n      className={cn(inputVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\n// Status - Displays the status of the combobox\nfunction ComboboxStatus({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Status>) {\n  return (\n    <ComboboxPrimitive.Status\n      data-slot=\"combobox-status\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\n// Portal - A portal element that moves the popup to a different part of the DOM\nfunction ComboboxPortal({ ...props }: React.ComponentProps<typeof ComboboxPrimitive.Portal>) {\n  return <ComboboxPrimitive.Portal data-slot=\"combobox-portal\" {...props} />;\n}\n\n// Backdrop - An overlay displayed beneath the combobox popup\nfunction ComboboxBackdrop({ ...props }: React.ComponentProps<typeof ComboboxPrimitive.Backdrop>) {\n  return <ComboboxPrimitive.Backdrop data-slot=\"combobox-backdrop\" {...props} />;\n}\n\nfunction ComboboxContent({\n  className,\n  children,\n  showBackdrop = false,\n  align = 'start',\n  sideOffset = 4,\n  alignOffset = 0,\n  side = 'bottom',\n  anchor,\n  ...props\n}: React.ComponentProps<typeof ComboboxPrimitive.Popup> & {\n  align?: ComboboxPrimitive.Positioner.Props['align'];\n  sideOffset?: ComboboxPrimitive.Positioner.Props['sideOffset'];\n  alignOffset?: ComboboxPrimitive.Positioner.Props['alignOffset'];\n  anchor?: ComboboxPrimitive.Positioner.Props['anchor'];\n  side?: ComboboxPrimitive.Positioner.Props['side'];\n  showBackdrop?: boolean;\n}) {\n  return (\n    <ComboboxPortal>\n      {showBackdrop && <ComboboxBackdrop />}\n      <ComboboxPositioner align={align} sideOffset={sideOffset} alignOffset={alignOffset} side={side} anchor={anchor}>\n        <ComboboxPopup className={className} {...props}>\n          {children}\n        </ComboboxPopup>\n      </ComboboxPositioner>\n    </ComboboxPortal>\n  );\n}\n\n// Positioner - Positions the combobox popup against the input\nfunction ComboboxPositioner({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Positioner>) {\n  return (\n    <ComboboxPrimitive.Positioner\n      data-slot=\"combobox-positioner\"\n      className={cn('z-50 outline-none', className)}\n      {...props}\n    />\n  );\n}\n\n// Popup - A container for the combobox options\nfunction ComboboxPopup({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Popup>) {\n  return (\n    <ComboboxPrimitive.Popup\n      data-slot=\"combobox-popup\"\n      className={cn(\n        'py-1 w-[var(--anchor-width)] max-h-[min(var(--available-height),23rem)] max-w-[var(--available-width)]',\n        'overflow-y-auto scroll-pt-2 scroll-pb-2 overscroll-contain bg-[canvas]',\n        'rounded-md border border-border bg-popover text-popover-foreground shadow-md shadow-black/5',\n        'origin-[var(--transform-origin)] transition-[transform,scale,opacity] data-[ending-style]:scale-90',\n        'data-[ending-style]:opacity-0 data-[starting-style]:scale-90 data-[starting-style]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// List - A container for the combobox options\nfunction ComboboxList({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.List>) {\n  return <ComboboxPrimitive.List data-slot=\"combobox-list\" className={cn('space-y-0.5', className)} {...props} />;\n}\n\n// Collection - A collection of combobox items\nfunction ComboboxCollection({ ...props }: React.ComponentProps<typeof ComboboxPrimitive.Collection>) {\n  return <ComboboxPrimitive.Collection data-slot=\"combobox-collection\" {...props} />;\n}\n\n// Row - A row container for combobox items\nfunction ComboboxRow({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Row>) {\n  return (\n    <ComboboxPrimitive.Row data-slot=\"combobox-row\" className={cn('flex items-center gap-2', className)} {...props} />\n  );\n}\n\n// Item - An individual selectable option in the combobox\nfunction ComboboxItem({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Item>) {\n  return (\n    <ComboboxPrimitive.Item\n      data-slot=\"combobox-item\"\n      className={cn(\n        'relative cursor-default flex items-center',\n        'text-foreground relative select-none items-center gap-2 rounded-md ps-7 pe-2 py-1.5 text-sm outline-hidden transition-colors data-disabled:pointer-events-none data-disabled:opacity-50',\n        '[&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n        'data-[highlighted]:relative data-[highlighted]:z-0 data-[highlighted]:text-foreground data-[highlighted]:before:absolute data-[highlighted]:before:inset-x-1 data-[highlighted]:before:inset-y-0 data-[highlighted]:before:z-[-1] data-[highlighted]:before:rounded-sm data-[highlighted]:before:bg-accent',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// ItemIndicator - An indicator for selected items\nfunction ComboboxItemIndicator({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.ItemIndicator>) {\n  return (\n    <ComboboxPrimitive.ItemIndicator\n      data-slot=\"combobox-item-indicator\"\n      className={cn('absolute flex top-1/2 -translate-y-1/2 items-center justify-center start-2.5', className)}\n      {...props}\n    >\n      <Check className=\"h-4 w-4 text-primary\" />\n    </ComboboxPrimitive.ItemIndicator>\n  );\n}\n\n// Group - Groups related combobox items with the corresponding label\nfunction ComboboxGroup({ ...props }: React.ComponentProps<typeof ComboboxPrimitive.Group>) {\n  return <ComboboxPrimitive.Group data-slot=\"combobox-group\" {...props} />;\n}\n\n// GroupLabel - An accessible label that is automatically associated with its parent group\nfunction ComboboxGroupLabel({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.GroupLabel>) {\n  return (\n    <ComboboxPrimitive.GroupLabel\n      data-slot=\"combobox-group-label\"\n      className={cn('px-2 py-1.5 text-xs text-muted-foreground font-medium', className)}\n      {...props}\n    />\n  );\n}\n\n// Empty - A component to display when no options are available\nfunction ComboboxEmpty({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Empty>) {\n  return (\n    <ComboboxPrimitive.Empty\n      data-slot=\"combobox-empty\"\n      className={cn('px-2 py-1.5 text-sm text-muted-foreground empty:m-0 empty:p-0', className)}\n      {...props}\n    />\n  );\n}\n\n// Clear - A button to clear the input value\nfunction ComboboxClear({ className, children, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Clear>) {\n  return (\n    <ComboboxPrimitive.Clear\n      data-slot=\"combobox-clear\"\n      className={cn(\n        'absolute cursor-pointer end-6 top-1/2 -translate-y-1/2 rounded-sm opacity-70 ring-offset-background',\n        'transition-opacity opacity-60 hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none',\n        'data-[disabled]:pointer-events-none',\n        className,\n      )}\n      {...props}\n    >\n      {children ? children : <X className=\"size-3.5 opacity-100\" />}\n    </ComboboxPrimitive.Clear>\n  );\n}\n\n// Icon - An icon element for the combobox\nfunction ComboboxIcon({ className, children, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Icon>) {\n  return (\n    <ComboboxPrimitive.Icon\n      data-slot=\"combobox-icon\"\n      className={cn(\n        'absolute cursor-pointer end-2 top-1/2 -translate-y-1/2 rounded-sm opacity-70 ring-offset-background transition-opacity',\n        'opacity-60 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none',\n        'data-[disabled]:pointer-events-none',\n        className,\n      )}\n      {...props}\n    >\n      {children ? children : <ChevronDown className=\"size-3.5 opacity-100\" />}\n    </ComboboxPrimitive.Icon>\n  );\n}\n\n// Arrow - Displays an element positioned against the combobox anchor\nfunction ComboboxArrow({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Arrow>) {\n  return <ComboboxPrimitive.Arrow data-slot=\"combobox-arrow\" className={cn('', className)} {...props} />;\n}\n\n// Trigger - A button that opens the combobox\nfunction ComboboxTrigger({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Trigger>) {\n  return <ComboboxPrimitive.Trigger data-slot=\"combobox-trigger\" className={cn('relative', className)} {...props} />;\n}\n\n// Chips - A container for selected items as chips (for multi-select)\nfunction ComboboxChips({\n  className,\n  variant = 'md',\n  ...props\n}: React.ComponentProps<typeof ComboboxPrimitive.Chips> & VariantProps<typeof inputVariants>) {\n  return (\n    <ComboboxPrimitive.Chips\n      data-slot=\"combobox-chips\"\n      className={cn(inputVariants({ variant }), chipsVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\n// Chip - An individual chip representing a selected item\nfunction ComboboxChip({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Chip>) {\n  return (\n    <ComboboxPrimitive.Chip\n      data-slot=\"combobox-chip\"\n      className={cn(\n        'inline-flex items-center gap-1 rounded-md bg-muted px-2 py-1 text-xs font-medium text-foreground',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// ChipRemove - A button to remove a chip\nfunction ComboboxChipRemove({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ComboboxPrimitive.ChipRemove>) {\n  return (\n    <ComboboxPrimitive.ChipRemove\n      data-slot=\"combobox-chip-remove\"\n      className={cn(\n        'cursor-pointer ms-1 rounded-sm [&_svg]:opacity-60 hover:bg-muted-foreground/20 hover:[&_svg]:opacity-100',\n        className,\n      )}\n      {...props}\n    >\n      {children ? children : <X className=\"size-3.5\" />}\n    </ComboboxPrimitive.ChipRemove>\n  );\n}\n\n// Separator - A separator element accessible to screen readers\nfunction ComboboxSeparator({ className, ...props }: React.ComponentProps<typeof ComboboxPrimitive.Separator>) {\n  return (\n    <ComboboxPrimitive.Separator\n      data-slot=\"combobox-separator\"\n      className={cn('my-1.5 h-px bg-muted', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Combobox,\n  ComboboxContent,\n  ComboboxControl,\n  ComboboxValue,\n  ComboboxInput,\n  ComboboxTrigger,\n  ComboboxIcon,\n  ComboboxStatus,\n  ComboboxPortal,\n  ComboboxBackdrop,\n  ComboboxPositioner,\n  ComboboxPopup,\n  ComboboxList,\n  ComboboxCollection,\n  ComboboxRow,\n  ComboboxItem,\n  ComboboxItemIndicator,\n  ComboboxGroup,\n  ComboboxGroupLabel,\n  ComboboxEmpty,\n  ComboboxClear,\n  ComboboxArrow,\n  ComboboxChips,\n  ComboboxChip,\n  ComboboxChipRemove,\n  ComboboxSeparator,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({ className, variant, ...props }: React.ComponentProps<'label'> & VariantProps<typeof labelVariants>) {\n  return <label data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}