{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-number-field",
  "type": "registry:ui",
  "dependencies": [
    "@base-ui-components/react",
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/default/ui/base-number-field.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { NumberField as NumberFieldPrimitive } from '@base-ui-components/react/number-field';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { MinusIcon, MoveHorizontalIcon, PlusIcon } from 'lucide-react';\n\ntype NumberFieldContextType = {\n  id: string;\n};\n\nconst NumberFieldContext = React.createContext<NumberFieldContextType | null>(null);\n\nconst inputVariants = cva(\n  [\n    'border border-input flex items-center justify-center transition-colors select-none disabled:opacity-50 disabled:pointer-events-none w-20 text-center',\n    'focus-visible:ring-ring/30  focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px]',\n    'aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20',\n  ],\n  {\n    variants: {\n      size: {\n        lg: 'h-10 text-base',\n        md: 'h-9 text-sm',\n        sm: 'h-8 text-sm',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nconst buttonVariants = cva(\n  [\n    'cursor-pointer focus-visible:outline-hidden inline-flex items-center justify-center text-foreground border border-input',\n    'focus-visible:ring-ring/30  focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px]',\n    'hover:bg-muted',\n    'whitespace-nowrap text-sm font-medium ring-offset-background transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-60 [&_svg]:shrink-0',\n  ],\n  {\n    variants: {\n      size: {\n        lg: 'size-10 [&_svg:not([class*=size-])]:size-4',\n        md: 'size-9 [&_svg:not([class*=size-])]:size-3.5',\n        sm: 'size-8 [&_svg:not([class*=size-])]:size-3',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nconst useNumberField = () => {\n  const context = React.useContext(NumberFieldContext);\n\n  if (!context) {\n    throw new Error('useNumberField must be used within a NumberField');\n  }\n\n  return context;\n};\n\nfunction NumberField({\n  id,\n  className,\n  children,\n  size = 'md',\n  ...props\n}: React.ComponentProps<typeof NumberFieldPrimitive.Root> & VariantProps<typeof inputVariants>) {\n  let fieldId = React.useId();\n\n  if (id) {\n    fieldId = id;\n  }\n\n  return (\n    <NumberFieldContext.Provider value={{ id: fieldId }}>\n      <NumberFieldPrimitive.Root\n        id={fieldId}\n        className={cn('flex flex-col items-start gap-1', className)}\n        data-slot=\"number-field\"\n        {...props}\n      >\n        {children}\n        <NumberFieldPrimitive.Group className=\"shadow-xs shadow-black/5 text-foreground flex rounded-md transition-shadow\">\n          <NumberFieldPrimitive.Decrement\n            className={cn(buttonVariants({ size }), 'rounded-s-md border-e-0')}\n            data-slot=\"number-field-decrement\"\n          >\n            <MinusIcon />\n          </NumberFieldPrimitive.Decrement>\n          <NumberFieldPrimitive.Input className={inputVariants({ size })} data-slot=\"number-field-input\" />\n          <NumberFieldPrimitive.Increment\n            className={cn(buttonVariants({ size }), 'rounded-e-md border-s-0')}\n            data-slot=\"number-field-increment\"\n          >\n            <PlusIcon />\n          </NumberFieldPrimitive.Increment>\n        </NumberFieldPrimitive.Group>\n      </NumberFieldPrimitive.Root>\n    </NumberFieldContext.Provider>\n  );\n}\n\nfunction NumberFieldScrubArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NumberFieldPrimitive.ScrubArea>) {\n  const { id: fieldId } = useNumberField();\n\n  return (\n    <NumberFieldPrimitive.ScrubArea\n      className={cn('cursor-ew-resize', className)}\n      data-slot=\"number-field-scrub-area\"\n      {...props}\n    >\n      <label\n        htmlFor={fieldId}\n        className=\"text-foreground cursor-ew-resize text-sm font-medium\"\n        data-slot=\"number-field-label\"\n      >\n        {children}\n      </label>\n      <NumberFieldPrimitive.ScrubAreaCursor\n        className=\"drop-shadow-sm filter\"\n        data-slot=\"number-field-scrub-area-cursor\"\n      >\n        <MoveHorizontalIcon className=\"size-4.5\" />\n      </NumberFieldPrimitive.ScrubAreaCursor>\n    </NumberFieldPrimitive.ScrubArea>\n  );\n}\n\nexport { NumberField, NumberFieldScrubArea };\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}