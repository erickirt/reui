{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-slider-vertical",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-tooltip",
    "@base-ui-components/react"
  ],
  "registryDependencies": [
    "https://reui.io/r/base-slider.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-slider/vertical.tsx",
      "content": "import { Slider } from '@/registry/default/ui/base-slider';\n\nexport default function Component() {\n  return (\n    <div className=\"*:not-first:mt-4 w-full max-w-xs\">\n      <div className=\"flex h-40 justify-center\">\n        <Slider\n          defaultValue={[2, 7]}\n          max={10}\n          orientation=\"vertical\"\n          aria-label=\"Vertical slider\"\n          showTooltip={true}\n          tooltipContent={(value) => `Value: ${value}`}\n          tooltipVariant=\"light\"\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/base-slider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/registry/default/ui/tooltip';\nimport { Slider as SliderPrimitive } from '@base-ui-components/react/slider';\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  showTooltip = false,\n  tooltipVariant = 'dark',\n  tooltipContent,\n  onValueChange,\n  children,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root> & {\n  showTooltip?: boolean;\n  tooltipContent?: (value: number) => React.ReactNode;\n  tooltipVariant?: 'dark' | 'light';\n}) {\n  const [internalValues, setInternalValues] = React.useState<number[]>(\n    Array.isArray(value) ? value : Array.isArray(defaultValue) ? defaultValue : [min, max],\n  );\n\n  React.useEffect(() => {\n    if (value !== undefined) {\n      setInternalValues(Array.isArray(value) ? value : [value]);\n    }\n  }, [value]);\n\n  const handleValueChange = (\n    newValue: number | readonly number[],\n    eventDetails: {\n      reason: 'none';\n      event: Event;\n      cancel: () => void;\n      allowPropagation: () => void;\n      isCanceled: boolean;\n      isPropagationAllowed: boolean;\n    },\n    activeThumbIndex: number,\n  ) => {\n    const values = Array.isArray(newValue) ? [...newValue] : [newValue];\n    setInternalValues(values);\n    if (onValueChange) {\n      onValueChange(values, eventDetails, activeThumbIndex);\n    }\n  };\n\n  const [showTooltipState, setShowTooltipState] = React.useState(false);\n\n  const handlePointerDown = () => {\n    if (showTooltip) {\n      setShowTooltipState(true);\n    }\n  };\n\n  const handlePointerUp = React.useCallback(() => {\n    if (showTooltip) {\n      setShowTooltipState(false);\n    }\n  }, [showTooltip]);\n\n  React.useEffect(() => {\n    if (showTooltip) {\n      document.addEventListener('pointerup', handlePointerUp);\n      return () => {\n        document.removeEventListener('pointerup', handlePointerUp);\n      };\n    }\n  }, [showTooltip, handlePointerUp]);\n\n  const renderThumb = (thumbValue: number, index: number) => {\n    const thumb = (\n      <SliderPrimitive.Thumb\n        key={index}\n        data-slot=\"slider-thumb\"\n        className={cn(\n          'border-primary bg-background ring-ring/20 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] outline-none hover:ring-4 data-[focused]:ring-4 data-[touched]:ring-4 data-[dragging]:ring-4 disabled:pointer-events-none disabled:opacity-50',\n        )}\n        onPointerDown={handlePointerDown}\n      />\n    );\n\n    if (!showTooltip) return thumb;\n\n    return (\n      <TooltipProvider key={index}>\n        <Tooltip open={showTooltipState}>\n          <TooltipTrigger asChild>{thumb}</TooltipTrigger>\n          <TooltipContent\n            className=\"px-2 py-1 text-xs\"\n            sideOffset={8}\n            side={props.orientation === 'vertical' ? 'right' : 'top'}\n            variant={tooltipVariant}\n          >\n            <p>{tooltipContent ? tooltipContent(thumbValue) : thumbValue}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  };\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        'relative flex w-full touch-none select-none items-center data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',\n        className,\n      )}\n      onValueChange={handleValueChange}\n      {...props}\n    >\n      <SliderPrimitive.Control className=\"relative flex h-4 w-full touch-none select-none items-center data-[orientation=vertical]:h-full data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\">\n        <SliderPrimitive.Track className=\"relative h-1.5 w-full overflow-hidden rounded-full bg-accent data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\">\n          <SliderPrimitive.Indicator className=\"absolute h-full bg-primary data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\" />\n        </SliderPrimitive.Track>\n        {showTooltip ? internalValues.map((thumbValue, index) => renderThumb(thumbValue, index)) : children}\n      </SliderPrimitive.Control>\n    </SliderPrimitive.Root>\n  );\n}\n\nfunction SliderThumb({ className, ...props }: React.ComponentProps<typeof SliderPrimitive.Thumb>) {\n  return (\n    <SliderPrimitive.Thumb\n      data-slot=\"slider-thumb\"\n      className={cn(\n        'border-primary bg-background ring-ring/20 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] outline-none hover:ring-4 data-[focused]:ring-4 data-[touched]:ring-4 data-[dragging]:ring-4 disabled:pointer-events-none disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Slider, SliderThumb };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/tooltip.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { cn } from '@/lib/utils';\n\nfunction TooltipProvider({ delayDuration = 0, ...props }: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return <TooltipPrimitive.Provider data-slot=\"tooltip-provider\" delayDuration={delayDuration} {...props} />;\n}\n\nfunction Tooltip({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-foreground text-background animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-foreground fill-foreground z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}