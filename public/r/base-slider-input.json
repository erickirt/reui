{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-slider-input",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "@base-ui-components/react",
    "class-variance-authority",
    "@radix-ui/react-tooltip"
  ],
  "registryDependencies": [
    "https://reui.io/r/base-input.json",
    "https://reui.io/r/base-label.json",
    "https://reui.io/r/base-slider.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-slider/input.tsx",
      "content": "'use client';\n\nimport { useId } from 'react';\nimport { useSliderInput } from '@/registry/default/hooks/use-slider-input';\nimport { Input } from '@/registry/default/ui/base-input';\nimport { Label } from '@/registry/default/ui/base-label';\nimport { Slider, SliderThumb } from '@/registry/default/ui/base-slider';\n\nconst items = [\n  { id: 1, price: 80 },\n  { id: 2, price: 95 },\n  { id: 3, price: 110 },\n  { id: 4, price: 125 },\n  { id: 5, price: 130 },\n  { id: 120, price: 900 },\n];\n\nexport default function PriceRangeSlider() {\n  const id = useId();\n\n  const minValue = Math.min(...items.map((item) => item.price));\n  const maxValue = Math.max(...items.map((item) => item.price));\n\n  const { sliderValues, inputValues, handleSliderChange, handleInputChange, validateAndUpdateValue } = useSliderInput({\n    minValue,\n    maxValue,\n    initialValue: [200, 800],\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Slider */}\n      <div className=\"flex flex-col gap-2.5\">\n        <Label>Price Range</Label>\n        <Slider\n          value={sliderValues}\n          onValueChange={(value) => handleSliderChange(value as [number, number])}\n          min={minValue}\n          max={maxValue}\n          step={10}\n          aria-label=\"Price Range Slider\"\n        >\n          <SliderThumb />\n          <SliderThumb />\n        </Slider>\n      </div>\n\n      {/* Inputs */}\n      <div className=\"flex items-center justify-between gap-4\">\n        <div className=\"space-y-2.5\">\n          <Label htmlFor={`${id}-min`}>Min Price</Label>\n          <Input\n            id={`${id}-min`}\n            type=\"number\"\n            value={inputValues[0]}\n            onChange={(e) => handleInputChange(e, 0)}\n            onBlur={() => validateAndUpdateValue(inputValues[0], 0)}\n            placeholder={`$${minValue}`}\n          />\n        </div>\n        <div className=\"space-y-2.5\">\n          <Label htmlFor={`${id}-max`}>Max Price</Label>\n          <Input\n            id={`${id}-max`}\n            type=\"number\"\n            value={inputValues[1]}\n            onChange={(e) => handleInputChange(e, 1)}\n            onBlur={() => validateAndUpdateValue(inputValues[1], 1)}\n            placeholder={`$${maxValue}`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/hooks/use-slider-input.ts",
      "content": "import * as React from 'react';\nimport { useCallback, useState } from 'react';\n\ninterface UseSliderInputProps {\n  minValue: number;\n  maxValue: number;\n  initialValue: [number, number];\n}\n\nexport function useSliderInput({ minValue, maxValue, initialValue }: UseSliderInputProps) {\n  const [sliderValues, setSliderValues] = useState<[number, number]>(initialValue);\n  const [inputValues, setInputValues] = useState<[number, number]>(initialValue);\n\n  // Handle slider changes and sync with input values\n  const handleSliderChange = useCallback((values: [number, number]) => {\n    setSliderValues(values);\n    setInputValues(values);\n  }, []);\n\n  // Handle input changes for min or max\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>, index: 0 | 1) => {\n      const newValue = parseFloat(e.target.value);\n      if (!isNaN(newValue)) {\n        const updatedInputs = [...inputValues] as [number, number];\n        updatedInputs[index] = newValue;\n        setInputValues(updatedInputs);\n      }\n    },\n    [inputValues],\n  );\n\n  // Validate and update slider values when input loses focus or user presses Enter\n  const validateAndUpdateValue = useCallback(\n    (value: number, index: 0 | 1) => {\n      const updatedSlider = [...sliderValues] as [number, number];\n\n      if (index === 0) {\n        // Min value\n        updatedSlider[0] = Math.max(minValue, Math.min(value, sliderValues[1]));\n      } else {\n        // Max value\n        updatedSlider[1] = Math.min(maxValue, Math.max(value, sliderValues[0]));\n      }\n\n      setSliderValues(updatedSlider);\n      setInputValues(updatedSlider);\n    },\n    [sliderValues, minValue, maxValue],\n  );\n\n  return {\n    setSliderValues,\n    setInputValues,\n    sliderValues,\n    inputValues,\n    handleSliderChange,\n    handleInputChange,\n    validateAndUpdateValue,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-input.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Input as BaseInput } from '@base-ui-components/react/input';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define input size variants\nconst inputVariants = cva(\n  `\n    flex w-full bg-background border border-input shadow-xs shadow-black/5 transition-[color,box-shadow] text-foreground placeholder:text-muted-foreground/80 \n    focus-visible:ring-ring/30  focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px]     \n    disabled:cursor-not-allowed disabled:opacity-60 \n    [&[readonly]]:bg-muted/80 [&[readonly]]:cursor-not-allowed\n    file:h-full [&[type=file]]:py-0 file:border-solid file:border-input file:bg-transparent \n    file:font-medium file:not-italic file:text-foreground file:p-0 file:border-0 file:border-e\n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n  `,\n  {\n    variants: {\n      variant: {\n        lg: 'h-10 px-4 text-sm rounded-md file:pe-4 file:me-4',\n        md: 'h-9 px-3 text-sm rounded-md file:pe-3 file:me-3',\n        sm: 'h-8 px-2.5 text-xs rounded-md file:pe-2.5 file:me-2.5',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n    },\n  },\n);\n\nconst inputAddonVariants = cva(\n  'flex items-center shrink-0 justify-center bg-muted border border-input shadow-xs shadow-[rgba(0,0,0,0.05)] text-secondary-foreground [&_svg]:text-secondary-foreground/60',\n  {\n    variants: {\n      variant: {\n        lg: 'rounded-md h-10 min-w-10 px-4 text-sm [&_svg:not([class*=size-])]:size-4.5',\n        md: 'rounded-md h-9 min-w-9 px-3 text-sm [&_svg:not([class*=size-])]:size-4.5',\n        sm: 'rounded-md h-8 min-w-7 text-xs px-2.5 [&_svg:not([class*=size-])]:size-3.5',\n      },\n      mode: {\n        default: '',\n        icon: 'px-0 justify-center',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n      mode: 'default',\n    },\n  },\n);\n\nconst inputGroupVariants = cva(\n  `\n    flex items-stretch\n    [&_[data-slot=input]]:grow\n    [&_[data-slot=input-addon]:has(+[data-slot=input])]:rounded-e-none [&_[data-slot=input-addon]:has(+[data-slot=input])]:border-e-0\n    [&_[data-slot=input-addon]:has(+[data-slot=datefield])]:rounded-e-none [&_[data-slot=input-addon]:has(+[data-slot=datefield])]:border-e-0 \n    [&_[data-slot=input]+[data-slot=input-addon]]:rounded-s-none [&_[data-slot=input]+[data-slot=input-addon]]:border-s-0\n    [&_[data-slot=input-addon]:has(+[data-slot=button])]:rounded-e-none\n    [&_[data-slot=input]+[data-slot=button]]:rounded-s-none\n    [&_[data-slot=button]+[data-slot=input]]:rounded-s-none\n    [&_[data-slot=input-addon]+[data-slot=input]]:rounded-s-none\n    [&_[data-slot=input-addon]+[data-slot=datefield]]:[&_[data-slot=input]]:rounded-s-none\n    [&_[data-slot=input]:has(+[data-slot=button])]:rounded-e-none\n    [&_[data-slot=input]:has(+[data-slot=input-addon])]:rounded-e-none\n    [&_[data-slot=datefield]]:grow\n    [&_[data-slot=datefield]+[data-slot=input-addon]]:rounded-s-none \n    [&_[data-slot=datefield]+[data-slot=input-addon]]:border-s-0\n    [&_[data-slot=datefield]:has(~[data-slot=input-addon])]:[&_[data-slot=input]]:rounded-e-none\n    [&_[data-slot=datefield]~[data-slot=input-addon]]:rounded-s-none\n  `,\n  {\n    variants: {},\n    defaultVariants: {},\n  },\n);\n\nconst inputWrapperVariants = cva(\n  `\n    flex items-center gap-1.5\n    has-[:focus-visible]:ring-ring/30 \n    has-[:focus-visible]:border-ring\n    has-[:focus-visible]:outline-none \n    has-[:focus-visible]:ring-[3px]\n\n    [&_[data-slot=datefield]]:grow \n    [&_[data-slot=input]]:data-focus-within:ring-transparent  \n    [&_[data-slot=input]]:data-focus-within:ring-0 \n    [&_[data-slot=input]]:data-focus-within:border-0 \n    [&_[data-slot=input]]:flex \n    [&_[data-slot=input]]:w-full \n    [&_[data-slot=input]]:outline-none \n    [&_[data-slot=input]]:transition-colors \n    [&_[data-slot=input]]:text-foreground\n    [&_[data-slot=input]]:placeholder:text-muted-foreground \n    [&_[data-slot=input]]:border-0 \n    [&_[data-slot=input]]:bg-transparent \n    [&_[data-slot=input]]:p-0\n    [&_[data-slot=input]]:shadow-none \n    [&_[data-slot=input]]:focus-visible:ring-0 \n    [&_[data-slot=input]]:h-auto \n    [&_[data-slot=input]]:disabled:cursor-not-allowed\n    [&_[data-slot=input]]:disabled:opacity-50    \n\n    [&_svg]:text-muted-foreground \n\n    has-[[aria-invalid=true]]:border-destructive/60 \n    has-[[aria-invalid=true]]:ring-destructive/10 \n    dark:has-[[aria-invalid=true]]:border-destructive \n    dark:has-[[aria-invalid=true]]:ring-destructive/20    \n  `,\n  {\n    variants: {\n      variant: {\n        sm: 'gap-1.25 [&_svg:not([class*=size-])]:size-3.5',\n        md: 'gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        lg: 'gap-1.5 [&_svg:not([class*=size-])]:size-4',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n    },\n  },\n);\n\nfunction Input({\n  className,\n  type,\n  variant,\n  ...props\n}: React.ComponentProps<typeof BaseInput> & VariantProps<typeof inputVariants>) {\n  return <input data-slot=\"input\" type={type} className={cn(inputVariants({ variant }), className)} {...props} />;\n}\n\nfunction InputAddon({\n  className,\n  variant,\n  mode,\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof inputAddonVariants>) {\n  return <div data-slot=\"input-addon\" className={cn(inputAddonVariants({ variant, mode }), className)} {...props} />;\n}\n\nfunction InputGroup({ className, ...props }: React.ComponentProps<'div'> & VariantProps<typeof inputGroupVariants>) {\n  return <div data-slot=\"input-group\" className={cn(inputGroupVariants(), className)} {...props} />;\n}\n\nfunction InputWrapper({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof inputWrapperVariants>) {\n  return (\n    <div\n      data-slot=\"input-wrapper\"\n      className={cn(inputVariants({ variant }), inputWrapperVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Input, InputAddon, InputGroup, InputWrapper, inputVariants, inputAddonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({ className, variant, ...props }: React.ComponentProps<'label'> & VariantProps<typeof labelVariants>) {\n  return <label data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-slider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/registry/default/ui/tooltip';\nimport { Slider as SliderPrimitive } from '@base-ui-components/react/slider';\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  showTooltip = false,\n  tooltipVariant = 'dark',\n  tooltipContent,\n  onValueChange,\n  children,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root> & {\n  showTooltip?: boolean;\n  tooltipContent?: (value: number) => React.ReactNode;\n  tooltipVariant?: 'dark' | 'light';\n}) {\n  const [internalValues, setInternalValues] = React.useState<number[]>(\n    Array.isArray(value) ? value : Array.isArray(defaultValue) ? defaultValue : [min, max],\n  );\n\n  React.useEffect(() => {\n    if (value !== undefined) {\n      setInternalValues(Array.isArray(value) ? value : [value]);\n    }\n  }, [value]);\n\n  const handleValueChange = (\n    newValue: number | readonly number[],\n    eventDetails: {\n      reason: 'none';\n      event: Event;\n      cancel: () => void;\n      allowPropagation: () => void;\n      isCanceled: boolean;\n      isPropagationAllowed: boolean;\n    },\n    activeThumbIndex: number,\n  ) => {\n    const values = Array.isArray(newValue) ? [...newValue] : [newValue];\n    setInternalValues(values);\n    if (onValueChange) {\n      onValueChange(values, eventDetails, activeThumbIndex);\n    }\n  };\n\n  const [showTooltipState, setShowTooltipState] = React.useState(false);\n\n  const handlePointerDown = () => {\n    if (showTooltip) {\n      setShowTooltipState(true);\n    }\n  };\n\n  const handlePointerUp = React.useCallback(() => {\n    if (showTooltip) {\n      setShowTooltipState(false);\n    }\n  }, [showTooltip]);\n\n  React.useEffect(() => {\n    if (showTooltip) {\n      document.addEventListener('pointerup', handlePointerUp);\n      return () => {\n        document.removeEventListener('pointerup', handlePointerUp);\n      };\n    }\n  }, [showTooltip, handlePointerUp]);\n\n  const renderThumb = (thumbValue: number, index: number) => {\n    const thumb = (\n      <SliderPrimitive.Thumb\n        key={index}\n        data-slot=\"slider-thumb\"\n        className={cn(\n          'border-primary bg-background ring-ring/20 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] outline-none hover:ring-4 data-[focused]:ring-4 data-[touched]:ring-4 data-[dragging]:ring-4 disabled:pointer-events-none disabled:opacity-50',\n        )}\n        onPointerDown={handlePointerDown}\n      />\n    );\n\n    if (!showTooltip) return thumb;\n\n    return (\n      <TooltipProvider key={index}>\n        <Tooltip open={showTooltipState}>\n          <TooltipTrigger asChild>{thumb}</TooltipTrigger>\n          <TooltipContent\n            className=\"px-2 py-1 text-xs\"\n            sideOffset={8}\n            side={props.orientation === 'vertical' ? 'right' : 'top'}\n            variant={tooltipVariant}\n          >\n            <p>{tooltipContent ? tooltipContent(thumbValue) : thumbValue}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  };\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        'relative flex w-full touch-none select-none items-center data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',\n        className,\n      )}\n      onValueChange={handleValueChange}\n      {...props}\n    >\n      <SliderPrimitive.Control className=\"relative flex h-4 w-full touch-none select-none items-center data-[orientation=vertical]:h-full data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\">\n        <SliderPrimitive.Track className=\"relative h-1.5 w-full overflow-hidden rounded-full bg-accent data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\">\n          <SliderPrimitive.Indicator className=\"absolute h-full bg-primary data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\" />\n        </SliderPrimitive.Track>\n        {showTooltip ? internalValues.map((thumbValue, index) => renderThumb(thumbValue, index)) : children}\n      </SliderPrimitive.Control>\n    </SliderPrimitive.Root>\n  );\n}\n\nfunction SliderThumb({ className, ...props }: React.ComponentProps<typeof SliderPrimitive.Thumb>) {\n  return (\n    <SliderPrimitive.Thumb\n      data-slot=\"slider-thumb\"\n      className={cn(\n        'border-primary bg-background ring-ring/20 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] outline-none hover:ring-4 data-[focused]:ring-4 data-[touched]:ring-4 data-[dragging]:ring-4 disabled:pointer-events-none disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Slider, SliderThumb };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/tooltip.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { cn } from '@/lib/utils';\n\nfunction TooltipProvider({ delayDuration = 0, ...props }: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return <TooltipPrimitive.Provider data-slot=\"tooltip-provider\" delayDuration={delayDuration} {...props} />;\n}\n\nfunction Tooltip({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-foreground text-background animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-foreground fill-foreground z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}