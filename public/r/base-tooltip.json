{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-tooltip",
  "type": "registry:ui",
  "dependencies": [
    "@base-ui-components/react",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/default/ui/base-tooltip.tsx",
      "content": "import * as React from 'react';\nimport { Tooltip as TooltipPrimitive } from '@base-ui-components/react/tooltip';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nfunction TooltipProvider({ delay = 0, ...props }: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return <TooltipPrimitive.Provider data-slot=\"tooltip-provider\" delay={delay} {...props} />;\n}\n\nfunction Tooltip({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />;\n}\n\nfunction TooltipTrigger({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nconst tooltipVariants = cva(\n  'z-55 animate-in fade-in-0 zoom-in-95 data-[closed]:animate-out data-[closed]:fade-out-0 data-[closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n  {\n    variants: {\n      variant: {\n        default:\n          'dark:border dark:border-border bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black shadow-md shadow-black/5',\n        light: 'border border-border bg-background text-foreground shadow-md shadow-black/5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nexport interface TooltipContentProps\n  extends React.ComponentProps<typeof TooltipPrimitive.Popup>,\n    VariantProps<typeof tooltipVariants> {\n  sideOffset?: TooltipPrimitive.Positioner.Props['sideOffset'];\n  side?: TooltipPrimitive.Positioner.Props['side'];\n  align?: TooltipPrimitive.Positioner.Props['align'];\n  alignOffset?: TooltipPrimitive.Positioner.Props['alignOffset'];\n  showArrow?: boolean;\n}\n\nfunction TooltipContent({\n  className,\n  children,\n  variant,\n  sideOffset = 8,\n  showArrow = true,\n  align,\n  alignOffset = 0,\n  side,\n  ...props\n}: TooltipContentProps) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Positioner\n        data-slot=\"tooltip-positioner\"\n        sideOffset={sideOffset}\n        side={side}\n        align={align}\n        alignOffset={alignOffset}\n        className=\"z-50\"\n      >\n        <TooltipPrimitive.Popup\n          data-slot=\"tooltip-content\"\n          className={cn(tooltipVariants({ variant }), className)}\n          {...props}\n        >\n          {children}\n          {showArrow && <TooltipArrow variant={variant} />}\n        </TooltipPrimitive.Popup>\n      </TooltipPrimitive.Positioner>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nconst tooltipArrowBackgroundVariants = cva('', {\n  variants: {\n    variant: {\n      default: 'fill-zinc-950 dark:fill-zinc-300',\n      light: 'fill-background',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst tooltipArrowStrokeVariants = cva('', {\n  variants: {\n    variant: {\n      default: '',\n      light: 'stroke-background stroke-border',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nexport interface TooltipArrowProps\n  extends React.ComponentProps<typeof TooltipPrimitive.Arrow>,\n    VariantProps<typeof tooltipArrowBackgroundVariants> {}\n\nfunction TooltipArrow({ className, variant, ...props }: TooltipArrowProps) {\n  return (\n    <TooltipPrimitive.Arrow\n      data-slot=\"tooltip-arrow\"\n      className={cn(\n        'z-50 data-[side=bottom]:top-[-8px] data-[side=left]:right-[-13px] data-[side=left]:rotate-90 data-[side=right]:left-[-13px] data-[side=right]:-rotate-90 data-[side=top]:bottom-[-8px] data-[side=top]:rotate-180',\n        className,\n      )}\n      {...props}\n    >\n      <svg width=\"20\" height=\"10\" viewBox=\"0 0 20 10\" fill=\"none\">\n        <path\n          d=\"M9.66437 2.60207L4.80758 6.97318C4.07308 7.63423 3.11989 8 2.13172 8H0V9H20V8H18.5349C17.5468 8 16.5936 7.63423 15.8591 6.97318L11.0023 2.60207C10.622 2.2598 10.0447 2.25979 9.66437 2.60207Z\"\n          className={cn(tooltipArrowBackgroundVariants({ variant }))}\n        />\n        <path\n          d=\"M10.3333 3.34539L5.47654 7.71648C4.55842 8.54279 3.36693 9 2.13172 9H0V8H2.13172C3.11989 8 4.07308 7.63423 4.80758 6.97318L9.66437 2.60207C10.0447 2.25979 10.622 2.2598 11.0023 2.60207L15.8591 6.97318C16.5936 7.63423 17.5468 8 18.5349 8H20V9H18.5349C17.2998 9 16.1083 8.54278 15.1901 7.71648L10.3333 3.34539Z\"\n          className={cn(tooltipArrowStrokeVariants({ variant }))}\n        />\n      </svg>\n    </TooltipPrimitive.Arrow>\n  );\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider, TooltipArrow, tooltipVariants };\n",
      "type": "registry:ui"
    }
  ]
}