{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-autocomplete-grouped",
  "type": "registry:component",
  "dependencies": [
    "@base-ui-components/react",
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://reui.io/r/base-autocomplete.json",
    "https://reui.io/r/base-avatar.json",
    "https://reui.io/r/base-label.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-autocomplete/grouped.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  Autocomplete,\n  AutocompleteClear,\n  AutocompleteCollection,\n  AutocompleteContent,\n  AutocompleteControl,\n  AutocompleteEmpty,\n  AutocompleteGroup,\n  AutocompleteGroupLabel,\n  AutocompleteInput,\n  AutocompleteItem,\n  AutocompleteList,\n} from '@/registry/default/ui/base-autocomplete';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/registry/default/ui/base-avatar';\nimport { Label } from '@/registry/default/ui/base-label';\nimport { Autocomplete as BaseAutocomplete } from '@base-ui-components/react/autocomplete';\n\nexport default function GroupedAutocompleteExample() {\n  const [value, setValue] = React.useState('');\n  const [open, setOpen] = React.useState(false);\n\n  const { contains } = BaseAutocomplete.useFilter({ sensitivity: 'base' });\n\n  const filteredItems = React.useMemo(() => {\n    if (!value) return groupedUsers;\n\n    return groupedUsers\n      .map((group) => ({\n        ...group,\n        items: (group.items || []).filter(\n          (item) =>\n            contains(item.name || '', value) ||\n            contains(item.group || '', value) ||\n            contains(item.position || '', value),\n        ),\n      }))\n      .filter((group) => group.items && group.items.length > 0);\n  }, [value, contains]);\n\n  return (\n    <div className=\"w-full max-w-xs\">\n      <Autocomplete\n        items={filteredItems}\n        value={value}\n        onValueChange={setValue}\n        open={open}\n        onOpenChange={setOpen}\n        itemToStringValue={(item: unknown) => (item as User).name}\n        filter={null}\n      >\n        <Label className=\"flex flex-col gap-2\">\n          Search users\n          <AutocompleteControl>\n            <AutocompleteInput placeholder=\"e.g. John, Developer, Marketing\" />\n            {value && <AutocompleteClear />}\n          </AutocompleteControl>\n        </Label>\n\n        {open && (\n          <AutocompleteContent className=\"pt-0\">\n            {filteredItems.length === 0 ? (\n              <AutocompleteEmpty>No matching users found.</AutocompleteEmpty>\n            ) : (\n              <AutocompleteList className=\"p-0\">\n                {(group: UserGroup) => (\n                  <AutocompleteGroup key={group.group} items={group.items} className=\"py-0\">\n                    <AutocompleteGroupLabel className=\"sticky top-0 z-10 bg-background py-3 text-xs font-medium uppercase text-foreground\">\n                      {group.group}\n                    </AutocompleteGroupLabel>\n                    <AutocompleteCollection>\n                      {(item: User) => (\n                        <AutocompleteItem key={item.id} value={item} className=\"rounded-lg flex items-center gap-2.5\">\n                          <Avatar className=\"size-9\">\n                            <AvatarImage src={item.avatar} alt={item.name || 'User'} />\n                            <AvatarFallback>\n                              {(item.name || 'U')\n                                .split(' ')\n                                .map((n) => n[0])\n                                .join('')}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"font-medium truncate\">{item.name || 'Unknown'}</div>\n                            <div className=\"text-sm text-muted-foreground truncate\">\n                              {item.position || 'No position available'}\n                            </div>\n                          </div>\n                        </AutocompleteItem>\n                      )}\n                    </AutocompleteCollection>\n                  </AutocompleteGroup>\n                )}\n              </AutocompleteList>\n            )}\n          </AutocompleteContent>\n        )}\n      </Autocomplete>\n    </div>\n  );\n}\n\ninterface User {\n  id: string;\n  name: string;\n  group: string;\n  position: string;\n  avatar: string;\n  status: 'Active' | 'Inactive' | 'Away';\n}\n\ninterface UserGroup {\n  group: string;\n  items: User[];\n}\n\nconst usersData: User[] = [\n  // Development Team\n  {\n    id: 'john-doe',\n    name: 'John Doe',\n    group: 'Development Team',\n    position: 'Senior Frontend Developer',\n    avatar: 'https://randomuser.me/api/portraits/men/1.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'jane-smith',\n    name: 'Jane Smith',\n    group: 'Development Team',\n    position: 'Full Stack Developer',\n    avatar: 'https://randomuser.me/api/portraits/women/2.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'mike-wilson',\n    name: 'Mike Wilson',\n    group: 'Development Team',\n    position: 'Backend Developer',\n    avatar: 'https://randomuser.me/api/portraits/men/3.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'sarah-johnson',\n    name: 'Sarah Johnson',\n    group: 'Development Team',\n    position: 'DevOps Engineer',\n    avatar: 'https://randomuser.me/api/portraits/women/4.jpg',\n    status: 'Away',\n  },\n  {\n    id: 'david-brown',\n    name: 'David Brown',\n    group: 'Development Team',\n    position: 'Mobile Developer',\n    avatar: 'https://randomuser.me/api/portraits/men/5.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'lisa-garcia',\n    name: 'Lisa Garcia',\n    group: 'Development Team',\n    position: 'UI/UX Developer',\n    avatar: 'https://randomuser.me/api/portraits/women/6.jpg',\n    status: 'Active',\n  },\n\n  // Design Team\n  {\n    id: 'alex-martinez',\n    name: 'Alex Martinez',\n    group: 'Design Team',\n    position: 'Lead UX Designer',\n    avatar: 'https://randomuser.me/api/portraits/men/7.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'emma-davis',\n    name: 'Emma Davis',\n    group: 'Design Team',\n    position: 'UI Designer',\n    avatar: 'https://randomuser.me/api/portraits/women/8.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'chris-taylor',\n    name: 'Chris Taylor',\n    group: 'Design Team',\n    position: 'Product Designer',\n    avatar: 'https://randomuser.me/api/portraits/men/9.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'olivia-anderson',\n    name: 'Olivia Anderson',\n    group: 'Design Team',\n    position: 'Visual Designer',\n    avatar: 'https://randomuser.me/api/portraits/women/10.jpg',\n    status: 'Inactive',\n  },\n\n  // Marketing Team\n  {\n    id: 'james-moore',\n    name: 'James Moore',\n    group: 'Marketing Team',\n    position: 'Marketing Manager',\n    avatar: 'https://randomuser.me/api/portraits/men/11.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'sophia-white',\n    name: 'Sophia White',\n    group: 'Marketing Team',\n    position: 'Content Marketing Specialist',\n    avatar: 'https://randomuser.me/api/portraits/women/12.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'william-harris',\n    name: 'William Harris',\n    group: 'Marketing Team',\n    position: 'Digital Marketing Specialist',\n    avatar: 'https://randomuser.me/api/portraits/men/13.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'ava-martin',\n    name: 'Ava Martin',\n    group: 'Marketing Team',\n    position: 'Social Media Manager',\n    avatar: 'https://randomuser.me/api/portraits/women/14.jpg',\n    status: 'Away',\n  },\n\n  // Sales Team\n  {\n    id: 'ethan-thompson',\n    name: 'Ethan Thompson',\n    group: 'Sales Team',\n    position: 'Sales Director',\n    avatar: 'https://randomuser.me/api/portraits/men/15.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'mia-garcia',\n    name: 'Mia Garcia',\n    group: 'Sales Team',\n    position: 'Account Executive',\n    avatar: 'https://randomuser.me/api/portraits/women/16.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'noah-martinez',\n    name: 'Noah Martinez',\n    group: 'Sales Team',\n    position: 'Sales Representative',\n    avatar: 'https://randomuser.me/api/portraits/men/17.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'isabella-rodriguez',\n    name: 'Isabella Rodriguez',\n    group: 'Sales Team',\n    position: 'Business Development Manager',\n    avatar: 'https://randomuser.me/api/portraits/women/18.jpg',\n    status: 'Active',\n  },\n\n  // Management Team\n  {\n    id: 'lucas-lee',\n    name: 'Lucas Lee',\n    group: 'Management Team',\n    position: 'CEO',\n    avatar: 'https://randomuser.me/api/portraits/men/19.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'charlotte-walker',\n    name: 'Charlotte Walker',\n    group: 'Management Team',\n    position: 'CTO',\n    avatar: 'https://randomuser.me/api/portraits/women/20.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'benjamin-hall',\n    name: 'Benjamin Hall',\n    group: 'Management Team',\n    position: 'VP of Engineering',\n    avatar: 'https://randomuser.me/api/portraits/men/21.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'amelia-allen',\n    name: 'Amelia Allen',\n    group: 'Management Team',\n    position: 'VP of Marketing',\n    avatar: 'https://randomuser.me/api/portraits/women/22.jpg',\n    status: 'Active',\n  },\n\n  // Support Team\n  {\n    id: 'henry-young',\n    name: 'Henry Young',\n    group: 'Support Team',\n    position: 'Customer Success Manager',\n    avatar: 'https://randomuser.me/api/portraits/men/23.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'grace-king',\n    name: 'Grace King',\n    group: 'Support Team',\n    position: 'Technical Support Specialist',\n    avatar: 'https://randomuser.me/api/portraits/women/24.jpg',\n    status: 'Active',\n  },\n  {\n    id: 'sebastian-wright',\n    name: 'Sebastian Wright',\n    group: 'Support Team',\n    position: 'Customer Support Representative',\n    avatar: 'https://randomuser.me/api/portraits/men/25.jpg',\n    status: 'Away',\n  },\n  {\n    id: 'lily-lopez',\n    name: 'Lily Lopez',\n    group: 'Support Team',\n    position: 'Help Desk Technician',\n    avatar: 'https://randomuser.me/api/portraits/women/26.jpg',\n    status: 'Active',\n  },\n];\n\nfunction groupUsers(users: User[]): UserGroup[] {\n  const groups: { [key: string]: User[] } = {};\n  users.forEach((item) => {\n    (groups[item.group] ??= []).push(item);\n  });\n\n  // Sort by status within each group (Active first, then Away, then Inactive)\n  Object.keys(groups).forEach((group) => {\n    groups[group].sort((a, b) => {\n      const statusOrder = { Active: 0, Away: 1, Inactive: 2 };\n      return statusOrder[a.status] - statusOrder[b.status];\n    });\n  });\n\n  const order = ['Management Team', 'Development Team', 'Design Team', 'Marketing Team', 'Sales Team', 'Support Team'];\n  return order.map((group) => ({ group, items: groups[group] ?? [] }));\n}\n\nconst groupedUsers: UserGroup[] = groupUsers(usersData);\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/base-autocomplete.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Autocomplete as AutocompletePrimitive } from '@base-ui-components/react/autocomplete';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\n// Define input size variants (without file: part)\nconst inputVariants = cva(\n  `\n    flex w-full bg-background border border-input shadow-xs shadow-black/5 transition-[color,box-shadow] text-foreground placeholder:text-muted-foreground/80 \n    focus-visible:ring-ring/30 focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px]     \n    disabled:cursor-not-allowed disabled:opacity-60 \n    [&[readonly]]:bg-muted/80 [&[readonly]]:cursor-not-allowed\n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n  `,\n  {\n    variants: {\n      variant: {\n        lg: 'h-10 px-4 text-sm rounded-md [&~[data-slot=autocomplete-clear]]:end-2.5',\n        md: 'h-9 px-3 text-sm rounded-md [&~[data-slot=autocomplete-clear]]:end-2',\n        sm: 'h-8 px-2.5 text-xs rounded-md [&~[data-slot=autocomplete-clear]]:end-1.75',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n    },\n  },\n);\n\n// Root - Groups all parts of the autocomplete\nfunction Autocomplete({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Root>) {\n  return <AutocompletePrimitive.Root data-slot=\"autocomplete\" {...props} />;\n}\n\n// Value - Displays the selected value\nfunction AutocompleteValue({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Value>) {\n  return <AutocompletePrimitive.Value data-slot=\"autocomplete-value\" {...props} />;\n}\n\n// Input and Clear controls\nfunction AutocompleteControl({ className, ...props }: React.ComponentProps<'div'>) {\n  return <span data-slot=\"autocomplete-control\" className={cn('relative', className)} {...props} />;\n}\n\n// Trigger - A button that opens the autocomplete\nfunction AutocompleteTrigger({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Trigger>) {\n  return <AutocompletePrimitive.Trigger data-slot=\"autocomplete-trigger\" {...props} />;\n}\n\n// Input - The input element for typing\nfunction AutocompleteInput({\n  className,\n  variant = 'md',\n  ...props\n}: React.ComponentProps<typeof AutocompletePrimitive.Input> & VariantProps<typeof inputVariants>) {\n  return (\n    <AutocompletePrimitive.Input\n      data-slot=\"autocomplete-input\"\n      data-variant={variant}\n      className={cn(inputVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\n// Icon - An icon element for the autocomplete\nfunction AutocompleteIcon({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Icon>) {\n  return (\n    <AutocompletePrimitive.Icon\n      data-slot=\"autocomplete-icon\"\n      className={cn('h-4 w-4 opacity-50', className)}\n      {...props}\n    />\n  );\n}\n\n// Status - Displays the status of the autocomplete\nfunction AutocompleteStatus({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Status>) {\n  return (\n    <AutocompletePrimitive.Status\n      data-slot=\"autocomplete-status\"\n      className={cn('px-2 py-1.5 text-sm text-muted-foreground empty:m-0 empty:p-0', className)}\n      {...props}\n    />\n  );\n}\n\n// Portal - A portal element that moves the popup to a different part of the DOM\nfunction AutocompletePortal({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Portal>) {\n  return <AutocompletePrimitive.Portal data-slot=\"autocomplete-portal\" {...props} />;\n}\n\n// Backdrop - An overlay displayed beneath the autocomplete popup\nfunction AutocompleteBackdrop({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Backdrop>) {\n  return <AutocompletePrimitive.Backdrop data-slot=\"autocomplete-backdrop\" {...props} />;\n}\n\n// Positioner - Positions the autocomplete popup against the input\nfunction AutocompletePositioner({\n  className,\n  ...props\n}: React.ComponentProps<typeof AutocompletePrimitive.Positioner>) {\n  return (\n    <AutocompletePrimitive.Positioner\n      data-slot=\"autocomplete-positioner\"\n      className={cn('z-50 outline-none', className)}\n      {...props}\n    />\n  );\n}\n\n// Popup - A container for the autocomplete options\nfunction AutocompletePopup({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Popup>) {\n  return (\n    <AutocompletePrimitive.Popup\n      data-slot=\"autocomplete-popup\"\n      className={cn(\n        'py-1 w-[var(--anchor-width)] max-h-[min(var(--available-height),23rem)] max-w-[var(--available-width)]',\n        'overflow-y-auto scroll-pt-2 scroll-pb-2 overscroll-contain bg-[canvas]',\n        'rounded-md border border-border bg-popover text-popover-foreground shadow-md shadow-black/5',\n        'origin-[var(--transform-origin)] transition-[transform,scale,opacity] data-[ending-style]:scale-90',\n        'data-[ending-style]:opacity-0 data-[starting-style]:scale-90 data-[starting-style]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// List - A container for the autocomplete options\nfunction AutocompleteList({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.List>) {\n  return (\n    <AutocompletePrimitive.List data-slot=\"autocomplete-list\" className={cn('space-y-0.5', className)} {...props} />\n  );\n}\n\n// Collection - A collection of autocomplete items\nfunction AutocompleteCollection({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Collection>) {\n  return <AutocompletePrimitive.Collection data-slot=\"autocomplete-collection\" {...props} />;\n}\n\n// Row - A row container for autocomplete items\nfunction AutocompleteRow({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Row>) {\n  return (\n    <AutocompletePrimitive.Row\n      data-slot=\"autocomplete-row\"\n      className={cn('flex items-center gap-2', className)}\n      {...props}\n    />\n  );\n}\n\n// Item - An individual selectable option in the autocomplete\nfunction AutocompleteItem({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Item>) {\n  return (\n    <AutocompletePrimitive.Item\n      data-slot=\"autocomplete-item\"\n      className={cn(\n        'text-foreground relative flex cursor-default select-none items-center gap-2 rounded-md px-4 py-2 text-sm outline-hidden transition-colors',\n        'data-disabled:pointer-events-none data-disabled:opacity-50',\n        '[&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n        'data-[highlighted]:relative data-[highlighted]:z-0 data-[highlighted]:text-foreground data-[highlighted]:before:absolute',\n        'data-[highlighted]:before:inset-x-1 data-[highlighted]:before:inset-y-0 data-[highlighted]:before:z-[-1] data-[highlighted]:before:rounded-sm data-[highlighted]:before:bg-accent',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport interface AutocompleteContentProps extends React.ComponentProps<typeof AutocompletePrimitive.Popup> {\n  align?: AutocompletePrimitive.Positioner.Props['align'];\n  sideOffset?: AutocompletePrimitive.Positioner.Props['sideOffset'];\n  alignOffset?: AutocompletePrimitive.Positioner.Props['alignOffset'];\n  side?: AutocompletePrimitive.Positioner.Props['side'];\n  showBackdrop?: boolean;\n}\n\nfunction AutocompleteContent({\n  className,\n  children,\n  showBackdrop = false,\n  align = 'start',\n  sideOffset = 4,\n  alignOffset = 0,\n  side = 'bottom',\n  ...props\n}: AutocompleteContentProps) {\n  return (\n    <AutocompletePortal>\n      {showBackdrop && <AutocompleteBackdrop />}\n      <AutocompletePositioner align={align} sideOffset={sideOffset} alignOffset={alignOffset} side={side}>\n        <AutocompletePopup className={className} {...props}>\n          {children}\n        </AutocompletePopup>\n      </AutocompletePositioner>\n    </AutocompletePortal>\n  );\n}\n\n// Group - Groups related autocomplete items with the corresponding label\nfunction AutocompleteGroup({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Group>) {\n  return <AutocompletePrimitive.Group data-slot=\"autocomplete-group\" {...props} />;\n}\n\n// GroupLabel - An accessible label that is automatically associated with its parent group\nfunction AutocompleteGroupLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AutocompletePrimitive.GroupLabel>) {\n  return (\n    <AutocompletePrimitive.GroupLabel\n      data-slot=\"autocomplete-group-label\"\n      className={cn('px-2 py-1.5 text-xs text-muted-foreground font-medium', className)}\n      {...props}\n    />\n  );\n}\n\n// Empty - A component to display when no options are available\nfunction AutocompleteEmpty({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Empty>) {\n  return (\n    <AutocompletePrimitive.Empty\n      data-slot=\"autocomplete-empty\"\n      className={cn('px-2 py-1.5 text-sm text-muted-foreground empty:m-0 empty:p-0', className)}\n      {...props}\n    />\n  );\n}\n\n// Clear - A button to clear the input value\nfunction AutocompleteClear({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AutocompletePrimitive.Clear>) {\n  return (\n    <AutocompletePrimitive.Clear\n      data-slot=\"autocomplete-clear\"\n      className={cn(\n        'absolute cursor-pointer top-1/2 -translate-y-1/2 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100',\n        'focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none',\n        'data-[disabled]:pointer-events-none',\n        className,\n      )}\n      {...props}\n    >\n      {children ? children : <X className=\"size-3.5\" />}\n    </AutocompletePrimitive.Clear>\n  );\n}\n\n// Arrow - Displays an element positioned against the autocomplete anchor\nfunction AutocompleteArrow({ ...props }: React.ComponentProps<typeof AutocompletePrimitive.Arrow>) {\n  return <AutocompletePrimitive.Arrow data-slot=\"autocomplete-arrow\" {...props} />;\n}\n\n// Separator - A separator element accessible to screen readers\nfunction AutocompleteSeparator({ className, ...props }: React.ComponentProps<typeof AutocompletePrimitive.Separator>) {\n  return (\n    <AutocompletePrimitive.Separator\n      data-slot=\"autocomplete-separator\"\n      className={cn('my-1.5 h-px bg-muted', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Autocomplete,\n  AutocompleteControl,\n  AutocompleteValue,\n  AutocompleteTrigger,\n  AutocompleteInput,\n  AutocompleteIcon,\n  AutocompleteStatus,\n  AutocompletePortal,\n  AutocompleteBackdrop,\n  AutocompletePositioner,\n  AutocompletePopup,\n  AutocompleteList,\n  AutocompleteCollection,\n  AutocompleteRow,\n  AutocompleteItem,\n  AutocompleteContent,\n  AutocompleteGroup,\n  AutocompleteGroupLabel,\n  AutocompleteEmpty,\n  AutocompleteClear,\n  AutocompleteArrow,\n  AutocompleteSeparator,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-avatar.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Avatar } from '@base-ui-components/react/avatar';\nimport { cva, VariantProps } from 'class-variance-authority';\n\nconst avatarStatusVariants = cva('flex items-center rounded-full size-2 border-2 border-background', {\n  variants: {\n    variant: {\n      online: 'bg-green-600',\n      offline: 'bg-zinc-600 dark:bg-zinc-300',\n      busy: 'bg-yellow-600',\n      away: 'bg-blue-600',\n    },\n  },\n  defaultVariants: {\n    variant: 'online',\n  },\n});\n\n// Base UI Avatar Root\nfunction AvatarRoot({ className, ...props }: React.ComponentProps<typeof Avatar.Root>) {\n  return <Avatar.Root data-slot=\"avatar\" className={cn('relative flex h-10 w-10 shrink-0', className)} {...props} />;\n}\n\n// Base UI Avatar Image\nfunction AvatarImage({ className, ...props }: React.ComponentProps<typeof Avatar.Image>) {\n  return (\n    <Avatar.Image\n      data-slot=\"avatar-image\"\n      className={cn('aspect-square overflow-hidden h-full w-full rounded-full', className)}\n      {...props}\n    />\n  );\n}\n\n// Base UI Avatar Fallback\nfunction AvatarFallback({ className, ...props }: React.ComponentProps<typeof Avatar.Fallback>) {\n  return (\n    <Avatar.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'flex h-full w-full items-center justify-center rounded-full bg-muted text-sm font-medium text-muted-foreground overflow-hidden',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarIndicator({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"avatar-indicator\"\n      className={cn('absolute flex size-6 items-center justify-center', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarStatus({\n  className,\n  variant,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof avatarStatusVariants>) {\n  return <div data-slot=\"avatar-status\" className={cn(avatarStatusVariants({ variant }), className)} {...props} />;\n}\n\n// Exports with proper naming to match Base UI pattern\nexport { AvatarRoot as Avatar, AvatarImage, AvatarFallback, AvatarIndicator, AvatarStatus, avatarStatusVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({ className, variant, ...props }: React.ComponentProps<'label'> & VariantProps<typeof labelVariants>) {\n  return <label data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}