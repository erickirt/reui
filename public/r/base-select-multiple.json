{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-select-multiple",
  "type": "registry:component",
  "dependencies": [
    "@base-ui-components/react",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://reui.io/r/base-select.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-select/multiple.tsx",
      "content": "import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/registry/default/ui/base-select';\n\nconst items = [\n  {\n    label: 'Select fruits',\n    value: null,\n  },\n  {\n    label: 'Apple',\n    value: 'apple',\n  },\n  {\n    label: 'Banana',\n    value: 'banana',\n  },\n  {\n    label: 'Cherry',\n    value: 'cherry',\n  },\n  {\n    label: 'Orange',\n    value: 'orange',\n  },\n  {\n    label: 'Grape',\n    value: 'grape',\n  },\n  {\n    label: 'Strawberry',\n    value: 'strawberry',\n  },\n  {\n    label: 'Blueberry',\n    value: 'blueberry',\n  },\n];\n\nexport default function BaseSelectMultipleDemo() {\n  const renderValue = (value: string[]) => {\n    const MAX_COUNT = 2;\n\n    if (value.length === 0) return 'Select fruits';\n    const labels = value.map((val) => items.find((item) => item.value === val)?.label).filter(Boolean);\n\n    if (labels.length <= MAX_COUNT) {\n      return labels.join(', ');\n    }\n\n    const firstThree = labels.slice(0, MAX_COUNT);\n    const remaining = labels.length - MAX_COUNT;\n    return `${firstThree.join(', ')}, +${remaining} more`;\n  };\n\n  return (\n    <Select items={items} defaultValue={['apple', 'banana']} multiple>\n      <SelectTrigger className=\"w-60\">\n        <SelectValue className=\"truncate\">{renderValue}</SelectValue>\n      </SelectTrigger>\n      <SelectContent>\n        {items.map((item) => (\n          <SelectItem key={item.value} value={item.value}>\n            {item.label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/base-select.tsx",
      "content": "import * as React from 'react';\nimport { isValidElement, ReactNode } from 'react';\nimport { Select as SelectPrimitive } from '@base-ui-components/react/select';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon, X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Create a Context for `indicatorPosition` and `indicator` control\nconst SelectContext = React.createContext<{\n  indicatorPosition: 'left' | 'right';\n  indicatorVisibility: boolean;\n  indicator: ReactNode;\n  icon: ReactNode;\n}>({ indicatorPosition: 'left', indicator: null, indicatorVisibility: true, icon: null });\n\n// Root Component\nconst Select = ({\n  indicatorPosition = 'left',\n  indicatorVisibility = true,\n  indicator,\n  icon,\n  ...props\n}: {\n  indicatorPosition?: 'left' | 'right';\n  indicatorVisibility?: boolean;\n  indicator?: ReactNode;\n  icon?: ReactNode;\n} & React.ComponentProps<typeof SelectPrimitive.Root>) => {\n  return (\n    <SelectContext.Provider value={{ indicatorPosition, indicatorVisibility, indicator, icon }}>\n      <SelectPrimitive.Root data-slot=\"select\" {...props} />\n    </SelectContext.Provider>\n  );\n};\n\nfunction SelectGroup({ ...props }: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectPortal({ ...props }: React.ComponentProps<typeof SelectPrimitive.Portal>) {\n  return <SelectPrimitive.Portal data-slot=\"select-portal\" {...props} />;\n}\n\nfunction SelectPositioner({ ...props }: React.ComponentProps<typeof SelectPrimitive.Positioner>) {\n  return <SelectPrimitive.Positioner data-slot=\"select-positioner\" {...props} />;\n}\n\nfunction SelectValue({\n  placeholder,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value> & {\n  placeholder?: string;\n}) {\n  if (!placeholder) {\n    return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n  }\n\n  return (\n    <SelectPrimitive.Value\n      className=\"text-sm\"\n      render={(_, { value }) => {\n        if (value) {\n          return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n        }\n\n        // Placeholder\n        return (\n          <span data-slot=\"select-value\" className=\"text-muted-foreground\">\n            {placeholder}\n          </span>\n        );\n      }}\n      {...props}\n    />\n  );\n}\n\n// Clear - A button to clear the input value\nfunction SelectClear({ className, children, onClick, ...props }: React.ComponentProps<'button'>) {\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    onClick?.(event);\n  };\n\n  return (\n    <button\n      data-slot=\"select-clear\"\n      className={cn(\n        `\n\t\t\t\t\tcursor-pointer absolute top-1/2 -translate-y-1/2 end-2 \n\t\t\t\t\trounded-sm opacity-60 hover:opacity-100 transition-opacity \t\t\t\t\t\n\t\t\t\t\tfocus:outline-none focus:ring-0 focus:ring-offset-0 \n\t\t\t\t\tdisabled:pointer-events-none data-[disabled]:pointer-events-none \n\t\t\t\t`,\n        className,\n      )}\n      onClick={handleClick}\n      {...props}\n    >\n      {children ? children : <X />}\n    </button>\n  );\n}\n\n// Define size variants for SelectTrigger\nconst selectTriggerVariants = cva(\n  `\n\t\tgroup relative flex w-fit items-center justify-between gap-2 rounded-md border whitespace-nowrap select-none\n\t\tshadow-xs transition-[color,box-shadow,border-color] outline-none\n\t\tfocus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\n\t\taria-invalid:ring-destructive/50 aria-invalid:border-destructive\n\t\tdata-[disabled]:pointer-events-none data-[disabled]:opacity-60\n\t\t*:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2\n\t\t[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='text-'])]:text-muted-foreground\n\t`,\n  {\n    variants: {\n      size: {\n        xs: `\n\t\t\t\t\th-7 px-2 text-xs gap-1 rounded-md\n\t\t\t\t\t[&_[data-slot=select-icon]]:size-3.5 [&_[data-slot=select-icon]]:-me-0.75\n\t\t\t\t\t[&_[data-slot=select-clear]>svg]:size-3 [&_[data-slot=select-clear]]:end-6\n\t\t\t\t`,\n        sm: `\n\t\t\t\t\th-8 px-2.5 text-xs gap-1 rounded-md\n\t\t\t\t\t[&_[data-slot=select-icon]]:size-3.5 [&_[data-slot=select-icon]]:-me-0.75\n\t\t\t\t\t[&_[data-slot=select-clear]>svg]:size-3 [&_[data-slot=select-clear]]:end-6\n\t\t\t\t`,\n        md: `\n\t\t\t\t\th-9 px-3 text-sm gap-1 rounded-md\n\t\t\t\t\t[&_[data-slot=select-icon]]:size-4 [&_[data-slot=select-icon]]:-me-1\n\t\t\t\t\t[&_[data-slot=select-clear]>svg]:size-3.5 [&_[data-slot=select-clear]]:end-7\n\t\t\t\t`,\n        lg: `\n\t\t\t\t\th-10 px-4 text-sm gap-1.5 rounded-md\n\t\t\t\t\t[&_[data-slot=select-icon]]:size-4 [&_[data-slot=select-icon]]:-me-1.25\n\t\t\t\t\t[&_[data-slot=select-clear]>svg]:size-3.5 [&_[data-slot=select-clear]]:end-8\n\t\t\t\t`,\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nexport interface SelectTriggerProps\n  extends React.ComponentProps<typeof SelectPrimitive.Trigger>,\n    VariantProps<typeof selectTriggerVariants> {}\n\nfunction SelectTrigger({ className, children, size, ...props }: SelectTriggerProps) {\n  const { icon } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      className={cn(selectTriggerVariants({ size }), className)}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon>\n        {icon && isValidElement(icon) ? (\n          icon\n        ) : (\n          <ChevronDownIcon data-slot=\"select-icon\" className=\"opacity-60 transition-transform duration-200\" />\n        )}\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  side = 'bottom',\n  sideOffset = 2,\n  align = 'start',\n  alignOffset = 0,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Popup> & {\n  sideOffset?: SelectPrimitive.Positioner.Props['sideOffset'];\n  side?: SelectPrimitive.Positioner.Props['side'];\n  align?: SelectPrimitive.Positioner.Props['align'];\n  alignOffset?: SelectPrimitive.Positioner.Props['alignOffset'];\n  position?: 'popper' | 'item-aligned';\n}) {\n  return (\n    <SelectPortal>\n      <SelectPositioner\n        sideOffset={sideOffset}\n        alignItemWithTrigger={position === 'item-aligned'}\n        side={side}\n        align={align}\n        alignOffset={alignOffset}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Popup\n          data-slot=\"select-content\"\n          className={cn(\n            `\n\t\t\t\t\t\t\trelative z-50 max-h-(--available-height) min-w-(--anchor-width) overflow-x-hidden overflow-y-auto\n\t\t\t\t\t\t\tbg-popover text-popover-foreground\n\t\t\t\t\t\t\trounded-md border p-1 shadow-md\t\t\t\t\t\t\t\n\t\t\t\t\t\t\torigin-[var(--transform-origin)]\n\t\t\t\t\t\t\tdata-[open]:animate-in data-[closed]:animate-out \n\t\t\t\t\t\t\tdata-[closed]:fade-out-0 data-[open]:fade-in-0 \n\t\t\t\t\t\t\tdata-[closed]:zoom-out-95 data-[open]:zoom-in-95\n\t\t\t\t\t\t\tdata-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 \n\t\t\t\t\t\t\tdata-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\n\t\t\t\t\t\t`,\n            position === 'item-aligned' && '[&_*[data-slot=select-item]]:min-w-[var(--anchor-width)]',\n            className,\n          )}\n          {...props}\n        >\n          {children}\n        </SelectPrimitive.Popup>\n        <SelectScrollDownButton />\n      </SelectPositioner>\n    </SelectPortal>\n  );\n}\n\nfunction SelectItem({ className, children, ...props }: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  const { indicatorPosition, indicatorVisibility, indicator } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        `\n\t\t\t\t\trelative flex w-full items-center cursor-default select-none\n\t\t\t\t\trounded-sm py-1.5 text-sm outline-hidden\n\t\t\t\t\tdata-highlighted:bg-accent data-highlighted:text-accent-foreground\n\t\t\t\t\tdata-[disabled]:pointer-events-none data-[disabled]:opacity-50\n\t\t\t\t\t[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 [&_svg:not([class*='text-'])]:text-muted-foreground\n\t\t\t\t\t*:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\n\t\t\t\t`,\n        indicatorPosition === 'left' ? 'ps-7 pe-2' : 'pe-7 ps-2',\n        className,\n      )}\n      {...props}\n    >\n      {indicatorVisibility &&\n        (indicator && isValidElement(indicator) ? (\n          indicator\n        ) : (\n          <span\n            className={cn(\n              'absolute flex h-3.5 w-3.5 items-center justify-center',\n              indicatorPosition === 'left' ? 'start-2' : 'end-2',\n            )}\n          >\n            <SelectPrimitive.ItemIndicator data-slot=\"select-item-indicator\">\n              <CheckIcon className=\"h-4 w-4 text-primary\" />\n            </SelectPrimitive.ItemIndicator>\n          </span>\n        ))}\n      <SelectPrimitive.ItemText data-slot=\"select-item-text\">{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectLabel({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.GroupLabel>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.GroupLabel\n      data-slot=\"select-label\"\n      className={cn(\n        'text-muted-foreground py-1.5 text-xs font-medium',\n        indicatorPosition === 'left' ? 'ps-7 pe-2' : 'pe-7 ps-2',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SelectIndicator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ItemIndicator>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <span\n      data-slot=\"select-indicator\"\n      className={cn(\n        'absolute flex top-1/2 -translate-y-1/2 items-center justify-center',\n        indicatorPosition === 'left' ? 'start-2' : 'end-2',\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitive.ItemIndicator>{children}</SelectPrimitive.ItemIndicator>\n    </span>\n  );\n}\n\nfunction SelectSeparator({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectScrollUpButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollUpArrow>) {\n  return (\n    <SelectPrimitive.ScrollUpArrow\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        'fixed top-0 left-0 right-0 z-10 flex w-full cursor-default items-center justify-center rounded-t-md py-1 bg-popover',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpArrow>\n  );\n}\n\nfunction SelectScrollDownButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollDownArrow>) {\n  return (\n    <SelectPrimitive.ScrollDownArrow\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        'fixed bottom-0 left-0 right-0 z-10 flex w-full cursor-default items-center justify-center rounded-b-md py-1 bg-popover',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownArrow>\n  );\n}\n\nexport {\n  Select,\n  SelectTrigger,\n  SelectContent,\n  SelectItem,\n  SelectValue,\n  SelectGroup,\n  SelectLabel,\n  SelectIndicator,\n  SelectSeparator,\n  SelectClear,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}