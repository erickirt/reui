{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-select-form",
  "type": "registry:component",
  "dependencies": [
    "@hookform/resolvers",
    "react-hook-form",
    "zod",
    "clsx",
    "tailwind-merge",
    "@base-ui-components/react",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://reui.io/r/base-button.json",
    "https://reui.io/r/base-form.json",
    "https://reui.io/r/base-select.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-select/form.tsx",
      "content": "'use client';\n\nimport { Button } from '@/registry/default/ui/base-button';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/registry/default/ui/base-form';\nimport {\n  Select,\n  SelectClear,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/registry/default/ui/base-select';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nexport default function Component() {\n  const schema = z.object({\n    country: z.string().min(1, 'Please select a country.'),\n  });\n\n  const form = useForm<z.infer<typeof schema>>({\n    resolver: zodResolver(schema),\n    defaultValues: { country: '' },\n    mode: 'onSubmit',\n  });\n\n  const countryOptions = [\n    { label: 'United States', value: 'us' },\n    { label: 'United Kingdom', value: 'uk' },\n    { label: 'Canada', value: 'ca' },\n    { label: 'Australia', value: 'au' },\n    { label: 'Germany', value: 'de' },\n    { label: 'France', value: 'fr' },\n    { label: 'Japan', value: 'jp' },\n  ];\n\n  const renderCountryValue = (value: string) =>\n    countryOptions.find((option) => option.value === value)?.label ?? 'Select your country...';\n\n  function onSubmit(data: z.infer<typeof schema>) {\n    console.log('Form submitted:', data);\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-[300px] space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"country\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Country</FormLabel>\n              <Select value={field.value} onValueChange={field.onChange}>\n                <FormControl>\n                  <SelectTrigger className=\"w-full\">\n                    <SelectValue>{renderCountryValue}</SelectValue>\n                    {field.value && <SelectClear onClick={() => field.onChange('')} />}\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {countryOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormDescription>Choose your country of residence</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <div className=\"flex items-center justify-end gap-2.5\">\n          <Button type=\"reset\" variant=\"outline\" onClick={() => form.reset()}>\n            Reset\n          </Button>\n          <Button type=\"submit\">Submit</Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/base-button.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { mergeProps } from '@base-ui-components/react/merge-props';\nimport { useRender } from '@base-ui-components/react/use-render';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown, LucideIcon } from 'lucide-react';\n\nconst buttonVariants = cva(\n  'cursor-pointer group whitespace-nowrap focus-visible:outline-hidden inline-flex items-center justify-center has-data-[arrow=true]:justify-between whitespace-nowrap text-sm font-medium ring-offset-background transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-60 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground hover:bg-primary/90 data-[state=open]:bg-primary/90',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black hover:bg-zinc-950/90 dark:hover:bg-zinc-300/90 data-[state=open]:bg-zinc-950/90 dark:data-[state=open]:bg-zinc-300/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90 data-[state=open]:bg-destructive/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/90 data-[state=open]:bg-secondary/90',\n        outline: 'bg-background text-accent-foreground border border-input hover:bg-accent data-[state=open]:bg-accent',\n        dashed:\n          'text-accent-foreground border border-input border-dashed bg-background hover:bg-accent hover:text-accent-foreground data-[state=open]:text-accent-foreground',\n        ghost:\n          'text-accent-foreground hover:bg-accent hover:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        dim: 'text-muted-foreground hover:text-foreground data-[state=open]:text-foreground',\n        foreground: '',\n        inverse: '',\n      },\n      appearance: {\n        default: '',\n        ghost: '',\n      },\n      underline: {\n        solid: '',\n        dashed: '',\n      },\n      underlined: {\n        solid: '',\n        dashed: '',\n      },\n      size: {\n        lg: 'h-10 px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-9 px-3 gap-1.5 text-sm [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-8 px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n        xs: 'h-7 px-2 gap-1 text-xs [&_svg:not([class*=size-])]:size-3.5',\n        icon: 'size-9 [&_svg:not([class*=size-])]:size-4 shrink-0',\n      },\n      autoHeight: {\n        true: '',\n        false: '',\n      },\n      radius: {\n        md: 'rounded-md',\n        full: 'rounded-full',\n      },\n      mode: {\n        default: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        icon: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        link: 'text-primary h-auto p-0 bg-transparent rounded-none hover:bg-transparent data-[state=open]:bg-transparent',\n        input: `\n            justify-start font-normal hover:bg-background [&_svg]:transition-colors [&_svg]:hover:text-foreground data-[state=open]:bg-background \n            focus-visible:border-ring focus-visible:outline-hidden focus-visible:ring-[3px] focus-visible:ring-ring/30 \n            [[data-state=open]>&]:border-ring [[data-state=open]>&]:outline-hidden [[data-state=open]>&]:ring-[3px] \n            [[data-state=open]>&]:ring-ring/30 \n            aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n            in-data-[invalid=true]:border-destructive/60 in-data-[invalid=true]:ring-destructive/10  dark:in-data-[invalid=true]:border-destructive dark:in-data-[invalid=true]:ring-destructive/20\n          `,\n      },\n      placeholder: {\n        true: 'text-muted-foreground',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      // Icons opacity for default mode\n      {\n        variant: 'ghost',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Icons opacity for default mode\n      {\n        variant: 'outline',\n        mode: 'input',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Auto height\n      {\n        size: 'xs',\n        autoHeight: true,\n        className: 'h-auto min-h-7',\n      },\n      {\n        size: 'md',\n        autoHeight: true,\n        className: 'h-auto min-h-9',\n      },\n      {\n        size: 'sm',\n        autoHeight: true,\n        className: 'h-auto min-h-8',\n      },\n      {\n        size: 'lg',\n        autoHeight: true,\n        className: 'h-auto min-h-10',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Link\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      // Ghost\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'bg-transparent text-primary/90 hover:bg-primary/5 data-[state=open]:bg-primary/5',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'bg-transparent text-destructive/90 hover:bg-destructive/5 data-[state=open]:bg-destructive/5',\n      },\n      {\n        variant: 'ghost',\n        mode: 'icon',\n        className: 'text-muted-foreground',\n      },\n\n      // Size\n      {\n        size: 'sm',\n        mode: 'icon',\n        className: 'w-7 h-7 p-0 [[&_svg:not([class*=size-])]:size-3.5',\n      },\n      {\n        size: 'md',\n        mode: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'lg',\n        mode: 'icon',\n        className: 'w-10 h-10 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n\n      // Input mode\n      {\n        mode: 'input',\n        placeholder: true,\n        variant: 'outline',\n        className: 'font-normal text-muted-foreground',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'sm',\n        className: 'gap-1.25',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'md',\n        className: 'gap-1.5',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'lg',\n        className: 'gap-1.5',\n      },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      mode: 'default',\n      size: 'md',\n      radius: 'md',\n      appearance: 'default',\n    },\n  },\n);\n\nexport interface ButtonProps extends useRender.ComponentProps<'button'>, VariantProps<typeof buttonVariants> {\n  selected?: boolean;\n  asChild?: boolean;\n}\n\nfunction Button({\n  render,\n  asChild = false,\n  children,\n  className,\n  selected,\n  variant,\n  radius,\n  appearance,\n  mode,\n  size,\n  autoHeight,\n  underlined,\n  underline,\n  placeholder = false,\n  ...props\n}: ButtonProps) {\n  const defaultProps = {\n    'data-slot': 'button',\n    className: cn(\n      buttonVariants({\n        variant,\n        size,\n        radius,\n        appearance,\n        mode,\n        autoHeight,\n        placeholder,\n        underlined,\n        underline,\n        className,\n      }),\n      asChild && props.disabled && 'pointer-events-none opacity-50',\n    ),\n    ...(selected && { 'data-state': 'open' as const }),\n  };\n\n  // Determine render element based on asChild prop\n  const renderElement =\n    asChild && React.isValidElement(children)\n      ? (children as React.ReactElement<Record<string, unknown>, string | React.JSXElementConstructor<unknown>>)\n      : render || <button />;\n\n  // When using asChild, children becomes the element props, otherwise use children normally\n  const finalProps =\n    asChild && React.isValidElement(children)\n      ? mergeProps(defaultProps, props)\n      : mergeProps(defaultProps, { ...props, children });\n\n  const element = useRender({\n    render: renderElement,\n    props: finalProps,\n  });\n\n  return element;\n}\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon;\n}\n\nfunction ButtonArrow({ icon: Icon = ChevronDown, className, ...props }: ButtonArrowProps) {\n  return <Icon data-slot=\"button-arrow\" className={cn('ms-auto -me-1', className)} {...props} />;\n}\n\nexport { Button, ButtonArrow, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-form.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Label } from '@/registry/default/ui/base-label';\nimport { useRender } from '@base-ui-components/react/use-render';\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from 'react-hook-form';\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState } = useFormContext();\n  const formState = useFormState({ name: fieldContext.name });\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>');\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div data-slot=\"form-item\" className={cn('grid gap-2', className)} {...props} />\n    </FormItemContext.Provider>\n  );\n}\n\nfunction FormLabel({ className, ...props }: React.ComponentProps<typeof Label>) {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\n        'data-[error=true]:text-destructive peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className,\n      )}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n}\n\nfunction FormControl({ children = <div /> }: { children?: useRender.RenderProp }) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField();\n\n  return useRender({\n    render: children,\n    props: {\n      'data-slot': 'form-control',\n      id: formItemId,\n      'aria-describedby': !error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`,\n      'aria-invalid': !!error,\n    },\n  });\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n  const { error, formMessageId } = useFormField();\n  const body = error ? String(error?.message ?? '') : props.children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p data-slot=\"form-message\" id={formMessageId} className={cn('text-destructive text-sm', className)} {...props}>\n      {body}\n    </p>\n  );\n}\n\nexport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, useFormField };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-select.tsx",
      "content": "import * as React from 'react';\nimport { isValidElement, ReactNode } from 'react';\nimport { Select as SelectPrimitive } from '@base-ui-components/react/select';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon, X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Create a Context for `indicatorPosition` and `indicator` control\nconst SelectContext = React.createContext<{\n  indicatorPosition: 'left' | 'right';\n  indicatorVisibility: boolean;\n  indicator: ReactNode;\n  icon: ReactNode;\n}>({ indicatorPosition: 'left', indicator: null, indicatorVisibility: true, icon: null });\n\n// Root Component\nconst Select = ({\n  indicatorPosition = 'left',\n  indicatorVisibility = true,\n  indicator,\n  icon,\n  ...props\n}: {\n  indicatorPosition?: 'left' | 'right';\n  indicatorVisibility?: boolean;\n  indicator?: ReactNode;\n  icon?: ReactNode;\n} & React.ComponentProps<typeof SelectPrimitive.Root>) => {\n  return (\n    <SelectContext.Provider value={{ indicatorPosition, indicatorVisibility, indicator, icon }}>\n      <SelectPrimitive.Root data-slot=\"select\" {...props} />\n    </SelectContext.Provider>\n  );\n};\n\nfunction SelectGroup({ ...props }: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectPortal({ ...props }: React.ComponentProps<typeof SelectPrimitive.Portal>) {\n  return <SelectPrimitive.Portal data-slot=\"select-portal\" {...props} />;\n}\n\nfunction SelectPositioner({ ...props }: React.ComponentProps<typeof SelectPrimitive.Positioner>) {\n  return <SelectPrimitive.Positioner data-slot=\"select-positioner\" {...props} />;\n}\n\nfunction SelectValue({\n  placeholder,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value> & {\n  placeholder?: string;\n}) {\n  if (!placeholder) {\n    return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n  }\n\n  return (\n    <SelectPrimitive.Value\n      className=\"text-sm\"\n      render={(_, { value }) => {\n        if (value) {\n          return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n        }\n\n        // Placeholder\n        return (\n          <span data-slot=\"select-value\" className=\"text-muted-foreground\">\n            {placeholder}\n          </span>\n        );\n      }}\n      {...props}\n    />\n  );\n}\n\n// Clear - A button to clear the input value\nfunction SelectClear({ className, children, onClick, ...props }: React.ComponentProps<'button'>) {\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    onClick?.(event);\n  };\n\n  return (\n    <button\n      data-slot=\"select-clear\"\n      className={cn(\n        `\n\t\t\t\t\tcursor-pointer absolute top-1/2 -translate-y-1/2 end-2 \n\t\t\t\t\trounded-sm opacity-60 hover:opacity-100 transition-opacity \t\t\t\t\t\n\t\t\t\t\tfocus:outline-none focus:ring-0 focus:ring-offset-0 \n\t\t\t\t\tdisabled:pointer-events-none data-[disabled]:pointer-events-none \n\t\t\t\t`,\n        className,\n      )}\n      onClick={handleClick}\n      {...props}\n    >\n      {children ? children : <X />}\n    </button>\n  );\n}\n\n// Define size variants for SelectTrigger\nconst selectTriggerVariants = cva(\n  `\n\t\tgroup relative flex w-fit items-center justify-between gap-2 rounded-md border whitespace-nowrap select-none\n\t\tshadow-xs transition-[color,box-shadow,border-color] outline-none\n\t\tfocus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\n\t\taria-invalid:ring-destructive/50 aria-invalid:border-destructive\n\t\tdata-[disabled]:pointer-events-none data-[disabled]:opacity-60\n\t\t*:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2\n\t\t[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='text-'])]:text-muted-foreground\n\t`,\n  {\n    variants: {\n      size: {\n        xs: `\n\t\t\t\t\th-7 px-2 text-xs gap-1 rounded-md\n\t\t\t\t\t[&_[data-slot=select-icon]]:size-3.5 [&_[data-slot=select-icon]]:-me-0.75\n\t\t\t\t\t[&_[data-slot=select-clear]>svg]:size-3 [&_[data-slot=select-clear]]:end-6\n\t\t\t\t`,\n        sm: `\n\t\t\t\t\th-8 px-2.5 text-xs gap-1 rounded-md\n\t\t\t\t\t[&_[data-slot=select-icon]]:size-3.5 [&_[data-slot=select-icon]]:-me-0.75\n\t\t\t\t\t[&_[data-slot=select-clear]>svg]:size-3 [&_[data-slot=select-clear]]:end-6\n\t\t\t\t`,\n        md: `\n\t\t\t\t\th-9 px-3 text-sm gap-1 rounded-md\n\t\t\t\t\t[&_[data-slot=select-icon]]:size-4 [&_[data-slot=select-icon]]:-me-1\n\t\t\t\t\t[&_[data-slot=select-clear]>svg]:size-3.5 [&_[data-slot=select-clear]]:end-7\n\t\t\t\t`,\n        lg: `\n\t\t\t\t\th-10 px-4 text-sm gap-1.5 rounded-md\n\t\t\t\t\t[&_[data-slot=select-icon]]:size-4 [&_[data-slot=select-icon]]:-me-1.25\n\t\t\t\t\t[&_[data-slot=select-clear]>svg]:size-3.5 [&_[data-slot=select-clear]]:end-8\n\t\t\t\t`,\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nexport interface SelectTriggerProps\n  extends React.ComponentProps<typeof SelectPrimitive.Trigger>,\n    VariantProps<typeof selectTriggerVariants> {}\n\nfunction SelectTrigger({ className, children, size, ...props }: SelectTriggerProps) {\n  const { icon } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      className={cn(selectTriggerVariants({ size }), className)}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon>\n        {icon && isValidElement(icon) ? (\n          icon\n        ) : (\n          <ChevronDownIcon data-slot=\"select-icon\" className=\"opacity-60 transition-transform duration-200\" />\n        )}\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  side = 'bottom',\n  sideOffset = 2,\n  align = 'start',\n  alignOffset = 0,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Popup> & {\n  sideOffset?: SelectPrimitive.Positioner.Props['sideOffset'];\n  side?: SelectPrimitive.Positioner.Props['side'];\n  align?: SelectPrimitive.Positioner.Props['align'];\n  alignOffset?: SelectPrimitive.Positioner.Props['alignOffset'];\n  position?: 'popper' | 'item-aligned';\n}) {\n  return (\n    <SelectPortal>\n      <SelectPositioner\n        sideOffset={sideOffset}\n        alignItemWithTrigger={position === 'item-aligned'}\n        side={side}\n        align={align}\n        alignOffset={alignOffset}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Popup\n          data-slot=\"select-content\"\n          className={cn(\n            `\n\t\t\t\t\t\t\trelative z-50 max-h-(--available-height) min-w-(--anchor-width) overflow-x-hidden overflow-y-auto\n\t\t\t\t\t\t\tbg-popover text-popover-foreground\n\t\t\t\t\t\t\trounded-md border p-1 shadow-md\t\t\t\t\t\t\t\n\t\t\t\t\t\t\torigin-[var(--transform-origin)]\n\t\t\t\t\t\t\tdata-[open]:animate-in data-[closed]:animate-out \n\t\t\t\t\t\t\tdata-[closed]:fade-out-0 data-[open]:fade-in-0 \n\t\t\t\t\t\t\tdata-[closed]:zoom-out-95 data-[open]:zoom-in-95\n\t\t\t\t\t\t\tdata-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 \n\t\t\t\t\t\t\tdata-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\n\t\t\t\t\t\t`,\n            position === 'item-aligned' && '[&_*[data-slot=select-item]]:min-w-[var(--anchor-width)]',\n            className,\n          )}\n          {...props}\n        >\n          {children}\n        </SelectPrimitive.Popup>\n        <SelectScrollDownButton />\n      </SelectPositioner>\n    </SelectPortal>\n  );\n}\n\nfunction SelectItem({ className, children, ...props }: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  const { indicatorPosition, indicatorVisibility, indicator } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        `\n\t\t\t\t\trelative flex w-full items-center cursor-default select-none\n\t\t\t\t\trounded-sm py-1.5 text-sm outline-hidden\n\t\t\t\t\tdata-highlighted:bg-accent data-highlighted:text-accent-foreground\n\t\t\t\t\tdata-[disabled]:pointer-events-none data-[disabled]:opacity-50\n\t\t\t\t\t[&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 [&_svg:not([class*='text-'])]:text-muted-foreground\n\t\t\t\t\t*:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\n\t\t\t\t`,\n        indicatorPosition === 'left' ? 'ps-7 pe-2' : 'pe-7 ps-2',\n        className,\n      )}\n      {...props}\n    >\n      {indicatorVisibility &&\n        (indicator && isValidElement(indicator) ? (\n          indicator\n        ) : (\n          <span\n            className={cn(\n              'absolute flex h-3.5 w-3.5 items-center justify-center',\n              indicatorPosition === 'left' ? 'start-2' : 'end-2',\n            )}\n          >\n            <SelectPrimitive.ItemIndicator data-slot=\"select-item-indicator\">\n              <CheckIcon className=\"h-4 w-4 text-primary\" />\n            </SelectPrimitive.ItemIndicator>\n          </span>\n        ))}\n      <SelectPrimitive.ItemText data-slot=\"select-item-text\">{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectLabel({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.GroupLabel>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.GroupLabel\n      data-slot=\"select-label\"\n      className={cn(\n        'text-muted-foreground py-1.5 text-xs font-medium',\n        indicatorPosition === 'left' ? 'ps-7 pe-2' : 'pe-7 ps-2',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SelectIndicator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ItemIndicator>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <span\n      data-slot=\"select-indicator\"\n      className={cn(\n        'absolute flex top-1/2 -translate-y-1/2 items-center justify-center',\n        indicatorPosition === 'left' ? 'start-2' : 'end-2',\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitive.ItemIndicator>{children}</SelectPrimitive.ItemIndicator>\n    </span>\n  );\n}\n\nfunction SelectSeparator({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectScrollUpButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollUpArrow>) {\n  return (\n    <SelectPrimitive.ScrollUpArrow\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        'fixed top-0 left-0 right-0 z-10 flex w-full cursor-default items-center justify-center rounded-t-md py-1 bg-popover',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpArrow>\n  );\n}\n\nfunction SelectScrollDownButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollDownArrow>) {\n  return (\n    <SelectPrimitive.ScrollDownArrow\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        'fixed bottom-0 left-0 right-0 z-10 flex w-full cursor-default items-center justify-center rounded-b-md py-1 bg-popover',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownArrow>\n  );\n}\n\nexport {\n  Select,\n  SelectTrigger,\n  SelectContent,\n  SelectItem,\n  SelectValue,\n  SelectGroup,\n  SelectLabel,\n  SelectIndicator,\n  SelectSeparator,\n  SelectClear,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({ className, variant, ...props }: React.ComponentProps<'label'> & VariantProps<typeof labelVariants>) {\n  return <label data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}